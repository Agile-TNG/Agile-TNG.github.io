<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/continuous/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-28T08:54:14+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a pattern language for a
continuously delivering, continuously self-organizing, continuously adaptive
Agile enterprise that turns all the knobs to ten.</p>

<!-- more -->


<p><strong>[This post is currently in draft. I hope to finish it today but welcome
feedback both from my TNG compadres and anyone else who happens by &hellip;.]</strong></p>

<h2>Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
<li><p>SAFe targets conservative businesses with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban,
quarterly <a href="">release trains</a>, and Scrum. SAFe is designed to
permit an organization to keep its component silos intact. So it includes
some XP practices but ignores test-first TDD, continuous delivery,
collective ownership, merciless refactoring and feature teams.</p></li>
<li><p>LeSS is more progressive in some ways, offering a high-collaboration,
continuous cadence model that relies on <a href="">Scrum of Scrums</a> to deal with
integration and cross-cutting concerns. It is still big-change-up-front,
however, requiring an organization to refactor its component silos into
feature teams before commencing sprints, It leaves specifics of product
planning, test automation and so on for teams to determine ad hoc.</p></li>
<li><p>The Spotify model dispenses with Scrum in favour of a pattern of <a href="">Tribes and
Guilds</a>, strongly emphasizing bottom-up collaboration and team autonomy.
It gives no further guidance on method as it expects a structure of
top-flight autonomous teams is capable of deciding for themselves how to
choose, tailor and coordinate the rollout of further Agile practices.</p></li>
</ul>


<p>XSCALE is based on the premise that full XP actually makes scaling easier to
do, not harder, by assuring that technical debts are continuously paid. And
that a large enterprise can easily adopt XP practices by starting with a small
uncompromised XP team using the <a href="">Goose in the Bottle</a> and growing it with
the <a href="">Seven Samurai</a> patterns.</p>

<p>So XSCALE never needs to effect big-change-up-front of portfolios, programs or
component teams, but it still yields a thorough structural refactoring of
enterprise value streams.</p>

<p>As a result, XSCALE creates more Agility than SAFe as its methods of planning,
delivery and transformation are fully continuous and collaborative.  It offers
a more coherent organization than LeSS by combining Spotify <a href="">Tribes and
Guilds</a> with consensus decisioning via <a href="">Iroquois Councils</a>. And it&rsquo;s more
accessible than Spotify alone because it provides an iterative, standardized,
bump-free way to transform enterprise value streams over time.</p>

<p>XSCALE further differs from the other enterprise agile frameworks by embedding
XP in an ecosystem of interlocking Agile practice patterns from Lean Startup,
BDD, Lean UX, Kanban, DevOps, CD and A:TNG&rsquo;s OAPL to leapfrog the enterprise
to the ultimate Agile state of the art. Not because that waves a banner but
simply because with iterative transformation this strategy achieves the
greatest benefit with the lowest risk.</p>

<h2>XSCALE Principles</h2>

<p>XSCALE conforms with the <a href="">A:TNG values</a>, which form a strict superset of
those in the Agile Manifesto. As a practice pattern language XSCALE also rests
on five principles that should likewise be regarded as a strict superset of
those in the Manifesto.</p>

<h3>XP-based or &ldquo;eXcellent&rdquo;</h3>

<p>The word &ldquo;eXtreme&rdquo; in XP was so ill-chosen it became the impetus of the effort
to define the word &ldquo;Agile&rdquo; with a manifesto. Yet even now most Agile software
development teams use at least some XP, and the best ones use all of it. So
there&rsquo;s proven value in that X. Ignoring the word, what&rsquo;s the value?</p>

<p>XP mainly differs from Scrum in its engineering practices &ndash; pair working, TDD,
collective ownership, continuous integration and merciless refactoring &ndash; which
interlock to continuously pay off technical debt and thereby prevent cycles of
rework. At scale such debts multiply to reduce throughput, transparency and
sustainability. So we can define &ldquo;eXtreme&rdquo; as</p>

<p><strong>Pay technical debt before it incurs interest.</strong></p>

<p>XSCALE takes this principle and the XP practices as its foundation because
this enormously simplifies the challenge of making combinations of Agile teams
work together. The Scrum practices of sprint reviews and sprint retrospectives
are likewise eXtreme in defining and actioning early pay down of analysis and
process debt.</p>

<p>But we still have to deal with that bad X word. Happily the Manifesto dudes
already did this for us. They offer a principle that reads, &ldquo;Continuous
attention to technical excellence and good design enhances agility&rdquo;. So why
not take our X principle here as the definition of their &ldquo;excellence&rdquo;?</p>

<p>That way if someone you trust asks you what you mean by X, tell them
&ldquo;XP-based&rdquo;.  But if it&rsquo;s some Taylorist management dudes, tell &lsquo;em it means
&ldquo;eXcellent&rdquo; and &hellip; party on Taylorist management dudes &hellip;</p>

<h3>Scalable</h3>

<p>Scale is about combinations of requirements, of dependencies, of defects, and
of people. The number of combinations of a set grows very rapidly; a set of
just 10 things has over 3.6 million distinct combinations.  So the principle
of scalability is to:</p>

<p><strong>Continuously minimize combinatorial spaces</strong></p>

<p>Agile chunks requirements into stories, <a href="">DRY</a>s design artefacts, automates
testing and integration, and refactors people into feature teams all to comply
with this principle.</p>

<p>Contrariwise the all-hands release planning meetings and &ldquo;town halls&rdquo; in SAFe
and LeSS are stressful because they fail to limit conversation to small
combinations of people and concerns. The Spotify / Iroquois patterns actively
reduce the scope of conversations, so they&rsquo;re good for minimizing that
combinatorial space.</p>

<p>Another scaling challenge comes from combinations of business alternatives.
The problem is determining which combinatoins of alternatives have the most
value. Because Agile works as a hill-climbing algorithm, continously
integrating little bits of functionality into an existing whole, it&rsquo;s happy to
climb a molehill of value when there&rsquo;s an Everest right next door.</p>

<p>Business Model Canvas, Breadth-First Product Roadmap and Refactoring same
serve as ways to constract the combinatorial space of alteratives by explcitly
quantifying relative value. This aims to contract the combination of work of
multiple teams down to a stream of whole features to maximize relative ROI
while respecting stream funding limits and MVP and CoD constraints.</p>

<h3>Continuous</h3>

<p><strong>All cycles use the smallest effective batch size.</strong></p>

<p>SAFe employs a slow quarterly <a href="">release train</a> integration pattern. That&rsquo;s
useful for conservative organizations because it means they don&rsquo;t have to
alter their existing team structures. But several penalties come with it:</p>

<ul>
<li>Increased cost of quality due to phased regression and acceptance testing in
&ldquo;hardening sprints&rdquo;.</li>
<li>Lost ROI from keeping finished features on ice for a quarter rather than
releasing them as quickly as possible.</li>
<li>Surprises and integration overhead due to the large batch sizes involved in
quarterly releasing.</li>
</ul>


<p>XSCALE avoids these penalties by enabling independent feature teams to deploy
asynchronously using the GitFlow pattern, environment mapping, CD and BDD.</p>

<h3>Autonomous</h3>

<p><strong>Use consensus to make decisions and to delimit accountabilities.</strong></p>

<p>SAFe has been <a href="">criticized</a> for its assumption of hierarchical, top-down
decision-making, but LeSS tacitly assumes the same thing. Many of the benefits
of Agile derive from peer collaboration and team consensus games like planning
poker and retrospectives, and it doesn&rsquo;t seem reasonable to call a process
Agile at any scale if it doesn&rsquo;t empower consensus.</p>

<p>People have long dreamt of an anarchic utopia where the only law is the
<a href="">Golden Rule</a>. As the scale of a group increases past the <a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar
Number</a>, however, the <a href="">Tragedy
of the Commons</a> inevitably leads to conflicts of interest that must be
controlled through more restrictive forms of society.</p>

<p>Rationally, individual accountability should be applied when the business cost
of delaying a decision is greater than the social cost of failing to maintain
consensus. This trade-off seems to have been best managed, historically, by
the Iroquois Confederacy of North America.</p>

<p>The Iroquois used unanimous consent at a sub-Dunbar scale to govern a
hierarchy of treaty-making councils. Where consensus protocol was violated or
timing called for an immediate decision, per-tribe &ldquo;war chiefs&rdquo; were made
accountable. This proved stable at a multi-national scale over a period of
centuries. XSCALE combines it with the Spotify Tribal model to scale consensus
decisions while maintaining proper team and stream autonomy.</p>

<h3>Lean</h3>

<p>Lean is often defined as &ldquo;Minimizing Waste&rdquo;. Unfortunately that definition
admits an ambiguity. <a href="">Lean Startup</a>, <a href="">Lean UX</a> and <a href="">LSD</a> use Lean almost
as synonymous with Agile. But command and control frameworks like Lean Six
Sigma and Lean Accounting interpret Lean to mean cost reduction over ROI and
hierarchical standardization over adaptive collaboration. This makes them
unsuited to our purpose in XSCALE.</p>

<p>So let&rsquo;s eliminate the ambiguity and give the following as our Lean principle:</p>

<p><strong>Maximize ROI</strong></p>

<p>With this in mind we adopt the following Lean practice patterns:</p>

<ul>
<li><a href="">Lean Transformation Canvas</a> to use as a roadmap for the <a href="">Seven Samurai</a>
patterns.</li>
<li>Lean Startup&rsquo;s <a href="">business model canvas</a> to focus and pivot the enterprise&rsquo;s
value streams</li>
<li>Per stream <a href="">Value Stream Maps</a> converted to a <a href="">Lean Kanban</a> and
<a href="">cumulative flow diagrams</a> to represent the relationship between stream
funding, stream return, and product roadmaps.</li>
<li><a href="">Product Teams</a> working cross-functionally per Lean UX to coordinate
<a href="">set-based-design</a> with lo-fi prototyping, BDD and Roadmap Refactoring.</li>
</ul>


<p>These Lean practice patterns interlock to render a stream funding cycle
without any need for project budgets and baselines, but continuously
responsive to metrics and learnings relative both to the teams in the stream
and its market.</p>

<h2>Ecosystem</h2>

<p>We have become used to combining the noun ecosystem with the adjective
fragile. But this is an artefact of the anthropocene era where most ecosystems
are undergoing catastrophic change. The salient characteristic of an ecosystem
is not its fragility, but agility &ndash; that it embraces change and flourishes
thereby. This is how a living ecosystem differs from just a jumble of
creatures in a zoo &ndash; it self-organizes to adapt to cycles of change.</p>

<p>As the principles of a biological ecosystem we have sex and death. Sex
continously generates variations on behaviour and death removes variations
that don&rsquo;t efficiently adapt to circumstances.  As humans our great advantage
over other creatures is our ability to anticipate cycles of change so that we
can adapt to them without falling back on sex and death.</p>

<p>In XSCALE we can think of Lean pivoting in the place of sex and Agile
refactoring in the place of death, so we put this as</p>

<p><strong>Continuously pivot and refactor to adapt to cycles of change</strong></p>

<p>This isn&rsquo;t just about the product either, but the structure and process of
teams, streams and the enterprise. In order to pivot and refactor these things
XSCALE relies on a hierarchy of Iroquois councils &ndash; chapters as groupings of
people with common capabilities, stream councils which are composed of chapter
representatives, and an enterrpise council composed of stream council
representatives.  We&rsquo;ll explain how these work below.</p>

<h2>XSCALE Practice Patterns</h2>

<h3>Team process</h3>

<h4>Lean UX + BDD + XP</h4>

<h4>DevOps + CD + GitFlow</h4>

<h4>Chapters</h4>

<h3>Stream process</h3>

<h4>Spotify Model + Iroquois Councils</h4>

<h4>Value Stream Kanban</h4>

<h4>Stream Funding cycle</h4>

<h4>Stream Council</h4>

<h3>Enterprise process</h3>

<h4>Lean Business Modelling</h4>

<h4>Breadth-first Product Roadmap</h4>

<h4>Business Bingo</h4>

<h4>Roadmap Refactoring</h4>

<h4>Enterprise Council</h4>
]]></content>
  </entry>
  
</feed>
