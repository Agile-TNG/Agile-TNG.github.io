<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-05-28T08:01:21+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[Peter Merel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Behavioral Product Planning]]></title>
    <link href="http://Agile-TNG.github.io/2014/05/14/behavioral-product-planning/"/>
    <updated>2014-05-14T19:08:25+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/05/14/behavioral-product-planning</id>
    <content type="html"><![CDATA[<p><img src="http://Agile-TNG.github.io/images/koch-curve.gif" /></p>

<p>BPP is a pattern language based on BDD that enables a <a href="http://luxr.co/10_principles_of_lean_user_experience#who_is_involved">product
team</a> to
efficiently define, budget and prioritise a roadmap or backlog. It’s also a way to
answer some questions Agile has traditionally avoided: </p>

<ul>
  <li>How much will a set of features cost?</li>
  <li>How do we trade off different feature sets?</li>
  <li>How do we know a feature is ready to ship?</li>
</ul>

<!-- more -->

<p>Agile works as a hill-climbing algorithm. It continously integrates little stories
into a release, and it’s perfectly happy to climb a molehill of value when there’s an
Everest right next door. </p>

<ul id="markdown-toc">
  <li><a href="#the-patterns">The Patterns</a>    <ul>
      <li><a href="#feature-points">Feature Points</a></li>
      <li><a href="#breadth-first-roadmap">Breadth-First Roadmap</a></li>
      <li><a href="#backlog-bingo">Backlog Bingo</a></li>
      <li><a href="#royal-cod-prioritization">Royal Cod Prioritization</a></li>
      <li><a href="#royal-cod-vs-wsjf">Royal Cod vs WSJF</a></li>
      <li><a href="#bingo-uncertainty">Bingo Uncertainty</a></li>
      <li><a href="#roadmap-refactoring">Roadmap Refactoring</a></li>
    </ul>
  </li>
</ul>

<p>Small projects look to a good product owner to find their Everest, but at scale, with
portfolios of programs of projects, misalignment is easy and ROI is combinatorially
hard.  </p>

<p>In the above animation of a “Koch Curve”, a line segment is mapped to 4 smaller line
segments to look like a tent. Then each of those segments is transformed the same way,
breadth-first, and so on until it looks like broccoli. If a hill-climbing algorithm is
used on this Koch curve, it will always get stuck in a local maximum.  Mapping the
curve breadth-first, however, always gets to the global maximum.</p>

<p>Likewise BPP makes breadth-first distinctions about business alternatives, sorts these
into easily optimized piles, and iterates to locate the parts with maximum ROI. This
assures consistent decisions about business alternatives at all scales, and the
analysis completes quickly and efficiently, ruling out large swathes of lower ROI
“business space” without wasting analysis time on their in-depth exploration.</p>

<h2 id="the-patterns">The Patterns</h2>

<ul>
  <li><a href="#feature-points">Feature Points</a> are a way to reconcile budgets with story points</li>
  <li><a href="#breadth-first-roadmap">Breadth First Roadmap</a> is a way to map featuresets to
acceptance criteria</li>
  <li><a href="#backlog-bingo">Backlog Bingo</a> determines the dollar investment and the relative
return in delivering a set of products and services. </li>
  <li><a href="#royal-cod-prioritization">Royal Cod</a> applies Backlog Bingo to prioritize the
Breadth-First Roadmap</li>
  <li><a href="#roadmap-refactoring">Roadmap Refactoring</a> is a consensus game enabling product
owners to make rational trade-offs between different feature-sets. </li>
</ul>

<h3 id="feature-points">Feature Points</h3>

<p>In BPP we change the unit of estimation from story points to feature points.  Where
story points represent only the relative effort required to deliver a story, feature
points estimate increments of funding necesssary to deploy a feature. </p>

<p><img src="http://Agile-TNG.github.io/images/flow.png" width="400" /></p>

<p>Because the number of story points that will fit into a funding increment depends on
team velocity, there’s no linear mapping between feature points and story points.
That’s all right because there’s no need to attempt to normalize story points across
teams. Instead, BPP’s Backlog Bingo pattern gives feature points their empirical basis.</p>

<p>BPP uses feature points both in establishing a reasonable level of funding per
business objective, and as a direct input to its “Royal Cod” prioritization method.
If you need to represent both feature points and story points on the same diagram, we
“monetize” story points using the formula:</p>

<p>Monetized Story Points = Team Story Points / Feature Velocity</p>

<p>Here the “Feature Velocity” is simply the team’s throughput in feature points per
week.  If, for example, squad A delivers on average 10 feature points per week, its 25
story points = 2.5 FP. If squad B delivers 12 feature points per week, its 48 story
points = 4 FP. This makes it easy to graph cumulative flow diagrams per team, and to
assure that the budget for a stream is sufficient to deliver a set number of features
in a set period of time.</p>

<h3 id="breadth-first-roadmap">Breadth-First Roadmap</h3>

<p><img src="http://Agile-TNG.github.io/images/bfr.png" width="400" /></p>

<p>Breadth-First Roadmap (BFR) is a generalization of the Lean Startup <a href="http://www.youtube.com/watch?v=QoAOzMTLP5s">Business Model
Canvas</a>. It’s derived from of simple,
proven Agile practices - story normal form, INVEST properties and categories of BDD
acceptance criteria. But it functions to concrete agreement about a group’s delivery
targets and courses of action, and to assure complete analysis of same - to a limited
depth.</p>

<p>Every BFR can be regarded as an expansion of a single, large story that delimits its
scope. We call that the BFR’s <strong>“scoping story”</strong>. It’s important to begin by
describing this story in <a href="http://www.mountaingoatsoftware.com/blog/advantages-of-the-as-a-user-i-want-user-story-template">story-normal
form</a>
to assure roadmapping conversations converge on an intent shared by the whole team.</p>

<p><img src="http://Agile-TNG.github.io/images/roadmap0.png" width="400" /></p>

<p>For example, consider the following humorous scoping story from <a href="https://www.youtube.com/watch?v=sUkZFetWYY0">Despicable
Me</a>:</p>

<blockquote>
  <p>As a super-villain<br />
I want a hand-held super-weapon<br />
So that I can overpower people</p>
</blockquote>

<p>Let’s imagine three features on the resulting roadmap: a <a href="https://www.youtube.com/watch?v=bYfG2FwkVkM">Freeze
Ray</a>, a <a href="https://www.youtube.com/watch?v=X1gCJrOISYo">Squid
Launcher</a>, and <a href="https://www.youtube.com/watch?v=K0__FYRdiSY">Purple
Minions</a>.</p>

<ul>
  <li>At every level, BFR takes the form of a matrix of features and themes.  A <em>theme</em>
defines some category of acceptance criteria for a cross-cutting technical, business
or user experience concern. And the features are thought to combine to satisfy the
BFR’s scoping story across these themes.
    <ul>
      <li>Each feature is in turn expanded in <a href="http://www.mountaingoatsoftware.com/blog/advantages-of-the-as-a-user-i-want-user-story-template">story-normal
form</a>.
and checked to assure <a href="http://en.wikipedia.org/wiki/INVEST_(mnemonic)">INVEST</a>
compliance. Here the N in INVEST is modified to mean “we have the right people in
the room to Negotiate these stories” and the S is generalized to mean “scale
similar” rather than just “small”.</li>
    </ul>
  </li>
  <li>The intersection of a feature and a theme is a checkbox; each checkbox can only
contain a blank or a checkmark. A checkmark means there are acceptance criteria for
this feature in this theme and a blank means there aren’t.</li>
</ul>

<p><img src="http://Agile-TNG.github.io/images/roadmap1.png" width="400" /></p>

<ul>
  <li>Each feature is evaluated against all themes. </li>
  <li>As each feature is evaluated, also consider whether there are acceptance criteria in
a theme that isn’t yet part of the roadmap. If so, add a column for that theme and
re-evaluate all the features to determine whether they also have some acceptance
criteria in it.</li>
  <li>It’s fine to modify or refactor features as you go so long as all the roadmap’s
checkboxes are consistently updated.</li>
</ul>

<p>Above we realize that purple minions aren’t actually a hand-held weapon, but <a href="https://www.youtube.com/watch?v=r5VQ6MowYm0&amp;t=20m45s">the gun
that converts yellow minions to purple minions
is</a>, so we modify the roadmap
accordingly. We also note there are acceptance criteria here to do with the purple
minion gunscaling to large populations and also changing their allegiances, so we add
theme columns for those.</p>

<p><img src="http://Agile-TNG.github.io/images/roadmap2.png" width="400" /></p>

<ul>
  <li>Evaluate each theme to determine whether it is sufficiently covered by features to
deliver the scoping story.</li>
  <li>If not, the roadmap is extended with extra features to assure every theme is
sufficiently covered, with each new features subsequently evaluated in all themes.</li>
  <li>If it appears that all features have the same pattern of checkboxes for two themes,
we consider whether those two themes may be refactored into one.</li>
</ul>

<p>Continuing our despicable example, we see that none of the three weapons so far is
both accurate and scalable. Our product owner says that’s important for super-villain
weaponry, so there’s a missing feature. This is how we come up with the <a href="https://www.youtube.com/watch?v=AnxRf4JnXPU">Shrink
Ray</a>.</p>

<p><img src="http://Agile-TNG.github.io/images/roadmap3.png" width="400" /></p>

<ul>
  <li>If a theme has checkboxes for all or almost all features, break out further features
to encapsulate shared technical infrastructure to economically support their
commonalities. We call these <strong>technical features</strong>.</li>
  <li>If a theme has no checkboxes ticked, it may simply be deleted. If it has only a very
small number ticked, it may be better to refactor those checkboxes into a standalone
feature.</li>
  <li>In general this  process continues until the team agrees that the roadmap is
complete or that there is no more time available.</li>
</ul>

<p>Completing the despicable roadmap above we note that it will save feature points if
all these portable weapons share a common chassis - a standardized handle, trigger and
aiming device. So we factor out a technical feature for a gun chasis. Then, since none
of these weapons have acceptance criteria involving a Food Supply any more, we can
simply delete that column.</p>

<p>To use BFR properly it’s important to keep “breadth-first” in mind. The roadmapping
process may become long and onerous if features and themes are too numerous or
detailed for the scale of the roadmap. Each feature may be expanded into a further
roadmap at the next level down until they’re small enough to constitute estimable
delivery stories. So it’s counterproductive to over-specify them.</p>

<h3 id="backlog-bingo">Backlog Bingo</h3>

<p>The original XP Planning Game, now known as “Planning Poker”, is a proven way for
delivery teams to collaborate on estimating the relative effort required to deliver a
set of stories. XSCALE generalizes Planning Poker to Feature Points to make a method
of determining the dollar investment and the relative return in delivering a set of
products and services. </p>

<p><img src="http://Agile-TNG.github.io/images/bbingo.png" /></p>

<p>Backlog Bingo is easy and fun to play:</p>

<ul>
  <li>
    <p>Write <a href="http://www.youtube.com/watch?v=SjSHVDfXHQ4">Fibonacci numbers</a> from 1 to 89
on cards and lay them out in a row across a large table. There’s nothing magical
about Fibonacci numbers - we use them because they consistently lead people to think
in terms of trade-offs - is feature A really as big as feature B + feature C, and so
on.</p>
  </li>
  <li>
    <p>Select three previously delivered and deployed features with well documented
costs, one small, one medium and one large. Call these <strong>probes</strong>. Describe
each probe in story-normal form commensurable with the roadmap features you
want to estimate.</p>
  </li>
  <li>
    <p>Figure out a funding increment that constitutes the greatest common divisor
of the probes’ respective costs and call this a feature point. Place the
three probes under the Fibonacci numbers that match their respective
magnitudes in feature points. </p>
  </li>
  <li>
    <p>Pick a feature from your roadmap. Compare it with the probes, starting with
the middle one, to evaluate its relative size in Fibonacci multiples of
feature points.</p>
  </li>
  <li>
    <p>As you add features, sort them into the appropriate Fibonacci column.
Continue to compare features this way until there are none left to compare.
If the estimators cannot agree on the Fibonacci number for a feature,
split it into pieces they can estimate separately.</p>
  </li>
</ul>

<p>To estimate relative business value, you simply pick a different set of 3 probes - one
for an existing deployed feature that the PO says has low business value, and then one
that’s crticially important to business function, and then one roughly in between.
Place them at 3, 13 and 55, respectively, and the rest of the Bingo game runs as
above. Obviously there’s no dollar quantification of the return, but we’ve found
business stakeholders quickly converge on which features are worth more than which.
And the conversations they have in getting to agreement are extremely illuminating -
the technical team members need to listen carefully and ask questions to make certain
they share the businss context.</p>

<h3 id="royal-cod-prioritization">Royal Cod Prioritization</h3>

<p>ROI + COD (which we affectionately call “Royal Cod”) is a simple consensus game to
prioritise the BFR. It is both easier and more accurate than the SAFe “Weighted
Shortest Job First” (WSJF) equivalent for reasons described below.</p>

<p><img src="http://Agile-TNG.github.io/images/bpp.png" width="400" /></p>

<p>Royal Cod uses two Bingo sessions to assign values to the BFR features in terms of:</p>

<ul>
  <li>effort in feature points</li>
  <li>relative business value</li>
</ul>

<p>Technical team members - developers, architects, designers and testers - play the
first bingo game while the Product Owner and stakeholders answer questions and in turn
question any relative estimate they feel is too large or too small. </p>

<p>The second bingo game reverses these roles. Now it’s business stakeholders, SMEs and
the PO who work together to estimate business value while technical team members
answer questions. </p>

<p>Only technical team members are qualified to make effort estimates, and only business
team members to make business value estimates. The rest simply ask questions. Once
each feature obtains both estimates, Royal Cod prioritisation involves three steps:</p>

<ul>
  <li>Divide the business value number, which represents expected return, by effort, which
represents the required investment to obtain the return.  This yields relative
return on investment - ROI.</li>
  <li>List features vertically in order of decreasing ROI. Let the Product Owner increase
the priority of any business feature if they feel has a Cost of Delay (COD) that
warrants this.</li>
  <li>Once the PO is content with the prioritisation of business features, let technical
team members increase the priority of any <em>technical feature</em> they feel has a COD
that warrants this. </li>
</ul>

<p>In order to minimize overall cost of maintenance, a technical feature should have a
priority as close as possible to the highest prioity feature that depends upon it.</p>

<p>Once the COD adjustments have been made, record the relative priorities of the
features to prepare for Roadmap Refactoring, which determines how to best fit
these to funding constraints and MVP per business objective. </p>

<h3 id="royal-cod-vs-wsjf">Royal Cod vs WSJF</h3>

<p>In WSJF, COD is the whole game. It includes ROI - it’s not distinct from it. What’s
the advantage of doing it this way? Why not the SAFe way?</p>

<p><img src="http://Agile-TNG.github.io/images/cod.png" width="400" /></p>

<p>WSJF is defined in SAFe by the formula (Business-or-User Value
+ Time Criticality + Risk-Reduction-or-Opportunity-Enablement) / Duration. Since
there’s no clear distinction between business value, risk reduction and opportunity
enablement, WSJF simplifies to (Business Value / Duration) + (Criticality /
Duration).</p>

<p>There are several problems that:</p>

<ol>
  <li>It doesn’t makes sense to divide criticality by duration. Work doesn’t become less
critical just because it takes longer. There is a trade-off but it must be made
intelligently, not numerically.
    <ul>
      <li>Without clear distinctions for each term, which aren’t provided by SAFe, there’s no
way to assure those WSJF variables are independent. The overlap distorts relative
Business Value in an unpredictable way.</li>
      <li>By factoring COD variables out and giving them equal weighting, WSJF actively
prevents intelligent trade-off conversations that would reconcile differing
assumptions about their importance per feature.</li>
      <li>WSJF provides no opportunity to account for how combinations of features render the
individual feature more or less valuable. Again this is a moving target that also
calls for intelligent conversation, not blind statistics.</li>
      <li>WSJF doesn’t account for technical CoD.  Some features may have high CoD because of
architectural concerns or ambiguities. WSJF leaves that out.</li>
    </ul>
  </li>
</ol>

<p>All of these problems are simply eliminated in Royal Cod. Once you’ve factored out
ROI, it becomes easy for team members to agree on the remaining COD.  And rather than
adding in COD as if it were linear, which it’s not, it’s easy for team members to
adjust an ROI prioritization by discrete COD per feature - including technical COD of
technical features. The game is quick, simple and unambiguous.</p>

<h3 id="bingo-uncertainty">Bingo Uncertainty</h3>

<p>Uncertainty can lead technical team members to refuse to estimate a feature in Backlog
Bingo. That’s healthy - you don’t want a meaningless estimate.  But then technical
team members must clearly describe the ambiguities or inconsistencies they need
resolved by the Product Owner and technical SME before they can produce an estimate. </p>

<p>If a part of a feature is estimable but another part is not:</p>

<ul>
  <li>the feature is split into two, </li>
  <li>the estimable part is estimated</li>
  <li>a new technical feature is created to represent the work of resolving the
uncertainty via <a href="http://www.c2.com/cgi/wiki?SpikeDescribed">spikes</a> or a <a href="http://xp123.com/articles/set-based-concurrent-engineering/">set-based
design</a> process.</li>
  <li>estimating the inestimable feature is deferred until the spike/SBD story it
depends upon is completed.</li>
</ul>

<p>If a large number of features are inestimable it’s usually best to defer your bingo
session until the team has had time to work with architects and designers to nail
dependencies down better, or the product owner has sufficient time to resolve business
questions.</p>

<h3 id="roadmap-refactoring">Roadmap Refactoring</h3>

<p><img src="http://Agile-TNG.github.io/images/roadmapr.png" width="400" /></p>

<p>Roadmap Refactoring (RR) is a consensus game to enable product owners to make rational
trade-offs between different feature-sets. It can be used to quickly assemble a
release plan to hit a particular date, if need be, or to determine an ordering of
feaure sets to maximize product-market fit within the funding profile of a continuous
delivery stream.</p>

<p>Like the other XSCALE enterprise practices, RR is a quick consensus game with
very straightforward rules:</p>

<ol>
  <li>Using the BPP prioritization, lay out all available features in columns
grouped by business objective.</li>
  <li>Pick the first column. Pick the feature at the top of the column. Let the
PO as advised by their product team determine whether the objective can be
met without including that feature. </li>
  <li>Continue feature by feature until the PO sees one that, while still
valuable, could be left out without preventing satisfaction of the column
objective.</li>
  <li>All of the features above that one constitute the minimum viable
featureset for that objective. Call them “bronze”. </li>
  <li>Continue to pick features in that column now asking the PO whether the
feature has a concrete quantified business value, or just seems “nice to
have”. Call the former “silver” and the latter “gold”.</li>
  <li>Total how many feature points are in each of the bronze, silver and gold
levels for that column.</li>
  <li>Do this for all columns.</li>
  <li>If fitting to a continuous delivery funding model, POs simply prioritize
the bronze, silver and gold tranches of features across all columns.  Pick
the most important one, then the next most important one, and so on.  Use
the feature points to project release dates for marketing and other
business development purposes.</li>
  <li>If you’re only playing to create a release plan for a particular
date/budget, determine how many feature points correspond to that release.
Now let the PO determine which combination of bronze/silver/gold levels
will maximize deployed value for that release.</li>
  <li>Record all of these decisions as an easy  starting point for the next RR
session.</li>
</ol>

<p>Roadmap Refactoring is played whenever new features are added to the stream
backlog or whenever the PO calls for it. Because it’s such a quick game it’s
also possible to play in a “what-if” mode to evaluate alternative product
plans to evaluate possible responses to changes in market conditions.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSCALE: an Agile Enterprise Ecosystem]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="http://Agile-TNG.github.io/images/xscale.png" /></p>

<p>Related to SAFe, Spotify and BDD, XSCALE is a continuously delivering, continuously
self-organizing, continuously adaptive Agile enterprise ecosystem that turns all the
knobs to ten.</p>

<!-- more -->

<h2 class="no-toc" id="why-xscale">Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale Agile. The
most popular are SAFe, LeSS, Agile Path and the Spotify Tribal model.  Each has its
<a href="#related-frameworks">strengths and weaknesses</a>.</p>

<ul id="markdown-toc">
  <li><a href="#why-xscale">Why XSCALE?</a></li>
  <li><a href="#xscale-principles">XSCALE Principles</a>    <ul>
      <li><a href="#excellence">eXcellence</a></li>
      <li><a href="#scale-symmetry">Scale-symmetry</a></li>
      <li><a href="#continuous">Continuous</a></li>
      <li><a href="#autonomous">Autonomous</a></li>
      <li><a href="#lean">Lean</a></li>
      <li><a href="#ecosystem">Ecosystem</a></li>
    </ul>
  </li>
  <li><a href="#xscale-patterns">XSCALE Patterns</a></li>
  <li><a href="#enterprise-practices">Enterprise Practices</a>    <ul>
      <li><a href="#bpp">BPP</a></li>
      <li><a href="#continuous-adaptation">Continuous Adaptation</a></li>
      <li><a href="#chapters-and-councils">Chapters and Councils</a></li>
      <li><a href="#meeting-schedules">Meeting Schedules</a></li>
      <li><a href="#continuous-adaptation-1">Continuous Adaptation</a></li>
      <li><a href="#funding-cycle">Funding Cycle</a></li>
      <li><a href="#stream-structure">Stream Structure</a></li>
      <li><a href="#stream-flow-diagram">Stream Flow Diagram</a></li>
    </ul>
  </li>
  <li><a href="#squad-practices">Squad Practices</a>    <ul>
      <li><a href="#devops--cd--gitflow">DevOps + CD + GitFlow</a></li>
      <li><a href="#lean-ux--bdd--xp">Lean UX + BDD + XP</a></li>
    </ul>
  </li>
  <li><a href="#related-frameworks">Related frameworks</a></li>
</ul>

<p>XSCALE is a synthesis that:</p>

<ul>
  <li>Standardizes team practices using Scrum-XP like SAFe</li>
  <li>Transforms the enterprise iteratively like Agile Path</li>
  <li>Refactors component silos into feature teams like LeSS</li>
  <li>Uses tribal structures, CD and DevOps like Spotify</li>
</ul>

<p>But XSCALE does more than just cherry-pick, introducing:</p>

<ul>
  <li>Continuous adaptation using the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">Seven
Samurai</a> pattern language.</li>
  <li>Continuous product planning using a method based on Lean Startup, Lean UX and
<a href="http://agiletng.org/2014/05/14/behavioral-product-planning/">BPP</a></li>
  <li>Continuous self-organization using <a href="http://agiletng.org/2014/04/02/iroquois-council/">Iroquois
councils</a>, a combination of Open
Space, BDD and Kanban.</li>
</ul>

<p>Like any framework, XSCALE is really just a collection of patterns that have been
proved to reinforce each others’ strengths. Its intent is to afford enterprises on all
scales a way to iteratively create a state of the art Agile capability while
minimizing risk of disruption to existing value streams. </p>

<h2 id="xscale-principles">XSCALE Principles</h2>

<p>XSCALE conforms with the <a href="http://agiletng.org/2014/03/10/4-new-values/">A:TNG values</a>,
which form a strict superset of those in the Agile Manifesto. Within these values
XSCALE offers six principles that also form a superset of the ones in the Manifesto.</p>

<dl>
  <dt>eXcellence</dt>
  <dd>Turn all the knobs to ten.</dd>
  <dt>Scale-symmetry</dt>
  <dd>Draw distinctions to control combinations.</dd>
  <dt>Continuous</dt>
  <dd>Work on the smallest practical cycle time and batch size.</dd>
  <dt>Autonomous</dt>
  <dd>Enable consensus to make decisions and delimit accountabilities.</dd>
  <dt>Lean</dt>
  <dd>Maximize net ROI.</dd>
  <dt>Ecosystem</dt>
  <dd>Continuous adaptation of the whole to its parts.</dd>
</dl>

<p>Explanation for each principle follows, then a discussion of practice patterns that
embody them.</p>

<h3 id="excellence">eXcellence</h3>

<p>The term “extreme” in the original XP unfortunately evoked the idea of recklessness,
which caused some trepidation in the fledgling days of Agile.  Nevertheless the
manifesto authors recognized XP’s true intent in their principle which reads,
“Continuous attention to technical excellence and good design enhances agility”.
XSCALE calls this continuous attention “eXcellence”, and takes Beck’s definition:</p>

<blockquote>
  <ul>
    <li>If code reviews are good, we’ll review code all the time [Pair Working].</li>
    <li>If testing is good, everyone will test all the time [TDD], even the customers
[ATDD, now BDD]</li>
    <li>If simplicity is good, we’ll always leave the system with the simplest design that
supports its current functionality [Refactoring]</li>
    <li>If integration testing is important, we’ll integrate and test several times a day
[Continuous Integration]</li>
    <li>If short iterations are good, we’ll make the iterations really short [Stories]</li>
  </ul>
</blockquote>

<p>And so on - it wobbled around a bit from edition to edition but Beck summed it up with
the maxim,</p>

<p><strong>Turn all the knobs to ten.</strong></p>

<p><img src="http://Agile-TNG.github.io/images/knobs.jpg" /></p>

<p>XSCALE regards the XP engineering practices, BDD, CD and Feature Teams as the
fundamentals of technical excellence. These patterns interlock to assure technical
debt is paid before it earns interest and impacts ROI, and thereby keeps the
delivery process stable, predictable and flexible. </p>

<h3 id="scale-symmetry">Scale-symmetry</h3>

<p>Scale is about combinations of requirements, of dependencies, of defects,
and of people. The number of combinations of a set grows very rapidly; a set
of just 10 things has over 3.6 million distinct combinations. </p>

<p>Yet golfers are untroubled by combinations of billions of grass blades.  They
use simple distinctions to control the combined behaviours of grass: “the
green”, “the rough”, and so on. Once the ball is placed they make further
sub-distinctions to do with common slopes and blade-lengths.  They only make
distinctions about the commonalities, never about all the interactions between
individual grass blades. </p>

<p>Agile uses this approach when it 
* refactors code into distinct (<a href="">DRY</a>) classes by common behaviours
* automates testing to keep ambient defect count low, minimizing the time
  required to sort out combinations of defects
* combines people into small teams with distinct backlogs to limit the need
  for cross-team communications
* The Spotify patterns do this too by factoring cross-cutting concerns to
  distinct chapters and guilds. </p>

<p>In general the principle is:</p>

<p><strong>Draw distinctions to control combinations</strong></p>

<p><img src="http://Agile-TNG.github.io/images/koch-curve.gif" /></p>

<p>Fractal curves use the same idea. In this animation of a “Koch Curve” a line
segment is mapped to 4 smaller line segments to look like a tent. Then
each of those is transformed the same way, and so on, breadth-first, so that
a complicated curve forms. </p>

<p>XSCALE applies this principle to the challenge of determining which
combinations of business alternatives have most value.  Agile works as a
hill-climbing method, continously integrating little stories into a whole,
it’s quite happy to climb a molehill of value when there’s an Everest right
next door. </p>

<p>Small projects look to a good product owner to find their Everest, but when you’ve got
portfolios of programs of projects, misalignment is easy and consistent value is
combinatorially hard.  If a hill-climbing method is used on the Koch curve above, for
example, it is vanishingly unlikely to reach the highest point. Mapping the curve
breadth-first, however, will always find that point.</p>

<p>XSCALE uses the Behavioral Product Planning games to achieve control over this
combinatorial space. BPP makes breadth-first distinctions about business alternatives,
then sorts these into easily optimized piles. Then it iterates on the features of
maximum ROI. This assures consistent decisions about business alternatives at all
scales, and it the analysis completes quickly and efficiently, ruling out large
amounts of the “search space” without in depth exploration.</p>

<h3 id="continuous">Continuous</h3>

<p>SAFe promotes Punctuated Cadence over Continuous Delivery, employing a
quarterly <a href="">release train</a> integration pattern. This enables conservative
organizations to keep their component silos, but at no small price:</p>

<ul>
  <li>Increased cost of quality due to deferring regression and acceptance
testing to “hardening sprints”.</li>
  <li>Wasted time in meetings to figure out how to satisfy combinatoric
inter-team dependency cycles.</li>
  <li>Lost ROI from keeping finished features on ice for a quarter</li>
</ul>

<p>By employing continuous rather than big-bang transformation, XSCALE improves
on SAFe to iteratively break component silos into feature teams. The benefit
is to avoid the above penalties as feature teams can use the GitFlow pattern
language for continuous delivery. In general the principle is simply:</p>

<p><strong>Work on the smallest practical cycle time and batch size</strong></p>

<p><img src="http://Agile-TNG.github.io/images/sushi-train.png" /></p>

<p>XSCALE applies the same principle in its continuous product planning,
continuous stream coordination, and continuous transformation patterns.</p>

<h3 id="autonomous">Autonomous</h3>

<p>Philosophers dream of an anarchic utopia where the only law is the <a href="">Golden
Rule</a>. As the scale of a group increases past the <a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar
Number</a>, however, social
obligations combinatorially degrade so the <a href="">Tragedy of the Commons</a> leads
to conflicts of interest that must be controlled through more restrictive
forms of society. </p>

<p>Many of the benefits of Agile derive from peer collaboration and team
consensus games like planning poker and retrospectives, and it wouldn’t be
reasonable to call a process Agile at any scale if it doesn’t empower
consensus through games. So the XSCALE principle is:</p>

<p><strong>Enable consensus to make decisions and to delimit accountabilities.</strong></p>

<p><img src="http://Agile-TNG.github.io/images/council.png" /></p>

<p>In theory, individual accountability should be applied when the business
cost of delaying a decision is greater than the social cost of failing to
maintain consensus. In practice it’s hard to figure these costs out.
Historically the happiest medium seems to have been the Iroquois
Confederacy, which used unanimous consent at sub-Dunbar scales to control a
hierarchy of peer councils. </p>

<p>Where consensus protocol was violated or timing called for a rapid decision,
per-tribe “war chiefs” were made accountable. This combination of councils
and accountables proved stable at a multi-national scale over a period of
centuries. XSCALE combines it with the Spotify tribal model to scale
consensus decisions while clearly maintaining team and stream autonomy.</p>

<h3 id="lean">Lean</h3>

<p>Lean is often defined as “Minimizing Waste”. Unfortunately that definition
only refers to one of the three Lean pathologies, muda. Lean also works to
minimize overburden (muri) and irregularity (mura). </p>

<p><img src="http://Agile-TNG.github.io/images/mmm.jpg" /></p>

<p>The waste maxim also admits an ambiguity. <a href="">Lean Startup</a>, <a href="">Lean UX</a> and
<a href="">LSD</a> use Lean to mean process efficiency, but Lean Six Sigma and Lean
Accounting interpret it to mean cost minimization, right first time, and
hierarchical standardization. These latter forms of Lean can appear to
oppose Agile’s focus on maximizing ROI, fail fast, and adaptive
collaboration.  To prevent confusion XSCALE eliminates the ambiguity by
defining the Lean principle simply as:</p>

<p><strong>Maximize net ROI</strong></p>

<p>We say net ROI to account for Cost of Delay (COD), and we represent this
explicitly when adapting the order and design of the work. With this in mind
XSCALE adapts several specific Lean practice patterns:</p>

<ul>
  <li>As a special case of Breadth-first Roadmapping, Lean Startup’s <a href="">business
model canvas</a> to pivot and refactor the enterprise’s value streams</li>
  <li>Per stream <a href="">Value Stream Maps</a> converted to a <a href="">Lean Kanban</a> and
<a href="">cumulative flow diagrams</a> to represent the relationship between stream
funding, stream return, and the stream roadmap</li>
  <li><a href="">Product Teams</a> working cross-functionally per Lean UX to coordinate
<a href="">set-based-design</a> with lo-fi prototyping, BDD and Feature roadmaps</li>
  <li><a href="">Lean Transformation Canvas</a> as a roadmap for the <a href="">Seven Samurai</a>.</li>
</ul>

<p>These Lean practices all work to maximise net ROI. XSCALE interlocks them using
scale-symmetric roadmapping to render a simple stream funding cycle without resorting
to project budgets and baselines. This provides a way for teams in the stream and
streams in the enterprise to continuously respond to changes in internal and external
metrics, innovations and new learnings.</p>

<h3 id="ecosystem">Ecosystem</h3>

<p>We have become used to combining the noun ecosystem with the adjective
fragile. This is an artefact of the <a href="">anthropocene era</a> where biological
ecosystems are undergoing catastrophic change. </p>

<p>The prime characteristic of an ecosystem, however, is not fragility, but
agility. An ecosystem embraces cycles of change to maintain its productivity
over time. So a biological ecosystem differs from a zoo in that it
continuously adapts to changes in the populations and behaviours of its
constituent organisms. In a scale-symmetric sense the same might be said of
an individual organism and its constituent cells.</p>

<p>The biological principles are generation and death. Generation continuously
produces experimental variations in behaviour, and death removes variations
that don’t efficiently adapt to the whole. In XSCALE we think of Lean
pivoting and <a href="">set-based design</a> serving the function of generation, and
Agile refactoring serving that of death, but the principle of the ecosystem
remains the same:</p>

<p><strong>Continuous adaptation of the whole to its parts</strong></p>

<p><img src="http://Agile-TNG.github.io/images/eco.png" /></p>

<p>XP embodies this principle in its practice of <a href="http://www.c2.com/cgi/wiki?RefactorMercilessly">Merciless
Refactoring</a> and Lean Startup in its
principal of <a href="http://blog.leanstartupcircle.com/get-paid-or-get-pivoting/">Get Paid or Get
Pivoting</a>.  XSCALE
extends it to the rollout of structure and practices to squads in streams and streams
in the enterprise. The ecosystem principle turns the Taylorist conceit of all-wise
managers and serf-like workers on its head, leveraging the Agile function of
management as <a href="">servant-leaders</a> to autonomous teams of peer workers.</p>

<p>In order to pivot and refactor the enterprise as a whole, XSCALE relies on a
hierarchy of councils: </p>

<ul>
  <li>chapters as groupings of people with common capabilities across squads </li>
  <li>stream councils steered by chapter representatives</li>
  <li>an enterprise council steered by stream council representatives. </li>
</ul>

<p>At each level there are also some individual accountabilities defined by
these teams.  Each squad in a stream has distinct roles for agile coach and
product owner.  Each stream has a product manager and a stream manager. And
the enterprise has its executive officers. </p>

<p>The accountabilities of these individual roles are defined by treaties
within their respective councils. Likewise the accountabilities of the
enterprise as a whole, and each of its streams, and each of their chapters,
are all respectively defined by treaties in story-normal form. Councils each
use this statement of their accountability to scope their planning using the
<strong>Breadth-First Roadmap</strong> method described below.</p>

<h2 id="xscale-patterns">XSCALE Patterns</h2>

<p>XSCALE is “opinionated” in the same sense as <a href="">Ruby on Rails</a>.  This means
you’ll want to follow its practices very closely to begin with - because this
is how it “turns all the knobs to ten”.  </p>

<p>Because XSCALE isn’t a big-change-up-front framework, as it grows and the
enterprise gains experience with its practices the various councils will
collaboratively vary and augment them. Nevertheless, the following provides
a state of the art starting point.</p>

<h2 id="enterprise-practices">Enterprise Practices</h2>

<p>XSCALE adopts the <a href="">Beyond Budgeting</a> premise that each value stream must
either earn its keep or convince other, self-funded streams that it is worth
their investing some part of their revenue to fund it. This is not to
disempower executives, but to assure that the enterprise pivots coherently
and collaboratively to improve its overall ROI.</p>

<h3 id="bpp">BPP</h3>

<p>While we describe the patterns in this section as “Enterprise Practices”, this doesn’t
mean they’re only performed in the stratosphere.  Following the principle of
Scale-Symmetry these same patterns are used by streams and squads to optimize their
respective ROI and reconcile same with available funding.  As a pattern language based
on and generating BDD we refer to these practices collectively as Behavioral Product
Planning, and describe them in their own post
<a href="http://agiletng.org/2014/05/14/behavioral-product-planning/">here</a>.</p>

<h3 id="continuous-adaptation">Continuous Adaptation</h3>

<p>As per the <a href="">Seven Samurai</a> pattern language, XSCALE starts by constructing
a “Minimum Viable Agile Capability” - a “spike” squad within a single stream
that forms a model for all those to come.  The spike squad prototypes and
proves that its tools, relationships and processes integrate as an
efficient end to end SDLC by delivering a stream of small concrete features
with real business value.</p>

<p>In other words this is the familiar Agile <a href="">steel thread</a> pattern applied
to organizing an Agile capability. It is fundamentally important to avoid
pain at scale that the spike squad delivers whole end to end features, not
merely components, so that all the technical and organizational fundamentals
are reliably integrated.</p>

<p>To continuously integrate the spike squad with the pre-existing
organization, <a href="">Seven Samurai</a> assembles the first Stream Council from the
lead doers - not deciders - from each of the organization’s pre-existing
component silos.  As delivery squads multiply, these leads naturally
function as chapter representatives on the Stream Council.</p>

<p>Meanwhile progressive senior managers are enroled into the initial
Enterprise Council to provide a one-stop reporting and support shop for
coaches.  As XSCALE is adopted by more streams, their managers will take
part in their respective councils and thereby may become stream reps on the
Enterprise Council. As described below this leverages the Scale-Symmetric
principle to assure consistent, iterative rollout of XSCALE across the
enterprise.</p>

<h3 id="chapters-and-councils">Chapters and Councils</h3>

<p>As explained in the Ecosystem section above, Streams and Squads have their
specific purposes distinguished by treaties framed in story-normal form.
Councils and Chapters adapt and expand these respective treaties by means of
Breadth-First Roadmaps that detail how their Streams and Squads  will
organize to satisfy the terms of the treaties that define them. </p>

<p>We refer to this process as Continous Adaptation because it’s not a simple
matter of executing a pre-defined plan.  The BPP patterns are applied to
estimate and prioritize the respective  roadmap using themes drawn from the
Seven Samurai patterns to reflect respective accountabilities and
responsibilities at each level:</p>

<ul>
  <li>Chapters are accountable for the Adoption and Acceleration of practice
patterns by their squads, and responsible for providing Awareness and
Architecture sufficient to support them.</li>
  <li>Stream Councils are accountable for overall Awareness and Architecture,
and responsible for Stream Flow Assessment of their current state and BPP
Analysis of their BFR.</li>
  <li>The Enterprise Council is accountable for Assessment and Analysis across
all streams, and responsible for cross-stream Alignment and, in
conjunction with the CFO’s office, Appropriation of funding per stream.</li>
</ul>

<p>Each council keeps an Adaptation Kanban to track the progress of features
drawn from a backlog it generates by using BPP on its BFR, and cumulative
flow diagrams - not to be confused with the Stream Flow diagrams - represent
progress as the whole adapts over time.</p>

<h3 id="meeting-schedules">Meeting Schedules</h3>

<p><img src="http://Agile-TNG.github.io/images/chapters.png" width="400" /></p>

<p>As XSCALE rolls out it becomes advantageous to synchronize the various council
meetings so that they don’t cause calendar-stress. XSCALE leverages the squads’weekly
cycle to achieve this:</p>

<ul>
  <li>
    <p>All of a stream’s chapters meet simultaneously every Friday lunch so that
squad activities aren’t interrupted. Chapters may also meet at other
times coordinating via their Stream Council.</p>
  </li>
  <li>
    <p>At the Friday lunch meeting a Chapter selects its representatives for the
Stream Council, which is conducted immediately afterward while squads are
conducting their weekly reviews. To avoid waste, time and location for
reviews, retros and council meetings should be pre-determined and
synchronized.</p>
  </li>
  <li>
    <p>Squad retrospectives are held immediately following the Stream Council
meeting so that any treaties proposed by Council might be immediately and
unanimously ratified. </p>
  </li>
  <li>
    <p>Guild meetings are held asynchronously as convenient to the Guild members.</p>
  </li>
  <li>
    <p>Once a month each Stream holds a half-day full Council meeting for all its
members in accordance with the Iroquois pattern. If ratification of a
treaty was not achieved unanimously in squad retrospectives, the treaty is
shelved until concerns can be ironed out at this monthly meeting. The
Stream Manager may still require squads to temporarily adopt a treaty
until the monthly Council can sort it out.</p>
  </li>
  <li>
    <p>The Enterprise Council, consisting of Stream and Product Managers from all
Streams, along with all relevant senior executives, also meets once a
month to review Stream Flow diagrams and update the enterprise’s business
canvas and related financial plans. The Enterprise Council may also meet
asynchronously whenever one of its members calls for this.</p>
  </li>
</ul>

<h3 id="continuous-adaptation-1">Continuous Adaptation</h3>

<h3 id="funding-cycle">Funding Cycle</h3>

<p>[more to come]
## Stream Practices</p>

<h3 id="stream-structure">Stream Structure</h3>

<p>By a Stream we mean a Spotifystructured tribe that self-organizes using a
BFR and Feature backlog, a Stream Flow diagram, an Adaptation Kanban and a
Council made up of Chapter representatives. We call this a stream rather
than a tribe to emphasize its focus on optimizing a Lean value stream.</p>

<p><img src="http://Agile-TNG.github.io/images/spotify.png" width="400" /></p>

<p>Because the <a href="http://blog.kevingoldsmith.com/2014/03/14/thoughts-on-emulating-spotifys-matrix-organization-in-other-companies/">Spotify
model</a>
supports a
<a href="http://www.bp.ntu.edu.tw/wp-content/uploads/2011/12/06-Alexander-A-city-is-not-a-tree.pdf">semi-lattice</a>
rather than hierarchic enterprise structure, it is more open, more
flexible and more responsive to change than traditional corporate structures.
As Chris Alexander says, “As the relationships between functions change, so
the systems which need to overlap in order to receive these relationships
must also change”. </p>

<p>This is clearly reflected in the Spotify experience where
“We can spin up a new squad to take advantage of an opportunity or handle an
issue without worry about changing reporting structures. If a squad completes
its goals and has no reason to exist anymore, we can dissolve it without
punishing a manager”.</p>

<p>XSCALE augments the Spotify Model with a consensus decision-making pattern
derived from the historical Iroquois Confederacy. This pattern coordinates
decision-making across squads, streams and the enterprise as as whole is
described in the <strong>Continuous Adaptation</strong> section below.</p>

<h3 id="stream-flow-diagram">Stream Flow Diagram</h3>

<p><img src="http://Agile-TNG.github.io/images/flow.png" width="400" /></p>

<p>Every Stream is intended to generate a return. If the Stream serves a purely
internal function then its return may simply be defined as equal to its
funding.  XSCALE represents the return and the funding for a Stream in terms
of Feature Points on a Stream Flow diagram, a special kind of cumulative
flow diagram.</p>

<p>Note that where we refer to story points here we mean Monetized Story Points
derived by the formula given in the Feature Points section above. The layers
of the Stream Flow diagram represent, from bottom to top:</p>

<ul>
  <li>deployed features</li>
  <li>integrated but undeployed stories </li>
  <li>implemented but unintegrated stories</li>
  <li>estimated but unimplemented stories</li>
  <li>features with stories covered by BDD scenarios</li>
  <li>BPP best fit of features to funding </li>
  <li>squad/stream funding limit over time</li>
  <li>stream revenue over time</li>
</ul>

<p>Stream Flow represents all of these on one consistent diagram per squad.
Because of normalization to feature points these diagrams are trivially
rolled up per stream, and then to the enterprise as a whole. This diagam is
extremely enlightening because it is directly amenable to traditional Lean
analysis of cycle time, latency, WIP, etc. This provides visual and
actionable identification of wastes, bottlenecks, irregularities and
opportunities, as well as their relative magnitudes. </p>

<h2 id="squad-practices">Squad Practices</h2>

<h3 id="devops--cd--gitflow">DevOps + CD + GitFlow</h3>

<p><img src="http://Agile-TNG.github.io/images/cd.png" width="400" /></p>

<p>Squads are the most concrete embodiment of XSCALE principles:</p>

<ul>
  <li>Per the eXcellence principle, BDD per feature and per story is fully
implemented and all CI and SIT tests pass before any feature is deployed.</li>
  <li>Per the Scale-Symmetry principle, features (defined at this level as
groups of stories that when deployed together will deliver some concrete
business value) are each assigned to a distinct squad. </li>
  <li>Per the Continous principle, sprints are 1 week long. This means all the
sprint rituals have minimum practical batch size and cycle time.</li>
  <li>Per the Autonomous principle, squads use the GitFlow pattern so they don’t
need to wait for another squad in order to integrate, test and deploy.</li>
  <li>Per the Lean principle a feature is deployed by its squad immediately as
soon as it passes CI and SIT.</li>
  <li>Per the Ecosystem principle, Ops forms a chapter that provides consistent
virtualized test environments and production-like System Integration
Testing (SIT) environments, and assures the behaviour of these CI and SIT
environments are equivalent under test. This assures squads collectively
own their code base andconsistently adapt to one another as it evolves.</li>
</ul>

<h3 id="lean-ux--bdd--xp">Lean UX + BDD + XP</h3>

<p><img src="http://Agile-TNG.github.io/images/xp.png" width="400" /></p>

<ul>
  <li>
    <p>Streams use the Lean UX <a href="">Product Team</a> pattern where product owners from
multiple squads along with, designers, analysts, SMEs and architects work
together to break features down into groups of stories to supply the
delivery squads. To comform with the Spotify structure this Product Team
takes the form of a Chapter.  Whenever the Product Chapter is not meeting,
its members spend time collaborating with delivery squads.</p>
  </li>
  <li>
    <p>Stories are produced in <a href="">Gherkin</a> format factored to maintain <a href="">INVEST</a>
properties. Squads get together with members of the Product Team every
Wednesday afternoon to estimate its latest batches of stories.</p>
  </li>
  <li>
    <p>A story with INVEST defects is returned without an estiamte to the Product
Team for clarification. Otherwise the throughput of the Product Team is
graphed on the <a href="">Stream Flow diagram</a> according to the number of
estimated feature points per week.</p>
  </li>
  <li>
    <p>Squads hold reviews and retrospectives every Friday and task breakout
sessions every Monday, and every day starts with a standup meeting.</p>
  </li>
</ul>

<h2 id="related-frameworks">Related frameworks</h2>

<ul>
  <li>
    <p><a href="http://scaledagileframework.com">SAFe</a> targets existing enterprises with a
high-discipline, top-down, big-change-up-front, punctuated cadence Agile model that
combines Kanban, quarterly <a href="http://scaledagileframework.com/rte/">release trains</a>,
XP and Scrum. SAFe is a good starting point for conservative organizations as it’s
designed to enable agility while keeping component silos intact.  But that means it
<a href="http://xprogramming.com/articles/safe-good-but-not-good-enough/">shys away from feature teams, continuous delivery and
scale-symmetry</a>.</p>
  </li>
  <li>
    <p><a href="http://www.crosstalkonline.org/storage/issue-archives/2013/201305/201305-larman.pdf">LeSS</a>
and <a href="http://www.ebmgt.org/agility-guide">Agile Path</a> are scale-symmetric
alternatives based on traditional Scrum. They offer low-discipline
high-collaboration, continuous cadence models that employ <a href="http://www.scrumalliance.org/community/articles/2007/may/advice-on-conducting-the-scrum-of-scrums-meeting">Scrum of
Scrums</a>
to deal with integration and cross-cutting concerns. XP practices are optional but
feature teams are mandatory. Like SAFe, LeSS uses big-change-up-front but Agile Path
introduces a method of continuous transformation.  Specific practices for product
planning, test automation and so on are left for teams to determine ad hoc. </p>
  </li>
  <li>
    <p><a href="http://www.slideshare.net/vmysla/scrum-at-spotify">The Spotify model</a> dispenses
with Scrum of Scrums in favour of a pattern of <a href="">Tribes and Guilds</a>, strongly
emphasizing bottom-up autonomy.  It gives little prescription on team practices,
calling its smallest teams squads to avoid dictating even the Scrum rules. It
rightly expects a structure of top-flight autonomous teams will be able to decide
for itself how to evolve Agile practices. But it still commits to Continuous
Delivery and DevOps.</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem With Projects]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/13/product-funding/"/>
    <updated>2014-04-13T20:15:15+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/13/product-funding</id>
    <content type="html"><![CDATA[<p><img src="http://Agile-TNG.github.io/images/nails.png" width="400" /></p>

<p>When all you have is a hammer, every problem looks like a nail.  When all you
have is a project management methodology, everything looks like a project. </p>

<!-- more -->

<p>Most organisations have become very project focussed. Everything is a project.
New release of software – project. Some process change – project. That’s
great. Projects are good. They are certainly better than the ad-hoc approach
we had before projects. But projects do have some drawbacks.</p>

<p>To work out what the drawbacks are, we need to look at what a project is. A
project is defined (by the PMI who should know) as something that has a
defined scope, a defined start and a defined end date.  So projects are finite
in length. Anything without an end date isn’t a project, it’s business as
usual.</p>

<p>This defined end date is where the problem with projects lies. In reality,
most of the things we treat as projects aren’t really projects. They have no
real end date. Let’s take software delivery as an example. A company develops
a product, let’s call it “Wonder Widget”. They want to release a new version
(WW 2.0) so they start a WW2.0 project with an end date that matches the
desired release date. When the release date is reached, the project team is
disbanded. Then when they want to release WW2.1, they start up the WW2.1
project and so on. Sound familiar? The industry does this all the time. So
what’s the problem?</p>

<p>The problem is that these aren’t really separate pieces of work. Development
of Wonder Widget doesn’t stop when 2.0 is released; it continues. But in a
project-focussed world, the team that developed 2.0 is not necessarily the
same as the team that develops 2.1. Project teams have a finite life. Some of
the key members may be the same but many will be off on other projects (Super
Service 3.5) so the new team has to learn about Wonder Widget from scratch.</p>

<p>Even worse, the Wonder Widget 2.0 team may have left things in a bad state. We
all know how this happens - schedule pressure near the end of a project. The
team feels stressed. There are still new features to deliver. Other things
start to slip. Like testing and documentation and code quality. All the things
that will make life really hard for the 2.1 team.  The 2.0 team won’t be
judged on how clean they leave things for 2.1, or on how much technical debt
they accrue. They will be judged on how successful 2.0 is – how many features
it has, how well it sells. Everyone knows that 2.1 will have a hard time but
hey, that’s their problem. 2.0 will be a great success.</p>

<p>Sound familiar? </p>

<p>The problem with projects like this is that they aren’t really projects.</p>

<h2 id="therefore">Therefore</h2>

<p>Treat Product development as a continuous activity. </p>

<p><img src="http://Agile-TNG.github.io/images/zipper.png" /></p>

<p>One release of a product shouldn’t mess up the organisation’s ability to
deliver the next release. What we need is a Product focus rather than a
Project focus. The team shouldn’t be the 2.0 team, they should be the Wonder
Widget team. They should be responsible for all the releases of the product.
They should flow from one release to the next as a stable team.</p>

<p>Quite obviously this removes the learning stage from the beginning of each
release but more importantly “that’s their problem” suddenly becomes “that’s
our problem”. The team now has an incentive to keep quality high. This flows
on to other organisational benefits like more predictable releases (as teams
are’t blindsided by technical debt left behind by other teams rushing to
finish).</p>

<p>Similarly for change management projects. Running change management as a
project is a great way to ensure that the change fades away as soon as the
project is finished. Change management is ongoing, with no real end date.</p>

<p>Projects are fine for things that are actually projects. But let’s stop
treating everything like one.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iroquois Council]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/02/iroquois-council/"/>
    <updated>2014-04-02T15:04:37+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/02/iroquois-council</id>
    <content type="html"><![CDATA[<p>A scalable consensus game based on the American indigenous protocol of
councils and treaties. Iroquois Councils enable communities and enterprises to
make decisions together without deferring to hierarchies of accountable
individuals.</p>

<p><img src="http://Agile-TNG.github.io/images/parliament.png" /></p>

<!-- more -->

<p>The Spotify pattern of <a href="http://vimeo.com/85490944">Tribes and Guilds</a> is a
rediscovered social method.  The Iroquois Confederacy used it on a larger
scale than any modern corporation for <a href="http://www.haudenosauneeconfederacy.com/whatisconfederacy.html">almost a thousand
years</a>.  For
two centuries it peacefully inter-operated with European governance in North
America. </p>

<p>These two co-existed right up to the American revolution with the Iroquois
directly influencing the American founding fathers and their new form of
government.</p>

<p>Iroquois and American forms differ in that Iroquois society was based on
unanimity and reciprocity rather than democracy and property. Their nations
were made up of chains of autonomous tribes managed by a cycle of councils
and intermarriages rather than hierarchies of accountable individuals.</p>

<p>Collaborative agreements between the autonomous tribes were called treaties.
To take effect a treaty required ratification, not just by the people
attending a council, but unanimously by the groups they represented. As
opposed to European laws, continuous review of Iroquois treaties was required
to maintain their effect.</p>

<p><a href="">Iroquois Council</a> is a distillation of this protocol. It consists of an
<a href="">Open Space</a> for <a href="">BDD treaties</a>, a decision-making <a href="">Kanban</a> and
reciprocal ratification by participant teams. </p>

<h2 id="the-pattern-in-portland-form">The Pattern in Portland Form</h2>

<ul>
  <li>
    <p>Agile enterprises must continously adapt to market forces, technological
innovations and internal constraints. An enterprise needs an efficient way
to make decisions about how to respond to these changing forces.</p>
  </li>
  <li>
    <p>Accountable hierarchies are the traditional Taylorist method for making
corporate decisions. Unfortunately they aren’t continously adaptive and
frequently obstruct internal collaboration to maintain power relationships,
generating a whole <a href="http://www.c2.com/cgi/wiki?OpenSpace">Anti-Pattern
Language</a>.</p>
  </li>
  <li>
    <p><a href="http://www.c2.com/cgi/wiki?OpenSpace">Open Space</a> is good for aligning
understanding, but doesn’t achieve alignment on decisions.</p>
  </li>
  <li>
    <p><a href="http://c2.com/cgi/wiki?IterationRetrospective">Retrospectives</a> work well
for consensus decisions on the scale of a scrum, but don’t scale. Scrum of
Scrums doesn’t represent a whole interdependent team so SoS retros
experience political anti-patterns including polarization, compromise and
power games.</p>
  </li>
  <li>
    <p>Similarly to Spotify, Iroquois society was structured as a matrix of
councils, not a hierarchy of accountables. Tribes grouped into longhouses,
similar to Spotify’s squads, with ancestral and generational associations
connecting people in layers across the hierarchy. These cross-cutting clan
relationships work similarly to the Spotify chapters and guilds.</p>
  </li>
  <li>
    <p>The Iroquois “great peace” lasted at least since 1400 and represented such a
sustainable and idyllic model that Europeans in North America including the
American founding fathers <a href="http://www.ratical.org/many_worlds/6Nations/EoL/chp8.html">regarded it as an
ideal</a>. The great
peace was maintained entirely by the method of unanimous consent to
reciprocal treaties.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Use a game of unanimous consent to reciprocal treaties to enable teams within
enterprises and communities to make decisions together.</p>

<ol>
  <li>As in an Open Space, individuals propose item for discussion in turn. Voting
  dots are used to amalgamate and prioritize items, and the law of 2 feet
  enables everyone to contribute to all sessions.</li>
</ol>

<ul>
  <li>
    <p>Unlike an open space, individuals identify themselves as representatives of
teams attempting to arrive at decisions to deal with their common concerns.</p>
  </li>
  <li>
    <p>Each council session is split into 3 rounds. In each round:</p>

    <ol>
      <li>Instead of just a conference backlog, employ a 6 column kanban to forge
treaties. As with any kanban, limit the amount of Work In Progress in
order to maximize total throughput. The columns of this kanban are:
        <ul>
          <li><strong>Team learnings</strong> that could be leveraged by the broader community
(Smiley face)</li>
          <li><strong>Challenges</strong> a team can’t solve for itself (Red Flag)</li>
          <li><strong>Ideas</strong> for the improvement of more teams than just one (Question
mark)</li>
          <li><strong>Treaty</strong> proposals that have gained unanimous consent of a session
and are ready for council review (Exclamation mark)</li>
          <li><strong>Proposals that have passed review</strong> and are ready for respective
team ratification at retrospectives (Circle) – initially empty.</li>
          <li><strong>Proposals that have been unanimously ratified</strong> since previous
council sessions by all represented teams (Trefoil Knot).</li>
        </ul>
      </li>
    </ol>

    <ul>
      <li>Each session attempts to either create or refine a specific output - a
  treaty proposal:
        <ul>
          <li><strong>Smiley face</strong> sessions try to come up with a treaty about how the
  community can capitalize on a specific team learning.</li>
          <li><strong>Red flag</strong> sessions try to come up with a treaty about how the
  community can organize to solve a specific team’s problem.</li>
          <li><strong>Question mark</strong> sessions review a specific treaty proposal to try
  to find a way to refactor it and the passed treaties into a consistent
  whole.</li>
        </ul>
      </li>
      <li>
        <p>Unanimity in each session is required before a treaty proposal is
  defined as “ready for review” - moved into the Exclamation mark column.</p>
      </li>
      <li>
        <p>It’s perfectly okay for session participants to horsetrade on conditions
  and trade-offs that must be satisfied before a treaty can be passed. It’s
  also okay for a treaty proposal to suggest modification or cancellation of
  some previously enacted treaty.</p>
      </li>
      <li>
        <p>At the end of each round there’s a discussion-free review. All that
  round’s “ready for review” treaty proposals are read out and moved to the
  Exclamation Mark column.</p>
      </li>
      <li>
        <p>Now any participant can move an Exclamation mark proposal back into the
  Question mark column, but by doing so that participant undertakes to run a
  new session in the next round to try to sort out whatever is worrying them
  about it.</p>
      </li>
      <li>Proposals that are not moved back into the Question mark column by any
  participant are regarded as passed and moved into the Circle column.</li>
    </ul>
  </li>
  <li>
    <p>At the end of the council session, the circled treaties affect no one. A
circled treaty must be unanimously ratified by every team – it’s presented
at each respective team retro to be considered for testing and ratification
over the period between council sessions.</p>
  </li>
  <li>
    <p>Only treaties that are unanimously ratified by all members of all teams at
their retros are enacted by the council in its next session. These are
moved to the Trefoil Knot column at the start of the session.</p>
  </li>
  <li>
    <p>There is nothing to prevent a smaller subset of teams meeting separately to
ratify on a treaty that only affects themselves.  Likewise teams that don’t
represent themselves at a council aren’t bound by treaties agreed there.
They may join a treaty in a subsequent council or they may agree to work
together by other means.</p>
  </li>
  <li>
    <p>Teams that decide to block a passed treaty - to prevent it going Unanimous
do so by turning up at the next council sessoin and moving it back to the
Question column. The council reviews the blocked treaty in due course as
it would any treaty proposal.</p>
  </li>
</ul>

<h2 id="unanimity-or-bust">Unanimity or Bust</h2>

<p>Many modern processes have tried to use unanimity and have wound up
running headlong into the <a href="https://www.sciencemag.org/content/162/3859/1243.full">tragedy of the
commons</a>. For
example the UN climate committees are hopelessly <a href="http://theconversation.com/votes-not-vetoes-a-new-way-to-cut-a-united-nations-climate-deal-24288?utm_medium=email&amp;utm_campaign=Latest+from+The+Conversation+for+9+April+2014&amp;utm_content=Latest+from+The+Conversation+for+9+April+2014+CID_4bbd0a6f6eeb3c8a3d8719978ad1547f&amp;utm_source=campaign_monitor&amp;utm_term=Votes%20not%20vetoes%20a%20new%20way%20to%20cut%20a%20United%20Nations%20climate%20deal">blocked and
compromised</a>. How did the Iroquois deal with something like that?</p>

<p>Looking through their “Great Law of Peace” they used a system of checks and
balances based on the desire people may have to keep power. It worked as
follows.</p>

<p>Each tribe represented itself via a sachem. The sachems were males chosen by
the agreement of the females of the tribe, with offices that could be revoked
if their females saw them as unfit or disrespectful of protocol. </p>

<p>There was also a special tribe of fire keepers (Onondaga) whose responsibility
ordinarily was simply to make certain protocol was followed properly. You may
think of them in a Spotify context as equivalent to the coaching guild, or
otherwise as an executive round table.</p>

<p>For any question raised to the great council - say an upstream tribe fouling
the waters of the downstream tribes - the sachems had power to decide the 
matter so long as they agreed unanimously. </p>

<p>If they didn’t, then and only then the decision fell to the fire keepers.  If
the sachems wanted to be in charge, they were motivated to find their way to
unanimous agreement. If they couldn’t, their opinion no longer mattered and
the matter fell to the fire keepers.</p>

<p>Then the fire keepers had to agree unanimously among themselves before
their decisions could be regarded as binding. If they couldn’t agree, no
decision was made. They were motivated to find unanimity because otherwise
the sachems could begin squabbling again. And that sort of thing could
disrupt the Great Peace.</p>

<p>You might think that a particularly feisty Sachem might bribe a particularly
corrupt pack of fire keepers and thereby seize absolute power. If one tried,
however, he risked expulsion along with his tribe for treason and thereby
the cessation of mutual trade and support. This doesn’t seem to have ever
happened in the history of the six nations.</p>

<p>Clever fellow that Decanawidah. Shame the UN doesn’t work it this way.</p>

<p><strong>Therefore,</strong></p>

<p>[Assume a Spotify model of tribes and guilds]</p>

<p>Teams use councils to create mutually beneficial treaties. If these teams
cannot come to agreement on a treaty, any team may call for a decision from a
council of a whole Tribe or a whole Guild.</p>

<p>If that higher council cannot reach unanimity, then the matter is forwarded to
a great council of the whole enterprise. If and only if that council cannot
reach unanimity, the amtter is decided by the the company’s chief executives.</p>

<h2 id="agile-treaties">Agile Treaties</h2>

<p>As to the form of a treaty, there’s a wonderful collection of real historical
Iroquois treaties collected by Benjamin Franklin
<a href="https://archive.org/details/indiantreatiespr00vand">here</a> derived from the
Iroquois <a href="http://www.manataka.org/page135.html">“Great Law of Peace”</a>.</p>

<p>Despite idealization by the likes of Rousseau and Franklin, Iroquois laws had
glaring inconsistencies from the standpoint of a Rawlsian <a href="http://c2.com/cgi/wiki?TheoryOfJustice">Theory Of
Justice</a>. Privileging the five
Iroquois nations over other tribes caused inequities that eventually ended the
rule of the confederacy. There were also rules of “Peace” that don’t conform
with modern notions, such as, </p>

<blockquote>
  <p><em>If refusal steadfastly follows, the War Chief shall let the bunch of white
lake shells drop from his outstretched hand to the ground, and shall bound
quickly forward and club the offending chief to death”.</em></p>
</blockquote>

<p>Nevertheless, Iroquois treaties seem to fit into <a href="">story normal form</a> adorned
with <a href="">Behavior Driven Development</a> scenarios. To bring them in line with
Rawls we’d add these constraints:</p>

<ul>
  <li>
    <p>To observe the <a href="http://c2.com/cgi/wiki?VeilOfIgnorance">VeilOfIgnorance</a>, no
treaty is permitted to refer to a specific individual or group of people by
name. Instead the treaty must refer to people and groups in terms of their
roles in relationships.</p>
  </li>
  <li>
    <p>In order to preserve reciprocity, a treaty may not obligate individuals or
groups that have not unanimously agreed to take part in it. This is the
essence of the most famous of the Iroquois treaties, the <a href="http://www.wampumchronicles.com/tworowwampumbelt.html">2 row
wampum</a> that was the
basis of Gene Roddenberry’s famous fictional concept of non-interference.</p>
  </li>
  <li>
    <p>A treaty among a group of peers may not prevent the formation of a treaty
among some subset of them. Or if the peers are groups, some subset of their
members. This is what the Iroquois “Great Law” means when it says that each
of the members must still tend their own fire - that they keep their
respective autonomy. The only autonomy they ever surrender is by unanimous 
consent to a treaty.</p>
  </li>
</ul>

<h2 id="brightening-the-chain">“Brightening The Chain”</h2>

<p>The Iroquois used 3 metrics to describe the health of their tribes and
nations, which they called <strong>the Fire, the Path and the Chain</strong>. These devices
were encoded into the wampum belts that signified treaty proposals, council
occasions and agreements. The three metrics seem to apply equally well to
the state of health of Agile teams in a modern enterprises so we’ll dig in
here in some depth.</p>

<p><img src="http://Agile-TNG.github.io/images/iroquois.png" /></p>

<p><strong>The Fire</strong> indicates the quality of internal self-organisation of a tribe or
guild.  Iroquois chiefs were charged with keeping the fire lit and the
fireplace clean in much the same way as Scrum Masters are charged with
keeping team meetings prompt and Lean black belts value the cleanliness and
order of a manufacturing workplace. When a tribe suffered attrition due to
warfare, marriage or aging, its fire was said to burn low, and this was a
matter for resolution at a “Condolence Council”, which was basically an
agreement among longhouses or tribes to re-balance their membership, territory
and/or resource profile.</p>

<p><strong>The Path</strong> indicated the channels whereby the tribal unit interacted with
its peers. Forest diplomacy entailed a regular cycle of meetings involving
treaties, condolence, trading, inter-marriage and reciprocal gift-giving known
as “potlatch”.  This last being very similar to modern conferences, lean
coffees, open spaces and meetups. A commonplace subject of treaties occurred
when a tribe’s <em>path</em> was obstructed by physical or political barriers,
including but not limited to the movement of tribal borders through warfare.</p>

<p><strong>The Chain</strong> indicated the external integrity of relations between a tribal
unit and its peers. Unlike modern legal systems, Iroquois treaties were held
to naturally decay over time, requiring continuous re-appraisal, refactoring
and re-affirmation to maintain their effect. Treaty relations that had decayed
were said to have rusted, where those still in force were iron, and those
recently re-affirmed were silver. Under conditions of disruptive market
change, technological innovation and internal refactoring, it is a given that
enterprises should revisit their internal assumptions and agreements in a
similar way, and this is the intent of the Iroquois Council pattern. </p>

<p>The chain began with a single family. Faced with an unforgiving environment,
Iroquois families could not be maintained in the isolated, nuclear form with
which we’re most familiar in the West. Instead they took the form of line
marriages where a series of exogamous marriages among adults drawn from
different lineages occupied a single dwelling called a longhouse, an
arrangement Robert Heinlein explores in his “The Moon is a Harsh Mistress”.</p>

<p>While the Spotify model draws on this tradition, the Iroquois were more formal
about chain structuring than Spotify, with each tribe forming a link with two
peers modeled after the row of families in the Longhouse.</p>

<p>Brightening the Chain therefore began at the level of a single tribal unit,
then a council involving two further tribal units. Thus chains brightened
by councils occurring at all levels, with each level maintaining pure autonomy
from the one above it, as limited only by treaties.</p>

<h2 id="the-councils-of-github">The Councils of Github?</h2>

<p>An obvious question is how this kind of system can be enacted in a modern
online social network, specifically github. It is fair to think of a github
pull-request as a treaty proposal, but there is no equivalent of a
council system on github today. Instead collaborators either work
together in a single repository, effectively functioning as a single tribe, or
assemble a feudal hierarchy of forks, sometimes hubbing on one base, or in
larger projects constituting an informal management hierarchy. </p>

<p>Work is going on within the Agile:TNG group to create a protocol, eventually
to be automated, whereby a system of branches can represent the different
states in the council kanban, with a central repository pulling from
forks as governed by the council protocol described above. </p>

<p>A key challenge to be surmounted in effecting this is the protocol to
apply to the distinction between a fork and a collaborator where the latter
signifies a trusted and invited party but the former may represent an
untrusted, uninvited or even inimical one. </p>

<p>In general github, as a do-ocracy, provides straightforward social methods for
participants to cross from the status of fork to collaborator, but it remains
to arrange a council protocol that uses this as a channel.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Goose In The Bottle]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/27/the-goose-in-the-bottle/"/>
    <updated>2014-03-27T11:31:11+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/27/the-goose-in-the-bottle</id>
    <content type="html"><![CDATA[<p>Take a newly hatched baby goose. Poke it down the neck of an empty saki bottle
and feed it till it’s grown. Without killing the goose or breaking the bottle,
how do you get the goose out of the bottle?</p>

<p><img src="http://Agile-TNG.github.io/images/gib.png" /></p>

<!-- more -->

<p>Let’s start with the problem and the solution in context and leave the riddle
till after.</p>

<h2 id="pattern-in-portland-form">Pattern in Portland Form</h2>

<ul>
  <li>
    <p>A team can only change as quickly as its most conservative member. A program
of component teams or an organization of silos can only change as rapidly as
its most conservative part.</p>
  </li>
  <li>
    <p>Every team has its progressives. If they’re empowered, they foster
change. If they’re disempowered, they’re still eager to take part in change.</p>
  </li>
  <li>
    <p>Middle managers account for costs and apologise for slippage. They’re used
to that. Telling them to account for ROI and taking away their apologetic
method causes the infamous <a href="">Frozen Middle</a> anti-pattern.</p>
  </li>
  <li>
    <p>Taking a team, program or organization part-way Agile offers questionable
benefit and creates risks of failure and reversion to tradition. Taking part
of it part-way reduces the benefit and amplifies the risks.</p>
  </li>
</ul>

<h2 class="no_toc" id="therefore">Therefore,</h2>

<ul id="markdown-toc">
  <li><a href="#pattern-in-portland-form">Pattern in Portland Form</a></li>
  <li><a href="#zen-riddles">Zen Riddles</a></li>
  <li><a href="#the-coach-in-the-bottle">The Coach in the Bottle</a></li>
  <li><a href="#grow-a-better-gosling">Grow a Better Gosling</a></li>
  <li><a href="#the-ugly-duckling">The Ugly Duckling</a></li>
  <li><a href="#will-it-zen">Will it Zen?</a></li>
  <li><a href="#but-">But …</a></li>
</ul>

<p>Don’t attempt to make an enterprise become Agile. Nor a program, nor a
project, nor a team. </p>

<p>Instead, create a new cross-functional end-to-end feature based Agile
capability uncompromised by existing ways of working.</p>

<p>Staff it with progressives And grow it with the support of a coordination
scrum of lead doers from the old organisation with the blessing of senior
management.</p>

<p>Let it leverage the quickest dirtiest deployment pathway but make it
accountable for its own quality.</p>

<p>Add product owners focused on maximising ROI per release rather than
minimising variance to baseline.</p>

<p>Put in place bottom-line metrics to demonstrate that the throughput, quality
and ROI of the new capability exceeds the performance of the old.</p>

<p>Never ask anyone to join the new capability, but let the best people do so,
backfilling the old organisation if necessary, letting it diminish otherwise.</p>

<h2 id="zen-riddles">Zen Riddles</h2>

<p>The Goose in the Bottle is what the Japanese Zen tradition calls a <em>koan</em>, a
kind of riddle for personal transformation. It’s not supposed to have a
rational answer. </p>

<p>Solving it is supposed to take sweat. You may have to travel. Consult wise
people. Spend days in silent meditation. Raise children and learn from them.
Grok out.</p>

<p>You’re a busy person, however, and this is about Agile, not Zen, so I’ll just
give you the answer so we can move on.</p>

<h2 id="the-coach-in-the-bottle">The Coach in the Bottle</h2>

<p>I first read the goose koan as a young man. I puzzled over it for weeks but
then set it aside.  Who has time for a riddle with no answer? I thought it
could have no practical importance and I had no shortage of more interesting
questions to worry about.</p>

<p>Until, as a coach, I became a goose. </p>

<p>I accepted a role transforming a business unit of the largest Australian
insurer. A year earlier I had successfully transformed an insurance BI group
of about seventy. Now I had three hundred staff stuck in silos and component
layers, with myself the sole coach charged with getting them out. </p>

<p>This insurer had attempted ad-hoc Agile twice. Its first project went cowboy,
shipping 5 months late with 1200 defects and zero documentation. The second
project used Agile to fail fast, demonstrating its business case didn’t stand
up. For which learning it was blamed and shamed, and its excellent
Scrum-master got handed her hat.</p>

<p>I naturally expect to walk into this kind of thing. A coach is only engaged
when management strikes a problem it can’t solve without a coach. You expect to
walk into trouble, or else you won’t be there in the first place. </p>

<p>Per the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">seven samurai</a> I
set about assessing and aligning senior business and delivery management and
also technical leads per silo.  That’s when I hit the wall. People were happy
to engage with me, but I was getting the same conversation over and over. Six
times in a week according to my diary.  </p>

<p>“I completely agree with you,” they said. “Agile is great. If we could do
it properly, life would be much better. But you’ll never get <em>them</em> to do it.”</p>

<p>They’d point out another team. I would talk to that team and <em>they</em> would say
the same about further teams, who would point back at teams I’d already spoken
to. </p>

<p>It wasn’t blamestorming - it was respect for their conservative co-workers.
Each team has conservatives and progressives, and no team can change faster
than its most conservative member. The progressives had learned that through
bitter experience.</p>

<p>That was the bottle, and I was the goose. </p>

<h2 id="grow-a-better-gosling">Grow a Better Gosling</h2>

<p>Some mornings I woke in a cold sweat. I realised we were all geese in some
way. The managers who hired me, the progressives who wanted change, but
the conservatives too. They all made up each others’ bottle.</p>

<p>In my previous role, on a smaller scale and with sufficient executive support,
I had been able to break a bottle. But this one was too strong. I wasn’t going
to kill the goose by quitting either. So now I really needed an answer … how
did those old Zen guys get their damned goose out of their damned bottle?</p>

<p>There’s a lovely and controversial Zen book called <a href="http://www.amazon.com/The-Sound-One-Hand-Answers/dp/0465080782">The Sound of the One
Hand</a>, which
poses answers to 281 Zen Koans. It offers the following for this one:</p>

<p><strong>“It’s out!”</strong></p>

<p>I found that answer a little unhelpful. In fact I have yet to derive any
assistance from that book in regard to any koan. Which is to say it’s a
really great zen book and I highly recommend it.</p>

<p>In a flash, enlightenment occurred, that experience Zen students spend
their time desperately attempting to attain. Or if it wasn’t enlightenment, it
would do until enlightenment came along.</p>

<p><em>Take a baby goose, a newly hatched gosling. Feed it outside the bottle until
it’s full grown. Feel your heart swell as you watch it flying away.</em></p>

<p>This is to say, don’t attempt to make an enterprise become Agile. Nor a
program, nor a project, nor a team. Instead, create a new cross-functional
end-to-end feature based Agile capability for the enterprise uncompromised by
any existing ways of working. And then grow it.</p>

<p>Feed it a budget, requirements, and team members drawn from the progressive
people you’ve assessed in interviews. Form a coordination scrum of stream
leaders from the old organisation, empowered by senior management not to
change how the old organisation works, but just to support the new capability.</p>

<p>Let the new capability leverage the quickest dirtiest deployment pathway that
exists for hotfixing. Make them accountable for their own quality and go whole
hog on virtual environments and test-first automation. Use a DVCS to manage
integration between old and new rationally. Add  product owners focused on
maximising ROI in the backlog rather than minimising variance to baseline.</p>

<p>Coach this tiny new capability to produce just the minimum amount of
documentation necessary to satisfy their own operational members. Don’t call
it a goose, but something completely innocuous, “the small changes team” or
similar.</p>

<p>Put in place bottom-line metrics to demonstrate that the throughput, quality
and ROI of the new team far exceeds the performance of teams in the jugged
goose.  Promote and leverage their wins to gain them more requirements from
the business.</p>

<p>Never ask anyone to join the new capability, but let the best people do so,
backfilling the old organisation if necessary, letting it diminish otherwise.</p>

<p>That’s how I coached. Over the course of a year that first gosling grew
organically, splitting and splitting again. Business people saw concrete
benefit and flocked together. The coordination forum used this as a model to
create similar goslings. They grew fat and laid golden eggs …</p>

<h2 id="the-ugly-duckling">The Ugly Duckling</h2>

<p>Two years later the insurer’s senior management turned up at Australia’s
largest Agile conference to trumpet their wins. Still I wondered - is this a
reproducible pattern? I soon had a chance to find out. </p>

<p>There’s a very large bank, the twentieth largest corporation in the world.
Long before that insurance gig I’d been engaged as a coach to take a couple of
its projects Agile. I didn’t use the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">seven
samurai</a> then, just got
stuck in and went for it.</p>

<p>While we made progress we were stopped by unaligned senior management when
they found out what we were up to.  My coaching sponsors were none too pleased
that I hadn’t addressed alignment before moving onto adoption. The
experience turned ugly and I never expected to be invited back. </p>

<p>Well, never say never. Six years later I was re-engaged by the same senior
manager who’d handed me my hat. We had both learned some important things in
the interim, and he had an ad-hoc Agile project in the online division that
was struggling. </p>

<p>This project was for a ground-breaking product, but it was perceived to have
under-delivered its first release with severe quality problems. I found all
manner of waste, stress, compromise and misalignment. But there was one great
advantage. This product was regarded as special. That little team was already
out of the bottle.</p>

<p>Over the next 18 months I aligned the rest of the business unit to support the
new capability and mentored the team directly to consistently exceed their
metrics release on release. The product won a dozen external awards and the
team received the Group CIO award for best project in the bank. </p>

<p>It wasn’t all me of course - the team members were all-stars. And it was never
a perfect project. There were hard yards to make. Nevertheless, realignment of
delivery pipeline, team structure and environment management that resulted
became a model to be leveraged. First within the online program, then within
its business unit, and then throughout the bank.</p>

<p>Sorry, but I can’t resist talking about the waterfowl method here …
comparing Agile in the bank with Aesop’s <a href="http://hca.gilead.org.il/ugly_duc.html">ugly
duckling</a> who grew up …  and then
everyone saw it as a beautiful swan …</p>

<h2 id="will-it-zen">Will it Zen?</h2>

<p>In a <a href="http://alistair.cockburn.us/The+Goose+in+the+Bottle">conversation with Alistair
Cockburn</a> I explained my
experience with this Goose In the Bottle pattern. He worried that I had “[broken]
the question’s presupposition by cheating and getting a new goose, hence not answering
the question, but still ending up a free goose.”</p>

<p>I wanted to point Alistair at the <a href="http://www.markability.net">laws of form</a>
but I didn’t get time. Of course it requires only a moment’s thought to
realize there can never be a real goose in a real bottle. If you did it
to a real gosling, it would perish long before it grew old enough to poke
its head out. Our goose was always a metaphor. </p>

<p>On the zen of it, the moment you hear this koan some part of you becomes the
goose, and the koan your bottle. Like all koans, to get out you have to change
who you are. </p>

<p>The bottle doesn’t break - the old organisation never changes. The goose doesn’t have
to be killed - neither in the bottle nor out of it. But as you feed the goose outside
more requirements and more budget and more people, soon there is no goose left in the
bottle. Nor a bottle for it to be in. In other words, <strong>it’s out!</strong></p>

<h2 id="but-">But …</h2>

<p>What if your organisation can’t create a truly cross-functional, end-to-end team? What
if you can’t get executive support to resolve  dependencies on other non-agile areas
of the business? Or what if resolving those dependencies takes longer than your
stakeholders can wait for you to demonstrate a win?</p>

<p>As an example, in many financial organisations, everything may depend on legacy
systems which never ran in an agile or CD way. These may be controlled by stakeholders
who won’t consider allowing anything agile near them.  To duplicate those would mean
building an entire new bank.</p>

<p>In these cases, other adoption patterns may need to be needed instead of or as well as
the Goose in a bottle. These include:</p>

<ul>
  <li><a href="">Inversion of Ownership</a></li>
  <li><a href="">Lean before Agile</a></li>
  <li>… more to come?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Seven Samurai]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/21/the-seven-samurai/"/>
    <updated>2014-03-21T21:53:27+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/21/the-seven-samurai</id>
    <content type="html"><![CDATA[<p><em>Enterprise Agile</em> is a phrase that’s bandied about a lot.  What is it, why would you
want it, and how do you get it? The Seven Samurai neatly answers those questions.</p>

<p><img src="http://Agile-TNG.github.io/images/Agreement.jpg" /></p>

<!-- more -->

<p>In an ever-accelerating marketplace it has become common sense that businesses must
continously adapt to avoid being outcompeted by others. On a small scale the process
of adaptation can be dealt with by regular Scrum retrospectives and the Demming cycle.
A significant program or business unit, however, cannot adapt piece-meal or it risks
all the Lean sins of stress, irregularity and waste.</p>

<ul id="markdown-toc">
  <li><a href="#the-patterns">The Patterns</a>    <ul>
      <li><a href="#continuous-assessment">Continuous Assessment</a></li>
      <li><a href="#continuous-alignment">Continuous Alignment</a></li>
      <li><a href="#continuous-analysis">Continuous Analysis</a></li>
      <li><a href="#continuous-awareness">Continuous Awareness</a></li>
      <li><a href="#continuous-architecture">Continuous Architecture</a></li>
      <li><a href="#continuous-adoption">Continuous Adoption</a></li>
      <li><a href="#continuous-acceleration">Continuous Acceleration</a></li>
      <li><a href="#continuous-adaptation">Continuous Adaptation</a></li>
    </ul>
  </li>
</ul>

<p>We define enterprise agility as continuous adaptation. Adaptation of internal
structure and process as delivery capabilities evolve.  Adaptation of external value
streams to customer experiences, market forces and technological innovations.
Adaptation of these two to each other to maximise product-market fit and ROI. </p>

<p>This obviously applies during process transformation but for enterprise agility
continous adaptation must continue even after new process elements are bedded down.
The Seven Samurai pattern language provides a proven framework for doing just that.</p>

<h2 class="no_toc" id="spoilers">Spoilers</h2>

<p>You don’t need to see the Kurosawa film to understand the pattern language, but its
patterns necessarily involve spoilers so you may want to see the film first.  The
<a href="https://www.youtube.com/watch?v=zNqQXC8Tv8U">restored version</a> is available through
the usual streaming sites so we’ll leave the question of spoilage to you, gentle
reader. </p>

<h2 class="no_toc" id="the-film">The Film</h2>

<p>The Seven Samurai concerns a defenceless village that hires a group of down-at-heel
samurai as protection against a horde of ruthless bandits. The samurai efficiently
transform the village into a self-organising force to destroy the bandits and take
ownership of its own destiny. </p>

<p>Our Western image of samurai as armored warriors is very different to their depiction
here. Kurosawa’s samurai are really seven coaches, each embodying a distinct strategic
pattern, each reinforcing the others so that the whole becomes greater than the sum of
its parts.</p>

<p>Why eight patterns when there are only seven samurai? The last pattern represents the
end of the film where the village takes ownership of its own transformation and
external coaching becomes irrelevant. Per the final line of the film, it’s the village
that wins, not the samurai.</p>

<hr />

<h2 id="the-patterns">The Patterns</h2>

<h3 id="continuous-assessment">Continuous Assessment</h3>

<p>Motivate Agile in terms of continuous evaluation of bottom line metrics.</p>

<p><img src="http://Agile-TNG.github.io/images/Assessment.png" width="400" /></p>

<ul>
  <li>
    <p>Many organisations embark on Agile ad-hoc, at grass roots level, without clearly
understanding real drivers, benefits and challenges.</p>
  </li>
  <li>
    <p>Enterprise architecture and business constraints can prevent Agile transformation
from succeeding. Many enterprises are not ready to commit to addressing these
constraints.</p>
  </li>
  <li>
    <p>Teams, programs and business units may begin a transformation without realising
their organisation isn’t ready, and this in itself may lead them to fail.</p>
  </li>
  <li>
    <p>Prominent failures may forestall further transformation, creating the perception
that Agile “might work elsewhere but can’t work here”.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Interview stakeholders to construct preliminary value stream maps of delivery and
business activities. Validate these by attending the represented activities and
instrument cumulative flow metrics for them.</p>

<p>Represent these metrics as diagrams to motivate urgent concern about waste, stress,
irregularity and misalignment. Determine critical numbers that would represent
achievable Agile improvements to throughput, quality and ROI.</p>

<p>Construct a preliminary plan detailing targets for these critical numbers with a draft
timeframe and budget necessary to generate the Minimum Viable Agile Capability
(“MVAC”) that would meet those targets on a small scale.  Assess maturity of existing
mission-critical teams using the <a href="http://comparativeagility.com">Cohn’s Comparative Agility
metrics</a>, and compare with the MVAC.</p>

<hr />

<h3 id="continuous-alignment">Continuous Alignment</h3>

<p>Enrol decision makers as Product Owners in an iterative “Strategic Scrum” that meets
at least weekly.</p>

<p><img src="http://Agile-TNG.github.io/images/Alignment.png" width="400" /></p>

<ul>
  <li>
    <p>Component silos, matrix management, waterfall baselines and phase gates, project
based cost accounting and middle management hierarchies can make it difficult for an
organisation to host and maintain Agile feature teams. </p>
  </li>
  <li>
    <p>There are further alignment issues inherent in a transformation program.
Progressive/conservative antagonism, disagreements over change scope and ownership,
confusion over metrics and trade-offs, as well as the simple
<a href="http://www.cavcomp.demon.co.uk/halloween/fuddef.html">FUD</a> of a reaction to change
… </p>
  </li>
  <li>
    <p>Enterprise misalignments are commonly associated with the anti-patterns we call
<a href="">enterprise smells</a>.</p>
  </li>
  <li>
    <p>Ad hoc Agile teams can’t address such alignment issues because they don’t have
adequate executive support to change the process of other teams or the way they
interoperate.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Induce progressive senior executives to meet regularly in a collaborative “Strategic
Scrum” whose mission is product ownership for the transformation.  </p>

<p>Ideally, execs are motivated to participate by pre-existing C-level support.  Such
support is seldom reliable at the start of a transformation, however, and it may be an
urgent priority of the Strategic Scrum to leverage the output of the Assessment
pattern to demonstrate sufficient drivers to establish funding and ownership of a
transformation initiative.</p>

<p>The Strategic Scrum provides a way for the executives to immediately experience agile
for themselves and <a href="http://www.c2.com/cgi/wiki?EatYourOwnDogfood">“eat their own
dogfood”</a>. Over the course of the
transformation it will provide a one stop shop into which coaches and organisational
change agents report progress, and change its membership and form as required to fit
the evolving agile enterprise.</p>

<p>An important first step for the Strategic Scrum is selecting one or more 
alignment patterns to form the initial stage of the transformation:</p>

<ul>
  <li><a href="http://agiletng.org/2014/03/27/the-goose-in-the-bottle/">Goose in the
Bottle</a></li>
  <li><a href="">Inversion of Ownership</a></li>
  <li><a href="http://www.slideshare.net/vmysla/scrum-at-spotify">Tribes and Guilds</a></li>
  <li><a href="http://scaledagileframework.com/investment-themes/">Stream Funding</a></li>
  <li><a href="">Lean before Agile</a></li>
  <li>… </li>
</ul>

<p>See also <a href="http://agiletng.org/2014/04/21/xscale/#feature-points">Behavioural Product
Planning</a>, <a href="">Feature Based
Teams</a> <a href="http://www.kotterinternational.com/our-principles/changesteps/step-2">Guiding
Coalition</a>,
<a href="">Influence the Influencers</a></p>

<hr />

<h3 id="continuous-analysis">Continuous Analysis</h3>

<p>Form a Coordination Scrum from coaches and delivery and operational stream
leads that meets at least weekly.</p>

<p><img src="http://Agile-TNG.github.io/images/Analysis.png" width="400" /></p>

<ul>
  <li>
    <p>Once an enterprise has assessed its as-is state and aligned executives
to support its transformation, there is an immediate desire for a detailed
“to-be” vision and a plan to get there. This is often called an OCM
(“Organisation Change Management”) plan. </p>
  </li>
  <li>
    <p>Under time pressure, the people accountable for OCM may feel safest picking a
one-size-fits-all framework and idealistic “to-be state” vision. This is
a waterfall approach to transformation - what XP used to call “Big Design 
Up Front” or “BDUF”. We call it “Big Change Up Front” or BCUF.</p>
  </li>
  <li>
    <p>Sounds nasty but why is it actually bad? BCUF focus on vision and
framework maximises WIP and results in dysfunctional transition states where
delivery and business metrics consistently worsen. This obviously raises
risks and can cause executive support for transformation to tail off.</p>
  </li>
  <li>
    <p>OCM plans may also be applied in a non-collaborative “they change, we
don’t” mindset. If change agents are not also change recipients they are
insensitive to the wisdom of the doers causing widespread <a href="">FUD</a> and politics.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>To make an enterprise Agile, we emphasise that change planning must be Agile.  What’s
needed isn’t a precise vision but an iterative collaboration cycle for a “Coordination
Scrum” that begins with just the  existing stream leads. That’s to say lead doers, not
middle-management deciders, along with experienced coaches to provide insight on
tactical concerns over the course of the transformation.</p>

<p>The primary accountability of the Coordination Scrum is enabling the new agile
delivery stream to efficiently integrate with existing component streams. This work is
represented on an <a href="">Agile Transformation Roadmap</a> from which coaches derive a
<a href="">Coaching Kanban</a> to prioritise and track their coaching activities per team.
Cumulative flow of this kanban is iteratively reviewed by the transformation product
owners of the Strategic Scrum.</p>

<hr />

<h3 id="continuous-awareness">Continuous Awareness</h3>

<p>Organise change recipients into a system of <a href="http://www.slideshare.net/vmysla/scrum-at-spotify">Guilds and
Tribes</a>. Represent each tribe at
the weekly Coordination Scrum.</p>

<p><img src="http://Agile-TNG.github.io/images/Awareness.png" width="400" /></p>

<ul>
  <li>
    <p>Change plans usually begin with training for the doers on new ways of
working.  This includes role-specific skills and education on the tools
necessary to new roles.</p>
  </li>
  <li>
    <p>Awareness as a process isn’t merely a matter of training, but ongoing
agreement about ways of working, For the transformation to become
sustainable, doers must own and direct the change stories themselves.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Organise people of common capabilities into “Guilds” and people collaborating on
common business and delivery streams into “Tribes” or “Streams”. Let coaches work with
these teams to plan and effect change using a weekly cycle of Scrum
<a href="http://fabiopereira.me/blog/2008/11/23/goal-driven-retrospective/">retrospectives</a>
and, at scale, <a href="http://agiletng.org/2014/04/02/iroquois-council/">stream councils</a>. </p>

<p>These consensus protocols spread awareness of drivers and methods for new ways of
working, and feed decisions, agreements and concerns back into the Coordination Scrum. </p>

<p>Coaches use role-playing games to raise Guild and Tribe awareness of Agile methods and
their respective parts in the transformation.  The Coordination Scrum also works with
the Strategic Scrum to obtain support to empower tribes and guilds to make their own
decisions to enable rapid change.</p>

<p>Once they’re up to speed, add Guild and Tribe representatives to the Coordination
Scrum. At scale, the Coordination Scrum may evolve into an <a href="http://agiletng.org/2014/04/21/xscale/#continuous-adaptation">Enterprise
Council</a></p>

<hr />

<h3 id="continuous-architecture">Continuous Architecture</h3>

<p>Guilds meet weekly to institute technical enablers for feature based delivery.</p>

<p><img src="http://Agile-TNG.github.io/images/Architecture.png" width="400" /></p>

<ul>
  <li>
    <p>Technical enablers and structural transformations must be adopted by 
change recipients to enable new ways of working. </p>
  </li>
  <li>
    <p>Change patterns promoted by the Coordination Scrum have to be grounded and
tailored into stories that fit the immediate necessities of the as-is
enterprise. </p>
  </li>
  <li>
    <p>Change stories that requires anyone to put down their tools and stand idle
will be immediately opposed by the guild system and business stakeholders. </p>
  </li>
  <li>
    <p>Collaborative coaching is necessary to assure change recipients are ready
and motivated to work in the new way</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Prioritize technical enablers in the Coaching Kanban including but not limited
to:</p>

<ul>
  <li>work-management and knowledge-management tools </li>
  <li>test data fixtures and service mock objects</li>
  <li>BDD tooling and integration of same into dev workflow</li>
  <li>virtual environments sufficient for Continuous Delivery</li>
  <li>version control systems suitable for distributed integration.</li>
</ul>

<p>At an enterprise level, Guilds stage the structural alignment patterns
determined by the Strategic Scrum, assure existing component teams are primed
to support if not adopt the new ways of working, and that scarce technical
resources or SMEs are adequately available for new delivery capabilities to
come on line.</p>

<p>At first guilds adopt, specialise, adjust and refactor architectural patterns
iteratively as they gain experience with the benefits and challenges.  As the Agile
capability grows, however, guilds naturally split into chapters per tribe, each of
which is empowered to make these autonomous decisions for its tribe. As this occurs
each chapter will be represented at its own stream council, and Guild meetings
may become less frequent.</p>

<hr />

<h3 id="continuous-adoption">Continuous Adoption</h3>

<p>Coaches track transformation stories in a coaching kanban and report weekly to
coordination and strategic scrums.</p>

<p><img src="http://Agile-TNG.github.io/images/Adoption.png" width="400" /></p>

<ul>
  <li>
    <p>Coaching shepherds product planning and delivery teams through the same
Samurai patterns as it does for the enterprise, just on a smaller scale.</p>
  </li>
  <li>
    <p>A well formed transformation plan involves a backlog of <a href="">Transformation
Stories</a> motivated by drivers identified by <a href="">Operational Product Owners</a>
from the Strategic Scrum.  These stories should have the <a href="">INVEST</a>
properties and be expected to demonstrate value by improving
<a href="#Assessment">Assessment</a> metrics. </p>
  </li>
  <li>
    <p>ROI for Agile transformation is maximized when transformation stories are
detailed and delivered iteratively, minimizing <a href="">Work In Progress</a>.</p>
  </li>
  <li>
    <p>Value delivery begins as the <a href="">Product Planning Scrum</a> builds a
breadth-first product roadmap and an initial product backlog along with a
<a href="">Steel Thread</a> sufficient to commence <a href="">Continuous Delivery</a> of stories.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Adoption provides coaching essential to getting functional scrums up to speed.
The goal of coaches is always to demonstrate and de-hub, transfrerring
accountability to the actual doers as soon as they’re comfortable.</p>

<p>Coaches co-chair meetings, clarify role-specifics, identify misunderstandings
and impediments, configure workflows and knowledge structures, and assure the
team’s technical toolset is ready for continuous delivery. They also marshall
metrics and team-member testaments into case studies to support Acceleration.</p>

<hr />

<h3 id="continuous-acceleration">Continuous Acceleration</h3>

<p>Use consensus protocols to iteratively re-energise the tranformation.</p>

<p><img src="http://Agile-TNG.github.io/images/Acceleration.png" width="400" /></p>

<ul>
  <li>
    <p>As agile metrics make productivity and quality gains and challenges
transparent, management focus shifts from “how to account for slippage” to
“how to improve ROI”. </p>
  </li>
  <li>
    <p>Broken collaboration cycles, structural problems, and <a href="">muda-mura-muri</a>
often occur without the enterprise properly understanding or addressing them. </p>
  </li>
  <li>
    <p>Decision makers may say that the transformation has “hit a
plateau” or experiences pitfalls. They may feel <a href="">FUD</a> about the way ahead.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Re-energize the transformation by promoting consensus mechanisms to capitalize
on wins, address root causes of problems, and refocus on improving the
critical numbers.</p>

<p>Coaches inspect and assure collaboration fundamentals, work with the
Coordination Scrum to address structural issues, and facilitate <a href="">open
spaces</a>, <a href="">Iroquois Councils</a>, <a href="">lean coffees</a> and <a href="">scrum retros</a> within
guilds and tribes.</p>

<hr />

<h3 id="continuous-adaptation">Continuous Adaptation</h3>

<p>Refactor the Transformation Roadmap to leverage new capabilities.</p>

<p><img src="http://Agile-TNG.github.io/images/Adaptation.png" width="400" /></p>

<ul>
  <li>
    <p>Agility doesn’t merely improve productivity and quality metrics. </p>
  </li>
  <li>
    <p>New delivery capabilities and new methods of reflection and collaboration
enable qualitative improvements in the way an enterprise organises, grows,
positions, sells and delivers into its marketplace. </p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Capitalise on these improvements by focusing the Strategic Scrum on
differences between the original <a href="">Agile Transformation Roadmap</a> and the
emergent reality. Gauge these differences with Continuous Assessment metrics
and refactor the transformation roadmap accordingly. Seek out new ways to
integrate internal services, leverage new technologies, form new product lines
and access new market segments. The more often the strategic scrum can review
these things, the faster its enterprise can adapt.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile: First Contact]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/11/why-what-how/"/>
    <updated>2014-03-11T22:59:46+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/11/why-what-how</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.compelcon.se/gallery/XP2000/XP2000_A_037?full=1">first Alliance
meeting</a> preceded
the famous Snowbird session by almost a year. Sardinia was where <em>Extreme</em>
became <em>Agile</em>. We don’t agree on who said it first. It just happened.
Nothing was sacred and no one’s ring needed kissing. We were conspirators and
this was a revolution.  </p>

<p><img src="http://Agile-TNG.github.io/images/Agile-Alliance-XP2K.png" /></p>

<!-- more -->

<h2 id="why-tng">Why TNG?</h2>

<p>If there were no Agile today we would just invent it all over again, but we
probably wouldn’t do it the same way. The Agile Manifesto hasn’t changed since
2001. We’ve learned a few things since then. </p>

<p>Everyone’s seen the <a href="http://agilemanifesto.org/background.jpg">Agle Last
Supper</a> picture. With its beautiful
lighting the guys look a lot more credible than half-naked at that first
standup in the Med. Like some kind of saints. But the Mediterranean picture
has more truth. Fallible fellows trying to figure out something bigger than all
of them.</p>

<p>Iconography is important but of course we have lots of agilists these days with
more Agile experience than the Alliance had then. In the 20th century
we’d all have cruised over to Ward’s Wiki - when it was the only wiki - to
share what we’re learning in the
<a href="http://www.c2.com/cgi/wiki?WikiNow">WikiNow</a>, that gestalt mind almost but
not entirely unlike Wikipedia. And the Manifesto would have kept evolving.</p>

<p>What happened to the original open community that gave us Agile?  Believe it
or not there was actually a guy who spent the first decade of the 21st century
<a href="http://www.c2.com/cgi/wiki?GrammarVandal">correcting grammar</a> on C2.
Correcting it <em>wrong</em>. He wasn’t alone; there were lots of trolls. Strenuous
efforts were made to salvage C2, but in vain, because when the trolls moved in
the community moved on. </p>

<p>Also some of the original Alliance members became less interested in evolving
the state of the Agile art and more interested in <a href="https://www.youtube.com/watch?v=nsdZKCh6RsU">selling
badges</a>. There seemed no harm in
that at first, but with new players getting in on the action and the
certification businesses booming, it’s the opposite of the open spirit of the
Alliance. </p>

<h2 id="what-tng">What TNG?</h2>

<p>Agile is about productive teams and their practice patterns, using peer
protocols to self-organise and metric feedback to guide their evolution. Not
badges. The original Manifesto values are as relevant as ever, but that
doesn’t mean they shouldn’t be refactored and adapted over time the same way
the original open community did. <strong>A:TNG</strong> is for that.</p>

<p>To advance the state of the Agile art we are uncovering, refactoring and
evolving Agile patterns together in a <a href="http://meatballwiki.org/wiki/NonZeroSumGame">Positive Sum
Game</a>. Everyone can play. It
doesn’t matter whether or not you’ve written a book, earned a certificate or
attended some ancient standup. It only matters that you’ve got relevant
experience and ideas to contribute.</p>

<h2 id="how-tng">How TNG?</h2>

<p>Consensus generation was the most valuable thing about Ward’s Wiki.
Individuals and interactions in open collaboration generated lots of mutually
agreeable content. We might want this old time open Agile back and never mind
trolls and sheriffs - but how?</p>

<p>A wiki is basically an open version control system wedded to a content editor.
Most are centralized, which means you can only have one current version of
a wiki page at any one time. That’s where trolls and sherrifs come from.</p>

<p>On github we have a decentralized VCS as our basis for consensus
decisions. TNG will use this new technology as its way of self-organising. If
any trolls turn up we simply don’t need to pull from them. And no more trolls
means no sheriffs. </p>

<p>We could get an <a href="http://www.c2.com/cgi/wiki?AgileParliament">Agile Parliament</a>
going. Treaty proposals as pull requests … that would take some doing. Needs
trial and error, but that’s what we’re here for. To advance the state of our
Agile art.</p>

<p>We’ve got lots of basics to cover to give TNG such a form: pick a license, put
up an initial community charter, kick the Parliament pattern around, figure
out how to collaborate on the framing content here, figure out a decenralized
authoring workflow and send out enough invitations to get our kernel community
moving. </p>

<p>It’s like, when we were kids, we had sea monkeys. The instructions said to add
the sachet to the water and next morning it’d be full of little people.
That’s our system metaphor for this. Except maybe I’m the brine shrimp and
you’re the kid wondering when we’ll start to look like the picture on the
packet.</p>

<p>Let’s get stuck in. Fork the repo. Help figure the
protocol out. That ol’ <a href="http://www.c2.com/cgi/wiki?WikiNature">WikiNature</a>
will kick in real soon …</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A:TNG Values]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/10/4-new-values/"/>
    <updated>2014-03-10T09:43:28+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/10/4-new-values</id>
    <content type="html"><![CDATA[<p>By working Agile and helping others do so we have come to value:</p>

<ul>
  <li><strong>Autonomous teams over corporate committees</strong>  </li>
  <li><strong>Stream funding over project budgets</strong></li>
  <li><strong>Consensus games over accountable hierarchies</strong>  </li>
  <li><strong>Adapting practice patterns over prescribing rules</strong>  </li>
</ul>

<p>That is, while there is value in the items on the right, we value the items on
the left more. And while we honor the original Manifesto values, we honor these
TNG values equally.
<!-- more --></p>

<h2 id="what-do-those-items-on-the-left-mean">What do those items on the left mean?</h2>

<p>The items on the right are familiar to us all. The items on the left have
a pleasant ring, but let’s make some concrete examples to make them clear.</p>

<ul>
  <li>
    <p><strong>Autonomous teams</strong> are cross-component cross-functional end-to-end
feature teams that self-organize to optimize quality, throughput, ROI and
the fit of their value stream to its market. Per XP they consciously “turn
all the dials to ten” to capitalize on opportunities and innovations.</p>
  </li>
  <li>
    <p><strong>Stream funding</strong> means funding to continuously deliver the maximum ROI
features to improve a value stream, rather than chunking objectives,
timeframes and budgets arbitrarily into projects. It includes patterns 
from <a href="">Beyond Budeting</a>, <a href="">Beta Codex</a>, and <a href="">Open Book Management</a>.</p>
  </li>
  <li>
    <p><strong>Consensus games</strong> include <a href="">lean coffees</a>, <a href="">open spaces</a>,
<a href="">retrospectives</a>,
<a href="http://agiletng.org/2014/04/02/iroquois-council/">councils</a> and other
ways for people to align understandings and make decisions together. Lean
coffees and open spaces do the former; retros and councils do the latter. </p>
  </li>
  <li>
    <p><strong>Practice patterns</strong> describe proven solutions to commonplace problems in
a collaborative context. Similar to design patterns for software, they were
pioneered in the initial description of XP and revived by Jim Coplien and
Ken Schwaber in their <a href="">ScrumPLOP</a> conference.</p>
  </li>
</ul>

<h2 id="where-do-these-values-come-from">Where do these values come from?</h2>

<p>Agile started with XP on the <a href="http://www.c2.com/cgi/wiki/ExtremeProgrammingRoadmap">C2
Wiki</a>, a high powered
but open community of professionals sharing patterns and innovations for the
common good. The Agile Alliance distilled this work into a Manifesto and added
a signup page, but C2’s open community is the real reason for the global
supremacy of Agile today.</p>

<p>Nevertheless that all happened last century and the Manifesto is showing
its age.  It’s still right on when it comes to teams, but lacks values and
principles for large scale Agile adoption. This gap has led to
<a href="http://agile.dzone.com/articles/method-wars-scrum-vs-safe">contention</a> as
consultancies and certificate-mills compete to pry open corporate checkbooks
for their respective brands. </p>

<p>Which is crazy. There’s value in both Scrum and SAFe, and no reason to think
you can’t combine elements of both along with other frameworks. The value of
frameworks isn’t in their brands and certificates, nor in adopting them as
prescriptions, but in adapting the practice patterns they contain. </p>

<p>Schwaber is correct in worrying about the danger of making “half a cow and
half a fish” when what we really want is dolphins. The question is, on what
basis do you go about the process of adaptation? How do you do it organically,
iteratively, and without tripping up at scale? To do that you need a clear set
of values and principles. And that’s where A:TNG comes in.</p>

<p>A:TNG is based on the idea that SAFe, Less, DAD, APF, ETF, OBM, Beyond
Budgeting, Lean and on and on all provide useful adaptation patterns.  And
that there’s a lot more to enterprise agility than all of them put together.
We’ve augmented the Manifesto values not as a way to make yet another brand,
but as a basis for the work of pulling these pattern languages out of all the
brands and into the open where we can really sort out what works with what.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAPL: An Open Agile Pattern Language]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/09/oapl-the-open-agile-pattern-language/"/>
    <updated>2014-03-09T18:02:45+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/09/oapl-the-open-agile-pattern-language</id>
    <content type="html"><![CDATA[<p><img src="http://Agile-TNG.github.io/images/oapl300.png" /></p>

<p>A key activity within A:TNG is organizing an open pattern language to relate
learnings from Agile frameworks to the experiences of our practitioners.
What advantage can this pattern language offer over the original
frameworks? What benefit in a culture where practitioners already have Agile
certificates? Why is this a big deal for TNG?  </p>

<!-- more -->

<h2 id="pattern-language">Pattern Language</h2>

<p>The history of Agile is intertwined with the Design Patterns movement. The
first XP book was framed as a pattern language and while Scrum started as a
framework it is now <a href="http://www.scrumplop.org">reformulating as a pattern
language</a>.</p>

<p>Design patterns started with the great 20th century architect Chris Alexander.
Alexander described them this way: <em>Each pattern describes a problem which
occurs over and over again in our environment, and then describes the core of
a trusted solution to that problem</em>. Alexander’s insight was that patterns
work together to generate an architecture as a <a href="http://www.jacana.plus.com/pattern/P0.htm">language of
design</a>. </p>

<p>Software engineers soon took Alexander’s idea to a new level with the “Pattern
Languages of Programs” (<a href="http://hillside.net/conferences">PLoP</a>) conference
series, the best-selling “Gang of Four” book <a href="http://www.blackwasp.co.uk/GofPatterns.aspx">Design
Patterns</a>, and Ward Cunningham’s
<a href="http://c2.com/cgi-bin/wiki?PeopleProjectsAndPatterns">Portland Pattern
Repository</a> which also
became the first wiki, “Ward’s Wiki”.</p>

<p>The success of wiki as a collaborative editing method may have distracted
people from the Pattern Language ideas at its core, but there are still PLoP
conferences every year and popular patterns are known and used by every
professional software engineer.</p>

<p>The key advantage of pattern languages is the empowerment of their users to
make decisions that would otherwise require trial and error or deep expertise.
Furthermore,</p>

<ul>
  <li>patterns can be adapted and refactored to suit specific domains without
adopting the pattern language as a whole</li>
  <li>patterns enable a process of adaptive design whereby each can by trialled,
added and substracted iteratively as forces in the domain are experienced</li>
  <li>the efficacy of alternative patterns can be determined by comparative
studies in related domains, and thereby informed choices can be made.</li>
</ul>

<h2 id="anti-patterns">Anti-Patterns</h2>

<p>The complement to the Design Pattern is the Anti-Pattern, which describes a
solution that fails to solve the problem it was intended to solve, or which
generates more problems.  You may think of anti-patterns as categories of bad
ideas, but another class of them has to do with short term thinking at the
expense of long term goals. This is rather more commonplace than the
conscious bad choices. </p>

<p>In particular in Martin Fowler’s book, “Refactoring”, he and Kent Beck
identify a short list of design problems they call “code smells”. The code
smells are not bugs - the code still works - but a form of design pollution
that makes bugs more likely to occur, and fixing bugs more difficult. </p>

<p>Code smells are often caused by taking shortcuts to get things to work.  As
such they’re part of the Agile process. So Beck and Fowler emphasize that it’s
not the smells themselves that constitute Anti-Patterns, but a lack of
systematic remediation of them through the critical Agile process of
<a href="http://c2.com/cgi-bin/wiki?RefactorMercilessly">refactoring</a>. </p>

<p>It is unfortunately commmonplace, even in teams that have most of the other
Agile fundamentals nailed down, to find that refactoring is neglected during
times of stress. Of course the less refactoring, the more frequent those
times. The same vicious cycle may occur at the scale of whole organizations,
and so we regard <em>Not Refactoring</em> an “Enterprise Smell”.</p>

<h2 id="enterprise-smells--enterprise-refactorings">Enterprise Smells &amp; Enterprise Refactorings</h2>

<p>At the level of an Enterprise we don’t commonly speak of bugs, but after Lean
we talk of wastes, stressors, irregularities and misalignments. The Lean
movement has produced a classification of the first three of these, and Lean
coaches conduct various practices aimed at reducing them. It is reasonable to
think of Lean as a process of refactoring at an enterprise level.</p>

<p>Lean has not introduced a vocabulary equivalent to that of our Agile
programmers, however, and A:TNG regards this an an opportunity to provide
benefit by filling a gap. As it is reasonable to draw analogies between the
design of an enterprise and the design of a computer program, we can lift each
of the Beck/Fowler code smells into the context of the enterprise without
thinking very hard:</p>

<ul>
  <li>duplicated code corresponds with teams with duplicate RACI </li>
  <li>long methods correspond with deferred feedback</li>
  <li>large classes correspond with large teams or component based teams</li>
  <li>too many parameters corresponds with part-time resourcing</li>
  <li>and so on …</li>
</ul>

<p>It may be that this is putting the cart before the horse. It would be better
to systematically catalogue enterprise smells and refactorings, and then see
what they have in common with those at a code level. This may form a key
activity of the A:TNG community, and a substantial part of the OAPL may be
devoted to the result. We aim to kick off this cataloguing activity as part of
our inaugural meeting on March 13 in Sydney.</p>

<h2 id="pattern-languages-over-prescriptive-frameworks">Pattern Languages over Prescriptive Frameworks</h2>

<p>The reason this value is so prominent in A:TNG isn’t to do with Enterprise
patterns and anti-patterns so much as the tendency for enterprises on the
Agile journey to take the advice of experienced agilists for more than it’s
worth. </p>

<p>It is reasonable to believe that someone with long experience will have a
valuable practice pattern language to share. It is not reasonable for a guru
to suggest that the patterns in their language are the best, the only, or the
ultimate solution to the problems they address. Outside of the corporate
sphere we regard someone making such claims not as a trustworthy counsellor,
but as a dangerous cult leader. Counsellors explain the key factors in making
decisions; they don’t describe the one true path.</p>

<p>It is also reasonable for newcomers to Agile to adopt all the patterns from a
specific framework as their first objective.  As Alistair Cockburn pointed out
in his treatment of <a href="http://alistair.cockburn.us/Shu+Ha+Ri">Shu-Ha-Ri</a>, an
Agile beginner at the Shu level is best advised to follow a single framework
slavishly because that’s the only way to experience the behaviour of its
interlocking elements. This is why we say these frameworks have value. </p>

<p>While a framework forms a good starting point for practice, over time the
student develops sufficient understanding of the way the framework applies in
their environment to pass into the realm of “Ha”. Here reflection and
experimentation with variations and augmentation of the starting framework
becomes the key way to improve, and pattern languages yield their greatest
benefits as signposts along he way.</p>

<p>As the practitioner emerges into the realm of Ri they gain their own insights,
make their own discoveries and solve problems beyond the current state of the
art. And so they’re faced with two alternatives. Create a framework of their
own to brand and market the benefit of their learnings, or add their patterns
into an existing pattern language so that other practitioners can test them
against their own experience and refactor them collaboratively. This is the
purpose of the OAPL.</p>

<h2 id="we-are-uncovering-better-ways-"><em>We Are Uncovering Better Ways …</em></h2>

<p>The latter course may not be so remunerative as the former - but it is more
Agile because it is more collaborative, more transparent, more scientific, and
more courageous. For this reason the original Agile Manifesto begins with the
words, “We are uncovering better ways …”. So does TNG, not out of a sense of
tradition, but because this work of uncovering better ways is our ongoing
mission.</p>

<p>We are uncovering better ways to deliver products and services by improving
our teams, enterprises and communities. And we represent and refactor these
better ways together as patterns in our OAPL. Thereby we make the trade-offs
clear so we can work with newcomers and help them find better ways for
themselves, without expecting them merely to follow in our footsteps.</p>

]]></content>
  </entry>
  
</feed>
