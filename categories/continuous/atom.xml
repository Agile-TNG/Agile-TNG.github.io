<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/continuous/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-27T21:54:44+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a pattern language for a
continuously delivering, continuously self-organizing, continuously adaptive
Agile enterprise that turns all the knobs to ten.</p>

<!-- more -->


<p><strong>[This post is currently in draft. I hope to finish it this weekend but
thought some folk would enjoy looking at the pretty picture.]</strong></p>

<h2>Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
<li><p>SAFe targets conservative businesses with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban,
quarterly <a href="">release trains</a>, and Scrum. SAFe is designed to
permit an organization to keep its component silos intact. So it includes
some XP practices but ignores test-first TDD, continuous delivery,
collective ownership, merciless refactoring and feature teams.</p></li>
<li><p>LeSS is more progressive in some ways, offering a high-collaboration,
continuous cadence model that relies on <a href="">Scrum of Scrums</a> to deal with
integration and cross-cutting concerns. It is still big-change-up-front,
however, requiring an organization to refactor its component silos into
feature teams before commencing sprints, It leaves specifics of product
planning, test automation and so on for teams to determine ad hoc.</p></li>
<li><p>The Spotify model dispenses with Scrum in favour of a pattern of <a href="">Tribes and
Guilds</a>, strongly emphasizing bottom-up collaboration and team autonomy.
It gives no further guidance on method as it expects a structure of
top-flight autonomous teams is capable of deciding for themselves how to
choose, tailor and coordinate the rollout of further Agile practices.</p></li>
</ul>


<p>XSCALE relies on the premise that full XP actually makes scaling easier to do,
not harder, by assuring that technical debts are continuously paid. And that a
large enterprise can easily adopt XP practices by starting with a small
uncompromised XP team using the <a href="">Goose in the Bottle</a> and growing it with
the <a href="">Seven Samurai</a> patterns.</p>

<p>So XSCALE never needs to effect big-change-up-front of portfolios, programs or
component teams, but it still yields a thorough structural refactoring of
enterprise value streams.</p>

<p>As a result, XSCALE creates more Agility than SAFe as its methods of planning,
delivery and transformation are fully continuous and collaborative.  It offers
a more coherent organization than LeSS by combining Spotify <a href="">Tribes and
Guilds</a> with consensus decisioning via <a href="">Iroquois Councils</a>. And it&rsquo;s more
accessible than Spotify alone because it provides an iterative, standardized,
bump-free way to transform enterprise value streams over time.</p>

<p>XSCALE further differs from the other enterprise agile frameworks by embedding
XP in an ecosystem of interlocking Agile practice patterns from Lean Startup,
BDD, Lean UX, Kanban, DevOps, CD and A:TNG&rsquo;s OAPL to leapfrog the enterprise
to the ultimate Agile state of the art. Not because that waves a banner but
simply because with iterative transformation this strategy achieves the
greatest benefit with the lowest risk.</p>

<h2>XSCALE Principles</h2>

<p>XSCALE conforms with the <a href="">A:TNG values</a>, which form a strict superset of
those in the Agile Manifesto. As a practice pattern language XSCALE also rests
on principles that likewise form a strict superset of those in the Manifesto.</p>

<h3>XP-based or &ldquo;eXcellent&rdquo;</h3>

<p>The word &ldquo;eXtreme&rdquo; in XP was so ill-chosen it became the focus of the effort
to define the word &ldquo;Agile&rdquo; with a manifesto. Yet even now most Agile software
development teams use at least some XP, and the best ones use all of it. So
there&rsquo;s proven value in it. Ignoring the word, what&rsquo;s the value?</p>

<p>XP mainly differs from Scrum in its engineering practices &ndash; pair working, TDD,
collective ownership, continuous integration and merciless refactoring &ndash; which
interlock to continuously pay off technical debt and thereby prevent cycles of
rework. At scale such debts multiply to reduce throughput, transparency and
sustainability. So we could define &ldquo;eXtreme&rdquo; as</p>

<p><strong>Pay technical debt before it incurs interest.</strong></p>

<p>Anyway XSCALE takes XP as its base because XP enormously simplifies the
challenge of making combinations of Agile teams work together. The Scrum
practices of sprint reviews and sprint retrospectives are also indispensable
in defining and actioning pay down of analysis and process debt.</p>

<p>So if someone you trust asks you what you mean by X, tell them &ldquo;XP-based&rdquo;. If
it&rsquo;s some historical management dudes, tell &lsquo;em it means &ldquo;eXcellent&rdquo; and play
air guitar at them. And &hellip; party on, dude.</p>

<h3>Scalable</h3>

<p><strong>Maintain scalability by minimising potential combinations.</strong></p>

<p>Scale is about combinations of requirements, of dependencies, of defects, and
of people. The number of combinations of a set grows very rapidly; a set of
just 10 things has over 3.6 million distinct combinations.</p>

<p>The all-hands release planning meetings and &ldquo;town halls&rdquo; in SAFe  and LeSS
fail to limit conversation to small combinations of people and concerns. The
Spotify / Iroquois patterns actively reduce the scope of conversations, so
they support this principle.</p>

<p>Other challenges come from combinations of alternatives. Because Agile works
as a hill-climbing algorithm, continously integrating little bits of
functionality into an existing whole, it&rsquo;s happy to climb a molehill of value
when there&rsquo;s an Everest right next door. Business Model Canvas and
Breadth-First Product Roadmaps the combined work of multiple teams  still adds
up to a stream of whole features that maximize relative ROI, respect stream
funding limits, focus one piece delivery flow, and comply with MVP and CoD
constraints.</p>

<h3>Continuous</h3>

<p><strong>Link practices in cycles with the smallest possible batch size.</strong></p>

<p>SAFe employs a slow quarterly <a href="">release train</a> integration pattern. That&rsquo;s
useful for conservative organizations because it means they don&rsquo;t have to
alter their existing team structures. But several penalties come with it:</p>

<ul>
<li>Increased cost of quality due to phased regression and acceptance testing in
&ldquo;hardening sprints&rdquo;.</li>
<li>Lost ROI from keeping finished features on ice for a quarter rather than
releasing them as quickly as possible.</li>
<li>Surprises and integration overhead due to the large batch sizes involved in
quarterly releasing.</li>
</ul>


<p>XSCALE avoids these penalties by enabling independent feature teams to deploy
multiple times per using the GitFlow pattern, environment mapping, CD and
BDD.</p>

<h3>Autonomous</h3>

<p><strong>Use consensus to make decisions and to delimit accountabilities.</strong></p>

<p>SAFe has been <a href="">criticized</a> for its assumption of hierarchical, top-down
decision-making, but LeSS tacitly assumes the same thing. Many of the benefits
of Agile derive from peer collaboration and team consensus games like planning
poker and retrospectives, and it doesn&rsquo;t seem reasonable to call a process
Agile at any scale if it doesn&rsquo;t empower consensus.</p>

<p>People have long dreamt of an anarchic utopia where the only law is the
<a href="">Golden Rule</a>. As the scale of a group increases past the <a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar
Number</a>, however, the <a href="">Tragedy
of the Commons</a> inevitably leads to conflicts of interest that must be
controlled through more restrictive forms of society.</p>

<p>Rationally, individual accountability should be applied when the business cost
of delaying a decision is greater than the social cost of failing to maintain
consensus. This trade-off seems to have been best managed, historically, by
the Iroquois Confederacy of North America.</p>

<p>The Iroquois used unanimous consent at a sub-Dunbar scale to govern a
hierarchy of treaty-making councils. Where consensus protocol was violated or
timing called for an immediate decision, per-tribe &ldquo;war chiefs&rdquo; were made
accountable. This proved stable at a multi-national scale over a period of
centuries. XSCALE combines it with the Spotify Tribal model to scale consensus
decisions while maintaining proper team and stream autonomy.</p>

<h3>Lean</h3>

<p><strong>Maximize ROI.</strong></p>

<p><a href="http://en.wikipedia.org/wiki/Lean">Lean</a> is an even more over-used buzzword
than Agile. <a href="">Lean Startup</a>, <a href="">Lean UX</a> and <a href="">LSD</a> use the two terms almost
as synonyms. Process control frameworks like Lean Six Sigma and Lean
Accounting instead interpret Lean to prefer cost reduction over ROI and
hierarchical standardization over adaptive collaboration. This makes them
less suitable for the purpose of XSCALE.</p>

<p>To avoid using Lean as buzzword it&rsquo;s important to be specific about the
practice patterns involved. In concrete terms XSCALE involves:</p>

<ul>
<li>a <a href="">Lean Transformation Canvas</a> as a roadmap for the <a href="">Seven Samurai</a>
patterns.</li>
<li>a Lean Startup <a href="">business model canvas</a> to focus and pivot the enterprise&rsquo;s
value streams</li>
<li>Per stream <a href="">Value Stream Maps</a> converted to <a href="">Lean Kanban</a> and
<a href="">cumulative flow diagrams</a> to represent the relationship between stream
funding, stream return, and product roadmaps.</li>
<li><a href="">Product Teams</a> working cross-functionally per Lean UX to coordinate
<a href="">set-based-design</a> with lo-fi prototyping, BDD and Roadmap Refactoring.</li>
</ul>


<p>These practice patterns interlock to render a stream funding cycle without
need for project budgets and baselines, and continuously responsive to metrics
and learnings relative both to the stream and its market.</p>

<h2>Ecosystem</h2>

<p>The term &ldquo;Software Development Life Cycle&rdquo; is well accepted even though no one
puts too fine a point on the word &ldquo;life&rdquo;. Ecosystem takes this a bit further,
meaning a closed set of processes that combine to achieve a self-sustaining
behaviour &ndash; which we intend as the maximization of ROI.</p>

<h3>Team process</h3>

<h4>Lean UX + BDD + XP</h4>

<h4>DevOps + CD + GitFlow</h4>

<h3>Stream process</h3>

<h4>Spotify Model + Iroquois Councils</h4>

<h4>Value Stream Kanban</h4>

<h4>Stream Funding cycle</h4>

<h3>Enterprise process</h3>

<h4>Lean Business Modelling</h4>

<h4>Behavioural Product Planning</h4>

<h4>Roadmap Refactoring</h4>

<h3>Consensus games</h3>

<h4>Business Bingo</h4>

<h4>Chapters</h4>

<h4>Stream Council</h4>

<h4>Enterprise Council</h4>

<h3>Continuous Adaptation</h3>
]]></content>
  </entry>
  
</feed>
