<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lean | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/lean/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-23T18:11:47+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE:<br>XP-based <br> Scalable <br> Continuous <br> Autonomous <br> Lean Ecosystem]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>XSCALE is a pattern language for a continously delivering, continously
self-organizing, continuously adaptive Agile enterprise that turns all the
knobs to ten.</p>

<!-- more -->


<h2>Why XSCALE?</h2>

<p>Agile has become a tangle of competing processes. If it were a software
project we&rsquo;d call it a <a href="">big ball of mud</a> long overdue for refactoring. Each
of the trademark processes has value to offer, but we need a way to integrate
them, refactor them, and get ready to plug in new Agile innovations as they
come to light.</p>

<p>XSCALE is a way to do that. It&rsquo;s a combination of state of the art, well
proven Agile practice patterns refactored to work together at scale.  It&rsquo;s
composed from Lean Startup, BDD, Lean UX, Spotify, Lean Kanban, Iroquois
Councils, XP, DevOps and CD.</p>

<p>That might seem like a lot of bits and bobs but the result is actually really
simple to do. Even better you don&rsquo;t have to take your whole organisation or
your whole value stream to XSCALE. You can start small using the <a href="">Goose in the
Bottle</a> pattern, then grow the capability exponentially as it proves its
worth.  So the risk and outlay up front are minimal, and you work out
the bugs at team scale where you can afford to fail fast and pivot.</p>

<h2>XP-based</h2>

<p>We left out an important word in the XSCALE summary. Scrum. What gives?</p>

<p>Despite all the certicates, books and general foofooraw, Scrum has never been
anything more than a watered-down version of XP. It&rsquo;s more permissive than XP
because that makes it easier for teams to do and enables it to be used in more
contexts than just software development. Which is why it&rsquo;s more popular than
XP.</p>

<p>The problem is that Scrum permits inefficient practices that reduce the ROI,
throughput and quality of a team, and these effects multiply at scale.
Without XP&rsquo;s pair working, test automation, collective code ownership,
continuous integration and merciless refactoring &ndash; all the &ldquo;hard bits&rdquo; of XP
that Scrum leaves out &ndash; mounting technical debt is inevitable.</p>

<p>Scrum&rsquo;s long iterations — up to four weeks — permit misalignment within and
between scrums and thereby rework. Along with the quality problems this leads
to long release cycles, which along with the wasted time spent on hardening
and fixing at the expensive end of the <a href="">CoQ curves</a>, reduce ROI and
increase risk.</p>

<p>Worst of all, where XP requires teams to deliver end-to-end features, Scrum
<a href="http://www.scrumalliance.org/community/articles/2012/september/working-with-component-teams-how-to-navigate-the-c">permits teams to continue to work in component
silos</a>,
There&rsquo;s certainly benefit to component teams in using Scrum vs some Waterfall
process, but component teams are a deep pitfall when it comes to Agile scaling
because they prevent continuous delivery.</p>

<p>So the point is it&rsquo;s not XP over Scrum. If you&rsquo;re doing XP you are already
doing all the Scrum practices plus the XP things that make Scrum work really
well. But if we can assume that our teams are doing XP, that enormously
simplifies the job of making combinations of them scale.</p>

<h2>Scalable</h2>

<p>Why is scaling Agile a challenge at all?</p>

<h2>Continuous</h2>

<h2>Autonomous</h2>

<h2>Lean</h2>

<h2>Ecosystem</h2>

<h3>Lean Business Modelling</h3>

<h3>Business Bingo</h3>

<h3>Behavioural Product Planning</h3>

<h3>Roadmap Refactoring</h3>

<h3>Spotify Model + Iroquois Councils</h3>

<h3>Value Stream Kanban</h3>

<h3>Lean UX + BDD + XP</h3>

<h3>DevOps + CD + GitFlow</h3>

<h3>Chapters</h3>

<h3>Stream Council</h3>

<h3>Enterprise Council</h3>

<h3>Continuous Adaptation</h3>

<h2>The Red Pill</h2>
]]></content>
  </entry>
  
</feed>
