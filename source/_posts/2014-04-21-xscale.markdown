---
layout: post
title: "XSCALE: Beyond SAFe and LeSS"
date: 2014-04-21 20:46:55 +1000
author: Peter Merel
comments: true
categories: 
- eXcellent
- Scale-Symmetric
- Continuous
- Autonomous
- Lean
- Ecosystem
---

{% img /images/xscale.png %}

Reflecting our work over recent years, XSCALE is a continuously delivering,
continuously self-organizing, continuously adaptive Agile ecosystem that turns
all the knobs to ten.

<!-- more -->

**\[This post is currently in draft. I hope to finish it today but welcome
feedback both from my TNG compadres and anyone else who happens by ....\]**

## Why XSCALE?

There have been several efforts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.

* SAFe targets conservative businesses with a low-discipline, top-down,
  big-change-up-front, punctuated cadence model that combines Kanban, 
  quarterly [release trains](), and Scrum. SAFe is designed to
  permit an organization to keep its component silos intact. So it includes
  some XP practices but ignores test-first TDD, continuous delivery,
  collective ownership, merciless refactoring and feature teams.

* LeSS is more progressive in some ways, offering a high-collaboration,
  continuous cadence model that relies on [Scrum of Scrums]() to deal with
  integration and cross-cutting concerns. It is still big-change-up-front,
  however, requiring an organization to refactor its component silos into
  feature teams before commencing sprints, It leaves specifics of product
  planning, test automation and so on for teams to determine ad hoc.

* The Spotify model dispenses with Scrum in favour of a pattern of [Tribes and
  Guilds](), strongly emphasizing bottom-up collaboration and team autonomy.
  It gives no further guidance on method as it expects a structure of
  top-flight autonomous teams is capable of deciding for themselves how to
  choose, tailor and coordinate the rollout of Agile practices. 
  
XSCALE is based on the premise that proper XP actually makes scaling easier to
do, not harder, by assuring that technical debts are paid before they earn
interest. And that a large enterprise can easily adopt proper XP practices by
starting with a small uncompromised XP team using the [Goose in the Bottle]()
and growing it with the [Seven Samurai]() patterns. 

This means XSCALE never needs to effect big-change-up-front of portfolios,
programs or component teams, but it still yields thorough, bumpless Agile
refactoring of enterprise value streams.

As a result, XSCALE creates more Agility than SAFe as its methods of planning,
delivery and transformation are fully continuous and collaborative.  It offers
a more coherent organization than LeSS by combining Spotify [Tribes and
Guilds]() with consensus decision-making via [Iroquois Councils](). And it's
more accessible than Spotify alone because it provides an iterative,
standardized, stress-free way to transform enterprise value streams over time.

XSCALE further differs from other enterprise agile frameworks by embedding XP
in an ecosystem of interlocking Agile practice patterns from Lean Startup,
BDD, Lean UX, Kanban, DevOps, CD and A:TNG's OAPL to jump straight to the
ultimate Agile state of the art. Not because that waves a banner but because
with its iterative transformation this strategy actually achieves the greatest
benefit with the lowest risk. The enterprise transforms at its own pace, but
not team every does [half a cow, half a fish]().

## XSCALE Principles

XSCALE conforms with the [A:TNG values](), which form a strict superset of
those in the Agile Manifesto. As a practice pattern language XSCALE also
assumes six principles that should likewise be regarded as a strict superset
of those in the Manifesto.

eXcellent
: Pay technical debt before it incurs interest.

Scale-symmetric
: Iterate distinctions to control combinations.

Continuous
: Use the smallest practical cycle time and batch size.

Autonomous
: Use consensus to reach decisions and to delimit accountabilities.

Lean
: Contnuously pivot and refactor to maximize net ROI.

Ecosystem
: Self-organize to adapt to cycles of change.

Detailed reasoning for each of these follows, and then 

### eXcellent

The word "extreme" in the original XP caused a bad reaction that prompted the
effort to define the word "Agile" in a Manifesto. Even now, however, most
Agile software development teams use at least some XP practices. The best ones
use them all. So there's proven value in XP. Ignoring the scary word, what is
that value?

XP mostly differs from Scrum in its engineering practices - pair working,
test-first automated testing, collective ownership, continuous integration and
merciless refactoring - which interlock to continuously pay off technical
debt. At scale such debts compound exponentially, a ticking time-bomb that
sabotages throughput, transparency and sustainability. So we would define the
"eXtreme principle" as:

**Pay technical debt before it incurs interest.**

XSCALE takes this principle and the XP engineering practices as a foundation
because doing so enormously simplifies the challenge and reduces the risk of
making combinations of Agile teams work together. The Scrum practices of
sprint reviews and sprint retrospectives are likewise eXtreme in the sense
that they define and action early pay-back of analysis and process debt.

But let's not call it "eXtreme" again. the Manifesto authors figured gave us a
principle that reads, "Continuous attention to technical excellence and good
design enhances agility". XSCALE simply takes early technical debt pay-back as
the distinction for "eXcellent". So our X stands for that.

### Scalable

Scale is about combinations of requirements, of dependencies, of defects, and
of people. The number of combinations of a set grows very rapidly; a set of
just 10 things has over 3.6 million distinct combinations.  So the principle
of scalability is to:

**Make distinctions to control combinations**

Agile already does this. It maps requirements to distinct features and
stories, mercilessly refactors design artefacts into distinct ([DRY]())
modules, automates testing and integration to iteratively distinguish good
system behaviours from bad, and refactors capabilities into distinct feature
teams to minimize inter-team dependencies. All in compliance with this
principle.

A potential violation of this kind of scalability is found in the all-hands
release planning meetings and "town halls" in SAFe and LeSS. These fail to
distinguish small combinations of people and concerns, which means there's a
risk of them spinning out of control. The Spotify / Iroquois team patterns
actively channel and reduce the scope of conversations to limit their
combinatorial space.

Another scaling challenge comes from the problem of determining which
combinations of business alternatives have the most value. Because Agile works
as a hill-climbing algorithm, continously integrating little bits of
functionality into an existing whole, it's actually happy to climb a molehill
of value even when there's an Everest of it right next door. 

Business Model Canvas, Breadth-First Product Roadmap and Roadmap Refactoring
are patterns XSCALE uses to collect and distinguish alternatives through
sorting by relative value. This also serves to combine the work of multiple
into a single piece flow of whole features that maximize relative ROI while
respecting stream funding limits and MVP and CoD constraints. 

### Continuous

SAFe employs a quarterly [release train]() integration pattern. That's useful
for conservative organizations because it means they don't have to alter their
component silos. But several penalties come with it:

* Increased cost of quality due to delayed regression and acceptance testing
  in "hardening sprints".
* Wasted time in meetings to figure out how to satisfy combinatoric inter-team
  dependency cycles.
* Lost ROI from keeping finished features on ice for a quarter rather than
  releasing them as quickly as possible.
* Surprises and integration overhead due to the large batch sizes involved in
  quarterly releasing.

XSCALE avoids those penalties by enabling independent feature teams to deploy
continuously using the GitFlow pattern and environment mapping for continuous
delivery. This enables delivery teams to

**Use the smallest practical cycle time and batch size**

XSCALE applies the same principle to continuous product planning using lean
canvases and breadth-first roadmaps, continuous stream coordination
using chapters and councils, continuous coordination across streams using
guilds and treaties, continous refactoring, continuous integration and
continuous improvement via retrospectives and treaties. 

### Autonomous

SAFe has been [criticized]() for its assumption of hierarchical, top-down
decision-making, but LeSS tacitly assumes the same thing. Many of the benefits
of Agile derive from peer collaboration and team consensus games like planning
poker and retrospectives, and it doesn't seem reasonable to call a process
Agile at any scale if it doesn't empower consensus.

People have long dreamt of an anarchic utopia where the only law is the
[Golden Rule](). As the scale of a group increases past the [Dunbar
Number](http://en.wikipedia.org/wiki/Dunbar's_number), however, the [Tragedy
of the Commons]() inevitably leads to conflicts of interest that must be
controlled through more restrictive forms of society. Therefore,

**Use consensus to reach decisions and to delimit accountabilities.**

Rationally, individual accountability should be applied when the business cost
of delaying a decision is greater than the social cost of failing to maintain
consensus. This trade-off seems to have been best managed, historically, by
the Iroquois Confederacy of North America. 

The Iroquois used unanimous consent at a sub-Dunbar scale to govern a
hierarchy of treaty-making councils. Where consensus protocol was violated or
timing called for an immediate decision, per-tribe "war chiefs" were made
accountable. This proved stable at a multi-national scale over a period of
centuries. XSCALE combines it with the Spotify Tribal model to scale consensus
decisions while maintaining proper team and stream autonomy.

### Lean

Lean is often defined as "Minimizing Waste". Unfortunately that definition
admits an ambiguity. [Lean Startup](), [Lean UX]() and [LSD]() use Lean almost
as synonymous with Agile. But command and control frameworks like Lean Six
Sigma and Lean Accounting interpret Lean to mean cost reduction over ROI and
hierarchical standardization over adaptive collaboration. This makes them
unsuited to our purpose in XSCALE. 

So let's eliminate the ambiguity and give the following as our Lean principle:

**Continuously pivot and refactor to maximize net ROI**

We say net ROI to account for Cost of Delay and other factors in projecting
ROI over time. With this in mind we adopt the following Lean practice
patterns:

* As a special case of Breadth-first Roadmapping, Lean Startup's [business
  model canvas]() to pivot and refactor the enterprise's value streams
* Per stream [Value Stream Maps]() converted to a [Lean Kanban]() and
  [cumulative flow diagrams]() to represent the relationship between stream
  funding, stream return, and the stream roadmap
* [Product Teams]() working cross-functionally per Lean UX to coordinate
  [set-based-design]() with lo-fi prototyping, BDD and Feature roadmaps
* [Lean Transformation Canvas]() also forms a roadmap to focus the [Seven
  Samurai]() patterns.

These Lean practice patterns all work to maximise net ROI. XSCALE interlocks
them using scale-symmetric roadmapping to render a stream funding cycle
without need for project budgets and baselines while remaining continuously
responsive to metrics and learnings relative both to the teams in the stream
and to its market.

### Ecosystem

We have become used to combining the noun ecosystem with the adjective
fragile. But this is an artefact of our [anthropocene era]() where most
biological ecosystems are undergoing catastrophic change. The prime
characteristic of an ecosystem is not fragility, but agility - that it
embraces change to maintain stable behaviours over time. This is how a living
ecosystem differs from a jumble of creatures in a zoo - it self-organizes to
adapt to cycles of change without some external intelligence planning for it.

As the principles of a biological ecosystem we have sex and death. Sex
continously generates experimental variations on behaviour and death removes
variations that don't efficiently adapt to circumstances. 

As humans our great advantage over other creatures is our ability to
anticipate cycles of change so that we can adapt to them more rapidly than sex
and death. In XSCALE we think of Lean pivoting and set-based design in the
place of sex and Agile refactoring in the place of death, so our principle is:

**Self-organize to adapt to cycles of change**

This isn't just about products, but the structure and practices of teams,
streams and the whole enterprise. In order to pivot and refactor these things
XSCALE relies on a hierarchy of Iroquois councils: chapters as groupings of
people with common capabilities, stream councils composed of chapter
representatives, and an enterrpise council composed of stream council
representatives.  We'll explain how these composite below.

## XSCALE Practice Patterns

XSCALE is "opinionated" in the same sense as [Ruby on Rails]().  This is to
say you'll want to follow these practices very closely to begin with - because
this is how you "turn all the knobs to ten".  

Bear in mind that XSCALE isn't a big-change-up-front framework. It starts with
a single squad in a single stream and uses the [Seven Samurai]() to grow the
Agile capability. As it grows and you gain experience per the method of [Shu
Ha Ri]() your various councils will collaboratively vary these practices to
adapt to circumstances. That's a key part of XSCALE too. But the following
provides your starting point.

### Enterprise Practices

The Taylorist view of an enterprise holds that it is a function of wise,
senior management to determine appropriate funding and resourcing for workers
in the enterprise's value streams, while the workers are just accountable for
doing as they're told. 

XSCALE adopts the [Beyond Budgeting]() premise that each value stream must
either earn its keep or convince other, self-funded streams that it is worth
their investing their revenue to fund it. This is not to disempower wise,
senior managers, but to assure that the entire enterprise pivots
collaboratively to improve its ROI, with no special class of managers immune
from doing that.

Therefore, while we describe the following patterns as "Enterprise Practices",
this does not mean they only happen in the stratosphere. These same patterns
are employed by squads, streams, and the enterprise council to distinguish
their available courses of action breadth-first, prioritise these in terms
of net ROI, and reconcile them with avaialble funding levels. 

#### Breadth-first Roadmapping

{% img /images/lean-startup.png %}

Breadth-First Roadmapping (BFR) is a generalization of the Lean Startup
[Business Model Canvas]() that assures complete assessment of a group's
delivery targets or courses of action to a limited resolution. It's composed
of simple, commonplace Agile practices - story normal form, INVEST properties
and categories of Gherkin acceptance criteria. 

We apply BFR at an enterprise level to determine the value streams required to
realize a business model. At a stream level we use it to determine the
features of products and services required to achieve the stream's business
objectives. And delivery squads use BFR to determine the stories required to
deliver a feature.

Therefore every BFR can be regarded as an expansion of a single, large
objective. It's important to begin by calling out this objective in
story-normal form in order to scope the roadmapping work to an unambiguously
shared intent.

{% img /images/roadmap0.png %}

* At every level, BFR takes the form of a roadmap of objectives and themes,
  where themes are defined as categories of acceptance criteria. These
  criteria each represent a cross-cutting technical, business or user
  experience concern.
* Each objective is decomposed to a set of features in story-normal form.
  These features are checked to assure their in-principle INVEST compliance,
  where the S in INVEST is generalized to mean "scale similar" rather than
  just "small".
* The intersection of a feature and a theme is simply referred to as a box.
  And a box can only contain a blank or a checkmark. A checkmark means there
  are acceptance criteria for this feature in this theme. A blank means there
  are no such acceptance criteria.

{% img /images/roadmap1.png %}

* Each feature is evaluated against all themes. If a theme requires a precise
  definition, a gherkin template may be generated for it, though this is
  usually unnecessary.
* As each feature is evaluated, the team considers whether it has acceptance
  criteria in a category that isn't yet part of the roadmap. If so, a column
  is added for that theme and all features are re-evaluated to determine
  whether they also have acceptance criteria in it.
* It's fine to modify or refactor features as you go, so long as all the
  roadmap's boxes are updated accordingly.

{% img /images/roadmap2.png %}

* Each theme is evaluated to determine whether it is sufficiently covered by
  features to achieve the roadmap objective.
* If not, the roadmap will be extended with extra features to assure the theme
  is sufficiently covered, with these features subsequently evaluated in all
  themes.
* If it appears that all features have the same pattern of checkboxes for two
  themes, the team considers whether the two may be refactored into one.

{% img /images/roadmap3.png %}

* If a theme has checkboxes for all or almost all features, break out further
  features to encapsulate shared technical infrastructure to economically
  support the commonalities.
* If a theme has no checkboxes ticked, it may simply be deleted. If it has
  only a very small number ticked, it may be better to convert the sparse
  theme into a feature.
* This process continues until the team agrees that the roadmap is complete.

The roadmapping process may become onerous if features or themes are too
detailed for the scale of the roadmap. It's good to bear in mind that each of
the features will be expanded into a roadmap at the next level down, until the
features are small enough to constitute delivery stories, with details
hammered out by Product Teams. It's counterproductive to over-specify.

#### Backlog Bingo

XP's original Planning Game, now more popularly known as "Planning Poker", is
a proven way for delivery teams to make collaborative estimates about the
relative effort required to collaboratively deliver stories. XSCALE
generalizes this game as a method of determining the funding necessary to
delivery products and services. It does so by changing the unit of estimation
from story points to feature points.

Where story points represent only the relative effort required to deliver a
story, feature points estimate increments of funding necesssary to deploy
a feature. Because the number of story points that will fit into a funding
increment depends on team velocity at the time of delivery, there is no linear
mapping between feature points and story points.

Nevertheless, as Backlog Bingo gives feature points an empirical basis in
previously delivered features, they have proved very effective in establishing
a reasonable level of funding to assure delivery. Moreover, as Agile delivery
teams and streams are continuously becoming more productive over time, feature
points generally forecast a reasonable level of funding.

Backlog Bingo is played like this:

* Write [Fibonacci numbers]() from 1 to 89 on cards and lay them out in a row
  across a large table.

* Select three previously delivered and deployed features with well documented
  costs, one small, one medium and one large. Call these probes. Describe each
  probe in a story normal form commensurable with the roadmap features you
  want to estimate.

* Figure out a funding increment that constitutes the greatest common divisor
  of their respective costs and call this a feature point. Place the three
  probes under the Fibonacci numbers that match their respective magnitudes in
  feature points.

* Pick a feature from your roadmap. Compare it with the probes starting with
  the middle one to evaluate its relative size in Fibonacci multiples of
  feature points.

* Continue to add features this way until there are none left to estimate. If
  the estimators cannot agree on the estimate for a feature, don't force them
  but set it aside for later clarification.

If in the course of BPP the quality to be estimated is business value or
uncertainty, you can simply pick 3 different probes that provide a reasonable
basis for that.

#### Behavioural Product Planning

#### Roadmap Refactoring

#### Enterprise Council

### Stream Practices

By a Stream we mean a Spotify-structured tribe that self-organizes around
standardized Delivery and Adaptation Kanbans and an [Iroquois Council]() made
up of rotating Chapter representatives, 


#### Stream Kanban

{% img images/stream-cf.png %}

Every Stream is intended to generate a return. If the Stream is purely
internal then its return is regarded as equal to its funding. An external
facing Stream, however, may begin with an investment of funds by the
enterprise intended to kickstart sufficient external revenue that it becomes
self-funding and returns more than the funding it requires.

The return and the funding for a Stream can be represented on the same
cumulative flow diagram as its features because the features are sized, by
means of Business Bingo, in Feature Points that are each a multiple of a
certain amount of cash.

#### Adaptation Kanban

{% img images/stream-kanban.png %}

#### Stream Council

#### Stream Funding cycle


### Team Practices

#### DevOps + CD + GitFlow

* Iterations are 1 week long. Features (defined as groups of stories that when
  deployed together will delivery some concrete business value) are assigned
  one per delivery squad. Delivery is automated and features are delivered
  asynchronously by squads as they're completed.

* Per the Spotify model, each squad has all the skills and capabilities it
  needs to delivery a feature. Per DevOps, Ops forms a chapter that does not
  gate deployment, but provides delivery squads with automated deployment
  tools and channels that enable them to test and integrate stories and deploy
  features independently.

* Ops maintains virtualization via Mock Objects, Data Fixtures, BDD step
  implementations and [Service Virtualization Tools]() to assure that tests
  cannot interfere with one another and that the behaviour of virtual and
  production-like SIT environments is equivalent under test.

#### Lean UX + BDD + XP

* Streams use the Lean UX [Product Team]() pattern where designers, analysts,
  SMEs, architects and product owners work together to break features down
  into stories to supply a set of delivery squads. To comform with the Spotify
  structure the Product Team takes the form of a chapter. Whenever the Product
  chapter is not meeting its members spend time collaborating with the
  delivery squads.

* Stories are produced in [Gherkin]() format factored to maintain [INVEST]()
  properties. Squads get together with the Product Team every Wednesday
  afternoon to estimate its latest batch of stories.
  
* A story with INVEST defects is returned without an estiamte to the Product
  Team for clarification. Otherwise the throughput of the Product Team is
  graphed on the [Stream CF diagram]() in terms of new estimated story points
  per week.

* Squads hold reviews and retrospectives every Friday and task breakout
  sessions every Monday. Their CF diagrams roll up together to inform the
  Stream CF diagram's metrics for implemented stories, integrated stories,
  and deployed features.

#### Chapter and Squad meetings

* All of a stream's chapters meet simultaneously every Friday lunch so that
  squad activites are minimally interrupted. Chapters may also meet at other
  times with the permission of their Stream Council.

* At the Friday lunch meeting a Chapter selects its representative for the
  Stream Council, which is conducted immediately afterward while squads are
  conducting their weekly reviews.

* Squad retrospectives are held immediately following the Stream Council
  meeting so that any treaties proposed by Council can be immediately and
  unanimously ratified. If ratification of a treaty is not achieved, a further
  Conuncil meeting may be held immediately after the squad retros to sort the
  matter out. If polarization occurs here then the Stream lead may force
  temporary (1 week) adoption of a treaty to enable discussions to continue.
  See more details on this below.

* Chapters track treaties in an Adaptation Kanban with work states of
  Awareness, Architecture, Adoption, Acceleration and Acceptance. This kanban
  rolls up to inform the Stream Council's Adaptation Kanban. 



