<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: XP | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/xp/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-25T16:10:45+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a pattern language for a
continuously delivering, continuously self-organizing, continuously adaptive
Agile enterprise that turns all the knobs to ten.</p>

<!-- more -->


<p><strong>[This post is currently in draft. I hope to finish it this weekend but
thought some folk would enjoy looking at the pretty picture.]</strong></p>

<h2>Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
<li><p>SAFe targets conservative businesses with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban, a slow
quarterly <a href="">release train</a> integration, and Scrum. SAFe is designed to
permit an organization to keep its component silos intact. So it includes
some XP practices but ignores test-first TDD, continuous delivery,
collective ownership, merciless refactoring and feature teams.</p></li>
<li><p>LeSS is more progressive in some ways, offering a high-collaboration,
continuous cadence model that relies on <a href="">Scrum of Scrums</a> to deal with
integration and cross-cutting concerns. It is still big-change-up-front,
however, requiring an organization to refactor its component silos into
feature teams before commencing sprints, It leaves specifics of product
planning, test automation and so on for teams to determine ad hoc.</p></li>
<li><p>The Spotify model dispenses with Scrum in favour of a pattern of <a href="">Tribes and
Guilds</a>, strongly emphasizing bottom-up collaboration and team autonomy.
It gives no further guidance on method as it expects a structure of
top-flight autonomous teams is capable of deciding for themselves how to
choose, tailor and coordinate the rollout of further Agile practices.</p></li>
</ul>


<p>There are several further variatons on scaling in the Scrum community but the
common thread of all these things is the assumption that requiring
high-discipline XP practices is hard for a large enterprise to do.</p>

<p>XSCALE is based on the premise that full XP makes scaling much easier to do.
A large enterprise can tranasform to XP iteratively. By growing from a small
uncompromised XP team using the <a href="">Seven Samurai</a> patterns it never needs to
effect big-change-up-front of its portfolios, programs or component teams.</p>

<p>As a result, XSCALE offers more Agility than SAFe in that its methods of
planning, delivery and transformation are fully collaborative and continuous.
It offers a more coherent organization than LeSS by combining Spotify <a href="">Tribes
and Guilds</a> with consensus decisioning via <a href="">Iroquois Councils</a>. But it&rsquo;s
more accessible than Spotify because it provides an iterative, standardized,
bump-free way to transform enterprise value streams over time.</p>

<p>XSCALE further differs from the other enterprise agile frameworks by embedding
proper XP in an ecosystem of interlocking Agile practice patterns from Lean
Startup, BDD, Lean UX, Kanban, DevOps, CD and A:TNG&rsquo;s OAPL. This leapfrogs the
enterprise to the ultimate Agile state of the art &ndash; not because that waves a
flag but because with iterative transformation this strategy achieves the
greatest benefit with the lowest risk.</p>

<h2>What&rsquo;s XSCALE?</h2>

<h3>XP-based</h3>

<p>Why not Scrum? Scrum is really just a watered-down version of XP. If you do
proper XP you already have all the Scrum practice patterns. XP, however,
enormously simplifies the challenge of making combinations of Agile teams
work together.</p>

<p>Why? XP&rsquo;s pair working, test automation, collective code ownership, continuous
integration and merciless refactoring &ndash; the &ldquo;extreme&rdquo; parts that Scrum makes
optional &ndash; continuously pay off technical debt and actively prevent cycles of
rework and team interference. At scale these things cascade and multiply,
representing an unacceptable risk to enterprise productivity. XP largely
eliminates that risk.</p>

<h3>Scalable</h3>

<p>Scale is about combinations. Of requirements, of dependencies, of defects, and
of people. The number of combinations of a set is the factorial function,
which grows very rapidly; a set of just 10 things, for example, has over
\3.6 million distinct combinations.</p>

<p>SAFe&rsquo;s all-hands release planning meetings and LeSS&rsquo;s &ldquo;town halls&rdquo; fail to
limit conversations to small combinations of concerns. XSCALE leverages the
Spotify / Iroquois patterns to reduce the scope of these conversations.
Neverthelss, further challenges come from chopping things up this fine.</p>

<p>Agile works as a hill-climbing algorithm; it&rsquo;s happy to climb a molehill of
value while there&rsquo;s an Everest right next door. XSCALE adopts Business Model
Canvases from Lean Startup and Behavioural Product Planning from OAPL to make
sure the output of the multiple Agile teams adds up to a maximum ROI stream of
whole features that respect stream funding limits, MVP and CoD constraints.</p>

<h3>Continuous</h3>

<p>SAFe relies heavily on a slow quarterly <a href="">release train</a> integration pattern.
This is good for conservative organizations because it means they don&rsquo;t have
to alter their existing team structures. But there are penalties to pay:</p>

<ul>
<li>Lost ROI from keeping finished features on ice for a quarter rather than
running the train as quickly as possible.</li>
<li>Integration overhead due to the large batch sizes involved in quarterly
releasing.</li>
<li>Exponentially increased cost of quality due to phased regression and
acceptance testing in &ldquo;hardening sprints&rdquo;.</li>
</ul>


<p>XSCALE avoids these penalties by enabling release trains to run multiple
times per day be enforcing Feature teams, the GitFlow DVCS pattern, virtual
environments, CD and BDD.</p>

<h3>Autonomous</h3>

<p>SAFe has been criticized for its assumption of hierarchical, top-down
decision-making, but LeSS assumes exactly the same thing. Many of the benefits
of Agile derive from peer collaboration and consensus games like planning
poker and retrospectives. Can we really call a process Agile if it doesn&rsquo;t
empower such collaboration?</p>

<p>People have long dreamt of an anarchic utopia where the only law is the
<a href="">Golden Rule</a>.  As the population of a group increases past the <a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar
Number</a>, however, the <a href="">Tragedy
of the Commons</a> inevitably leads to conflicts of interest that must be
controlled through a more restrictive form of society.</p>

<p>Rationally, individual accountability should be assigned when the business
cost of delaying a decision is greater than the social cost of failing to
achieve consensus. Historically, this trade-off was best managed by the
the Iroquois Confederacy of North America.</p>

<p>The Iroquois combined a system of bottom-up autonomy managed by a chain of
consensus councils with a set of &ldquo;war chiefs&rdquo; who only took accountability
when protocol was violated or time did not permit consensus. This trade-off
proved stable at a national scale over a period of several centuries. XSCALE
combines it with the Spotify Tribal model to maintain the benefits of
collaboration at team, stream and whole enterprise levels.</p>

<h3>Lean</h3>

<h2>Ecosystem</h2>

<h3>Lean Business Modelling</h3>

<h3>Business Bingo</h3>

<h3>Behavioural Product Planning</h3>

<h3>Roadmap Refactoring</h3>

<h3>Spotify Model + Iroquois Councils</h3>

<h3>Value Stream Kanban</h3>

<h3>Lean UX + BDD + XP</h3>

<h3>DevOps + CD + GitFlow</h3>

<h3>Chapters</h3>

<h3>Stream Council</h3>

<h3>Enterprise Council</h3>

<h3>Continuous Adaptation</h3>

<h2>The Red Pill</h2>
]]></content>
  </entry>
  
</feed>
