<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-03-12T16:33:20+11:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why What How]]></title>
    <link href="http://Agile-TNG.github.io/blog/2014/03/11/why-what-how/"/>
    <updated>2014-03-11T22:59:46+11:00</updated>
    <id>http://Agile-TNG.github.io/blog/2014/03/11/why-what-how</id>
    <content type="html"><![CDATA[<p>Why is it that the Agile Manifesto hasn&rsquo;t changed since 2001?  There
are conferences every year. Have we learned nothing in all that time? Seeing
the Manifesto as some historical document like the Declaration of Independence
doesn&rsquo;t seem very Agile. Don&rsquo;t we embrace change around here?</p>

<p>The <a href="http://www.compelcon.se/gallery/XP2000/XP2000_A_037?full=1">stand-up in the
Med</a> that presaged
the famous Snowbird meeting was where <em>Extreme</em> became <em>Agile</em>.  That was
the beauty of it. Nothing was sacred and there was no need to pay our respect
to any great names. We were conspirators and it was a revolution.</p>

<!-- more -->


<h2>Why TNG?</h2>

<p>If  were no Agile today we would just go and invent it again this way.
What was really great about those early days of the Alliance was there
was no one whose ring needed kissing. So change could happen <em>fast</em>.</p>

<p>We all know the <a href="http://agilemanifesto.org/background.jpg">Agle Last Supper
picture</a>. The truth is there are
lots of agilists these days with more experience than the Snowbird guys had
then.  In the 20th century we&rsquo;d have cruised over to Ward&rsquo;s Wiki &ndash; when it was
the only wiki &ndash; to share what we were learning in the
<a href="http://www.c2.com/cgi/wiki?WikiNow">WikiNow</a>, that gestalt mind almost but
not entirely unlike Wikipedia. And the Manifesto would have kept evolving.
What happened to the original open community that gave us Agile?</p>

<p>Believe it or not there was
actually a guy who spent the first decade of the 21st century <a href="http://www.c2.com/cgi/wiki?GrammarVandal">correcting
grammar</a> on C2. Correcting it
<strong>wrong</strong>. He wasn&rsquo;t alone; there were lots of trolls. Strenuous efforts were
made to salvage C2 but in vain, because when the trolls moved in the
community moved on.</p>

<p>Similarly some of the original Alliance members seem less interested in
evolving the state of the Agile art and more interested in <a href="https://www.youtube.com/watch?v=nsdZKCh6RsU">handing out
badges</a>. There are some new
players acting like <em>federales</em> too, and these badge businesses seem to be
booming.</p>

<h2>What TNG?</h2>

<p>Agile was never about badges. It&rsquo;s about productive teams and their practice
patterns, using peer protocols to self-organise and metric feedback to guide
their evolution. The original Manifesto values are as relevant as ever,
but that doesn&rsquo;t mean they shouldn&rsquo;t be refactored and adapted the
same way the original open community did. <strong>A:TNG</strong> is for that.</p>

<p>To advance the state of the Agile art we are uncovering, refactoring and
evolving Agile patterns together in a <a href="http://meatballwiki.org/wiki/NonZeroSumGame">Positive Sum
Game</a>. Everyone can play. It
doesn&rsquo;t matter whether or not you&rsquo;ve written a book, earned a badge or
attended some ancient standup. It only matters that you&rsquo;ve got relevant
experience and ideas to contribute.</p>

<h2>How TNG?</h2>

<p>Consensus generation was the most valuable thing about Ward&rsquo;s Wiki.
Individuals and interactions in open collaboration generated lots of mutually
agreeable content. We might want this old time open Agile back and never mind
trolls and sheriffs &ndash; but how?</p>

<p>A wiki is basically an open version control system wedded to a content editor.
Most are centralized, which means you can only have one current version of
a wiki page at any one time. That&rsquo;s where trolls and sherrifs come from.</p>

<p>On github we have a decentralized VCS as our basis for consensus
decisions. TNG will use this new technology as its way of self-organising. If
any trolls turn up we simply don&rsquo;t need to pull from them. And no more trolls
means no sheriffs.</p>

<p>We could get an <a href="http://www.c2.com/cgi/wiki?AgileParliament">Agile Parliament</a>
going. Treaty proposals as pull requests … that would take some doing. Needs
trial and error, but that’s what we’re here for. To advance the state of our
Agile art.</p>

<p>We&rsquo;ve got lots of basics to cover to give TNG such a form: pick a license, put
up an initial community charter, kick the Parliament pattern around, figure
out how to collaborate on the framing content here, figure out a decenralized
authoring workflow and send out enough invitations to get our kernel community
moving.</p>

<p>It&rsquo;s like, when we were kids, we had sea monkeys. The instructions said to add
the sachet to the water and next morning it&rsquo;d be full of little people.
That&rsquo;s our system metaphor for this. Except maybe I&rsquo;m the brine shrimp and
you&rsquo;re the kid wondering when we&rsquo;ll start to look like the picture on the
packet.</p>

<p>Let&rsquo;s get stuck in. Star and fork the repo. Help figure the
protocol out. That ol&#8217; <a href="http://www.c2.com/cgi/wiki?WikiNature">WikiNature</a>
will kick in real soon &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Values]]></title>
    <link href="http://Agile-TNG.github.io/blog/2014/03/10/4-new-values/"/>
    <updated>2014-03-10T09:43:28+11:00</updated>
    <id>http://Agile-TNG.github.io/blog/2014/03/10/4-new-values</id>
    <content type="html"><![CDATA[<p>A:TNG adds four values Agile needs at enterprise
scale over the original manifesto:</p>

<ul>
<li><strong>Pattern languages over prescriptive frameworks</strong></li>
<li><strong>Productive teams over certified individuals</strong></li>
<li><strong>Metric feedback over command &amp; control</strong></li>
<li><strong>Consensus protocols over management hierarchies</strong></li>
</ul>


<p>That is, while there is value in the items on the right, we value the
items on the left more. And while there is value in the Manifesto values,
we value these TNG values equally.</p>

<!-- more -->


<p>Agile started with XP on the <a href="http://www.c2.com/cgi/wiki/ExtremeProgrammingRoadmap">C2
Wiki</a>, a high powered
but open community of professionals sharing patterns and innovations for the
common good. The Agile Alliance distilled this work into a Manifesto and added
a signup page, but C2&rsquo;s open community is the real reason for the global
supremacy of Agile today.</p>

<p>Nevertheless that all happened last century and the Manifesto is showing
its age.  It&rsquo;s still right on when it comes to teams, but lacks values and
principles for large scale Agile adoption. This gap has led to
<a href="http://agile.dzone.com/articles/method-wars-scrum-vs-safe">contention</a> as
consultancies and certificate-mills compete to pry open corporate checkbooks
for their respective brands.</p>

<p>Which is crazy. There&rsquo;s value in both Scrum and SAFe, and no reason to think
you can&rsquo;t combine elements of both along with other frameworks. The value of
frameworks isn&rsquo;t in their brands and certificates, nor in adopting them as
prescriptions, but in understanding and adpting the the practice patterns they
contain.</p>

<p>Schwaber is correct in worrying about the danger of making &ldquo;half a cow and
half a fish&rdquo; when what we really want is dolphins. The question is, on what
basis do you go about the process of adaptation? How do you do it organically,
iteratively, and without tripping up at scale? To do that you need a clear set
of values and principles. And that&rsquo;s where A:TNG comes in.</p>

<p>A:TNG is based on the idea that SAFe, Less, DAD, APF, ETF, OBM, Beyond
Budgeting, Lean and on and on all provide useful patterns.  And that there&rsquo;s a
lot more to enterprise agility than all of them put together. We&rsquo;ve augmented
the Manifesto values not as a way to make yet another brand, but as a basis
for the work of pulling the pattern languages out of all the brands and
into the open where we can really sort out what works with what.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAPL: An Open Agile Pattern Language]]></title>
    <link href="http://Agile-TNG.github.io/blog/2014/03/09/oapl-the-open-agile-pattern-language/"/>
    <updated>2014-03-09T18:02:45+11:00</updated>
    <id>http://Agile-TNG.github.io/blog/2014/03/09/oapl-the-open-agile-pattern-language</id>
    <content type="html"><![CDATA[<p>A key activity within A:TNG is the construction of an open pattern language to
inter-relate learnings drawn from the various frameworks with the experience
of our practitioners.  The history of Agile is intertwined with the Design
Patterns movement.  The first XP book was framed as a pattern language.  Scrum
started as a framework but is reformulating itself as a pattern language
(<a href="http://www.scrumplop.org">ScrumPLOP</a>).</p>

<p>What advantage does a practice pattern language offer over a prescriptive
framework? What benefit in a culture where practitioners already
have Agile in their bones? And why is it such a big deal for TNG?</p>

<!-- more -->


<h2>Pattern Language</h2>

<p>Design patterns started with the great 20th century architect Chris Alexander.
Alexander described them this way: <em>Each pattern describes a problem which
occurs over and over again in our environment, and then describes the core of
a trusted solution to that problem</em>. Alexander&rsquo;s insight was that patterns
work together to generate an architecture as a <a href="http://www.jacana.plus.com/pattern/P0.htm">language of
design</a>.</p>

<p>Software engineers soon took Alexander&rsquo;s idea to a new level with the &ldquo;Pattern
Languages of Programs&rdquo; (<a href="http://hillside.net/conferences">PLoP</a>) conference
series, the best-selling &ldquo;Gang of Four&rdquo; book <a href="http://www.blackwasp.co.uk/GofPatterns.aspx">Design
Patterns</a>, and Ward Cunningham&rsquo;s
famouse <a href="http://c2.com/cgi-bin/wiki?PeopleProjectsAndPatterns">Portland Pattern
Repository</a> which also
became the first wiki, &ldquo;Ward&rsquo;s Wiki&rdquo;.</p>

<p>The success of wiki as a collaborative editing method may have distracted
people from the Pattern Language ideas but there are still PLoP conferences
every year and the popular patterns make up a core language useful to every
professional software engineer.</p>

<p>The key advantage of pattern languages is the empowerment of their users to
make decisions that would otherwise require trial and error or deep expertise.
Furthermore,
* patterns can be adapted and refactored to suit specific domains without
  adopting the pattern language as a whole
* a process of adaptive design is enabled whereby patterns are trialled, added
  and subtracted as forces in their domain are iteratively experienced
* comparative studies can be performed on the efficacy of alternative patterns
  in related domains and patterns of patterns can be formalized</p>

<h2>Anti-Patterns</h2>

<p>The complement to the Design Pattern is the Anti-Pattern, which describes a
solution that fails to solve the problem it was intended to solve, or which
generates more problems.  You may think of anti-patterns as categories of bad
ideas, but another class of them has to do with short term thinking at the
expense of long term goals. This class is rather more commonplace than
conscious bad choices.</p>

<p>In particular in Martin Fowler&rsquo;s book, &ldquo;Refactoring&rdquo;, he and Kent Beck
identify a short list of design problems they call &ldquo;code smells&rdquo;. The code
smells are not bugs &ndash; the code still works &ndash; but a form of design pollution
that makes bugs more likely to occur, and fixing bugs more difficult.</p>

<p>Code smells are often caused by taking shortcuts to get things to work while
under time pressure, and as such they&rsquo;re part of the Agile process. Beck and
Fowler emphasize that it&rsquo;s not the smells themselves that constitute
Anti-Patterns, but a lack of systematic remediation of them through the
critical Agile process of
<a href="http://c2.com/cgi-bin/wiki?RefactorMercilessly">refactoring</a>.</p>

<p>It is unfortunately commmonplace, even in teams that have most of the other
Agile fundamentals nailed down, that refactoring is either unknown or
neglected during times of stress. Of course the less refactoring, the more
frequent those times. This is also true of the structure and process of whole
organizations.</p>

<p>For this reason we call <em>Not Refactoring</em> an Enterprise Smell.</p>

<h2>Enterprise Smells &amp; Enterprise Refactorings</h2>

<p>At the level of an Enterprise we don&rsquo;t commonly speak of bugs, but after Lean
we talk of wastes, stressors, irregularities and misalignments. The Lean
movement has produced a classification of the first three of these, and Lean
coaches conduct various practices aimed at reducing them. It is reasonable to
think of Lean as a process of refactoring at an enterprise level.</p>

<p>Lean has not introduced a vocabulary equivalent to that of our Agile
programmers, however, and A:TNG regards this an an opportunity to provide
benefit by filling a gap. As it is reasonable to draw analogies between the
design of an enterprise and the design of a computer program, we can lift each
of the Beck/Fowler code smells into the context of an enterprise without
thinking very hard:</p>

<ul>
<li>duplicated code corresponds with teams with duplicate RACI</li>
<li>long methods correspond with deferred feedback</li>
<li>large classes correspond with large teams or component based teams</li>
<li>too many parameters corresponds with part-time resourcing</li>
<li>and so on &hellip;</li>
</ul>


<p>Cataloguing enterprise smells and refactorings will form a key activity of the
A:TNG community, and a substantial part of the OAPL may be devoted to such
things. We aim to kick off this cataloguing activity as part of our inaugural
meeting on March 13 in Sydney.</p>

<h2>Pattern Languages over Prescriptive Frameworks</h2>

<p>The reason this value is so prominent in A:TNG isn&rsquo;t to do with Enterprise
patterns and anti-patterns so much as the tendency for enterprises on the
Agile journey to take the advice of experienced agilists for more than it&rsquo;s
worth.</p>

<p>It is reasonable to believe that someone with long experience will have a
valuable practice pattern language to share. It is not reasonable for a guru
to suggest that the patterns in their language are the best, the only, or the
ultimate solution to the problems they address. Outside of the corporate
sphere we regard someone making such claims not as a trustworthy counsellor,
but as a dangerous cult leader. Counsellors explain the key factors in making
decisions; they don&rsquo;t describe the one true path.</p>

<p>It is also reasonable for newcomers to Agile to adopt all the patterns from a
specific framework as a whole. This is why we say the frameworks have value.
As Alistair Cockburn pointed out in his treatment of
<a href="http://alistair.cockburn.us/Shu+Ha+Ri">Shu-Ha-Ri</a>, an Agile beginner at the
Shu level should not be afraid to follow a framework slavishly because the
value of the framework is in the interlocking relationship between its
elements. That value can&rsquo;t be obtained unless all the framework&rsquo;s elements are
pieced together.</p>

<p>While a framework forms a good starting point for practice, over time the
student develops sufficient understanding of the way the framework applies in
their environment to pass into the realm of &ldquo;Ha&rdquo;. Here reflection and
experimentation with variations and augmentation of the starting framework
becomes the key way to improve, and pattern languages yield their greatest
benefits as signposts along he way.</p>

<p>As the practitioner emerges into the realm of Ri they gain their own insights,
make their own discoveries and solve problems beyond the current state of the
art. And so they&rsquo;re faced with two alternatives. Create a framework of their
own to brand and market its benefits, or define and add their patterns onto an
existing pattern language so that students and other practitioners can test
and refine the benefits themselves.</p>

<h2><em>We Are Uncovering Better Ways &hellip;</em></h2>

<p>This latter course may not be so remunerative as the former &ndash; but it is more
Agile because it is more collaborative, more transparent, more scientific, and
more courageous. For this reason the original Agile Manifesto begins with the
words, &ldquo;We are uncovering better ways &hellip;&rdquo;. So does TNG. Not out of a sense of
tradition, but because this work of uncovering is our ongoing mission.</p>

<p>We are uncovering better ways to deliver products and services by improving
our teams, enterprises and communities. And we represent and refactor these
better ways together as patterns in our OAPL. Thereby we make the trade-offs
clear so we can work with newcomers and help them find better ways for
themselves, without expecting them merely to follow in our footsteps.</p>
]]></content>
  </entry>
  
</feed>
