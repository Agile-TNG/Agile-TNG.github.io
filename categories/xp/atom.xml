<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: XP | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/xp/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-24T15:14:03+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a pattern language for a
continuously delivering, continuously self-organizing, continuously adaptive
Agile enterprise that turns all the knobs to ten.</p>

<!-- more -->


<h2>Why XSCALE?</h2>

<p>There have been several attempts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
<li><p>SAFe targets conservative businesses with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban, the
<a href="">release train</a> integration pattern, and Scrum. SAFe lets an organization
keep its component silos intact and includes some XP practices but ignores
continuous delivery, collective ownership, merciless refactoring and feature
teams.</p></li>
<li><p>LeSS is more progressive in some ways, offering a high-collaboration,
continuous cadence model that relies on <a href="">Scrum of Scrums</a> to deal with
integration and cross-cutting concerns. It is still big-change-up-front,
however, requiring an organization to refactor its component silos into
feature teams before commencing sprints, It leaves specifics of product
planning, test automation and so on for its teams to discover for themselves
over time.</p></li>
<li><p>The Spotify model dispenses with Scrum in favour of a pattern of <a href="">Tribes and
Guilds</a>, strongly emphasizing bottom-up collaboration and team autonomy.
It gives no further guidance on method as it expects a structure of
top-flight autonomous teams is capable of deciding for themselves how to
choose, tailor and coordinate the rollout of further Agile practices.</p></li>
</ul>


<p>What&rsquo;s common to all of these is that they don&rsquo;t require proper
high-discipline XP practices. XSCALE is based on the premise that full XP
makes scaling a lot easier to do &ndash; and that a large enterprise can easily
achieve full XP if it stages its transformation iteratively, growing
organically from a small team using the <a href="">Goose in the Bottle</a> pattern rather
than trying to effect big-change-up-front for existing teams.</p>

<p>As a result, XSCALE is more Agile than SAFe in that it is fully collaborative
and continuous in its methods of planning, delivery and transformation. It
offers a more coherent organization than LeSS because it combines the Spotify
model of <a href="">Tribes and Guilds</a> with the historically proven method of
<a href="">Iroquois Councils</a>. It&rsquo;s also more accessible than Spotify because it
provides a simple, bumpless way for existing programs to achieve
transformation from their current state of organization.</p>

<p>XSCALE also differs from these three by augmenting proper XP with a
standardization of the best proven practice patterns from Lean Startup, BDD,
Lean UX, Kanban, DevOps, CD and TNG, refactoring these into a single,
consistent ecosystem that represents the absolute Agile state of the art on
any scale.</p>

<h2>XP-based</h2>

<p>Why not Scrum? Well, Scrum is really just a watered-down version of XP. If you
do XP you already do all the Scrum practices. Full XP, however, enormously
simplifies the job of making combinations of Agile teams scale.</p>

<p>Why? Because without XP&rsquo;s pair working, test automation, collective code
ownership, continuous integration and merciless refactoring &ndash; the &ldquo;hard bits&rdquo;
of Agile that Scrum leaves out, technical debt inevitably increases over time.
That means rework and surprises, and those things cascade at scale.</p>

<h2>Scalable</h2>

<p>Scale is about combinations. Of requirements, of dependencies, of defects, and
of people. The number of combinations of a set grows very rapidly. The set of
combinations of just 10 things, for example, has over 3.6 million variants.</p>

<p>Waterfall failed in part because it didn&rsquo;t control for combinations.  Big
teams, big meetings, big batch sizes, big chunks of work, big changes &hellip;
Agile keeps these things small to stay away from the nasty end of the
combinatorial curve.</p>

<p>But Agile works as a hill-climbing algorithm; it&rsquo;s happy to climb a molehill
of value, while there&rsquo;s Everest right next door. To deal with this XSCALE
incorporates Business Model Canvases from Lean Startup and Behavioural Product
Planning and Roadmap Refactoring from TNG to make certain all the little
batches of little stories produced by all the little teams still add up to
a maximum ROI stream of whole features.</p>

<h2>Continuous</h2>

<p>One of the chief complaints about SAFe is its punctuated delivery. SAFe relies
heavily on a quarterly <a href="">release train</a> integration pattern. This is good for
conservative organizations because it</p>

<p>But there&rsquo;s a heavy price to pay terms of losing ROI by keeping finisshed
features on ice, and integration overhead due to the large batch sizes and
exponentially increased cost of quality.</p>

<p>XSCALE avoids this penalty by dispensing with release trains in favour of
Feature teams, the GitFlow DVCS pattern, virtual environments, CD and BDD.</p>

<h2>Autonomous</h2>

<h2>Lean</h2>

<h2>Ecosystem</h2>

<h3>Lean Business Modelling</h3>

<h3>Business Bingo</h3>

<h3>Behavioural Product Planning</h3>

<h3>Roadmap Refactoring</h3>

<h3>Spotify Model + Iroquois Councils</h3>

<h3>Value Stream Kanban</h3>

<h3>Lean UX + BDD + XP</h3>

<h3>DevOps + CD + GitFlow</h3>

<h3>Chapters</h3>

<h3>Stream Council</h3>

<h3>Enterprise Council</h3>

<h3>Continuous Adaptation</h3>

<h2>The Red Pill</h2>
]]></content>
  </entry>
  
</feed>
