<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pattern | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/pattern/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-07-17T20:50:40+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[Peter Merel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Problem With Projects]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/13/product-funding/"/>
    <updated>2014-04-13T20:15:15+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/13/product-funding</id>
    <content type="html"><![CDATA[<p><img src="/images/nails.png" width="400"></p>

<p>When all you have is a hammer, every problem looks like a nail.  When all you
have is a project management methodology, everything looks like a project. </p>

<!-- more -->

<p>Most organisations have become very project focussed. Everything is a project.
New release of software – project. Some process change – project. That’s
great. Projects are good. They are certainly better than the ad-hoc approach
we had before projects. But projects do have some drawbacks.</p>

<p>To work out what the drawbacks are, we need to look at what a project is. A
project is defined (by the PMI who should know) as something that has a
defined scope, a defined start and a defined end date.  So projects are finite
in length. Anything without an end date isn’t a project, it’s business as
usual.</p>

<p>This defined end date is where the problem with projects lies. In reality,
most of the things we treat as projects aren’t really projects. They have no
real end date. Let’s take software delivery as an example. A company develops
a product, let’s call it “Wonder Widget”. They want to release a new version
(WW 2.0) so they start a WW2.0 project with an end date that matches the
desired release date. When the release date is reached, the project team is
disbanded. Then when they want to release WW2.1, they start up the WW2.1
project and so on. Sound familiar? The industry does this all the time. So
what’s the problem?</p>

<p>The problem is that these aren’t really separate pieces of work. Development
of Wonder Widget doesn’t stop when 2.0 is released; it continues. But in a
project-focussed world, the team that developed 2.0 is not necessarily the
same as the team that develops 2.1. Project teams have a finite life. Some of
the key members may be the same but many will be off on other projects (Super
Service 3.5) so the new team has to learn about Wonder Widget from scratch.</p>

<p>Even worse, the Wonder Widget 2.0 team may have left things in a bad state. We
all know how this happens - schedule pressure near the end of a project. The
team feels stressed. There are still new features to deliver. Other things
start to slip. Like testing and documentation and code quality. All the things
that will make life really hard for the 2.1 team.  The 2.0 team won’t be
judged on how clean they leave things for 2.1, or on how much technical debt
they accrue. They will be judged on how successful 2.0 is – how many features
it has, how well it sells. Everyone knows that 2.1 will have a hard time but
hey, that’s their problem. 2.0 will be a great success.</p>

<p>Sound familiar? </p>

<p>The problem with projects like this is that they aren’t really projects.</p>

<h2 id="therefore">Therefore</h2>

<p>Treat Product development as a continuous activity. </p>

<p><img src="/images/zipper.png"></p>

<p>One release of a product shouldn’t mess up the organisation’s ability to
deliver the next release. What we need is a Product focus rather than a
Project focus. The team shouldn’t be the 2.0 team, they should be the Wonder
Widget team. They should be responsible for all the releases of the product.
They should flow from one release to the next as a stable team.</p>

<p>Quite obviously this removes the learning stage from the beginning of each
release but more importantly “that’s their problem” suddenly becomes “that’s
our problem”. The team now has an incentive to keep quality high. This flows
on to other organisational benefits like more predictable releases (as teams
are’t blindsided by technical debt left behind by other teams rushing to
finish).</p>

<p>Similarly for change management projects. Running change management as a
project is a great way to ensure that the change fades away as soon as the
project is finished. Change management is ongoing, with no real end date.</p>

<p>Projects are fine for things that are actually projects. But let’s stop
treating everything like one.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iroquois Council]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/02/iroquois-council/"/>
    <updated>2014-04-02T15:04:37+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/02/iroquois-council</id>
    <content type="html"><![CDATA[<p>A scalable consensus game based on the American indigenous protocol of
councils and treaties. Iroquois Councils enable communities and enterprises to
make decisions together without deferring to hierarchies of accountable
individuals.</p>

<p><img src="/images/parliament.png"></p>

<!-- more -->

<p>The Spotify pattern of <a href="http://vimeo.com/85490944">Tribes and Guilds</a> is a
rediscovered social method.  The Iroquois Confederacy used it on a larger
scale than any modern corporation for <a href="http://www.haudenosauneeconfederacy.com/whatisconfederacy.html">almost a thousand
years</a>.  For
two centuries it peacefully inter-operated with European governance in North
America. </p>

<p>These two co-existed right up to the American revolution with the Iroquois
directly influencing the American founding fathers and their new form of
government.</p>

<p>Iroquois and American forms differ in that Iroquois society was based on
unanimity and reciprocity rather than democracy and property. Their nations
were made up of chains of autonomous tribes managed by a cycle of councils
and intermarriages rather than hierarchies of accountable individuals.</p>

<p>Collaborative agreements between the autonomous tribes were called treaties.
To take effect a treaty required ratification, not just by the people
attending a council, but unanimously by the groups they represented. As
opposed to European laws, continuous review of Iroquois treaties was required
to maintain their effect.</p>

<p><a href="">Iroquois Council</a> is a distillation of this protocol. It consists of an
<a href="">Open Space</a> for <a href="">BDD treaties</a>, a decision-making <a href="">Kanban</a> and
reciprocal ratification by participant teams. </p>

<h2 id="the-pattern-in-portland-form">The Pattern in Portland Form</h2>

<ul>
  <li>
    <p>Agile enterprises must continously adapt to market forces, technological
innovations and internal constraints. An enterprise needs an efficient way
to make decisions about how to respond to these changing forces.</p>
  </li>
  <li>
    <p>Accountable hierarchies are the traditional Taylorist method for making
corporate decisions. Unfortunately they aren’t continously adaptive and
frequently obstruct internal collaboration to maintain power relationships,
generating a whole <a href="http://www.c2.com/cgi/wiki?OpenSpace">Anti-Pattern
Language</a>.</p>
  </li>
  <li>
    <p><a href="http://www.c2.com/cgi/wiki?OpenSpace">Open Space</a> is good for aligning
understanding, but doesn’t achieve alignment on decisions.</p>
  </li>
  <li>
    <p><a href="http://c2.com/cgi/wiki?IterationRetrospective">Retrospectives</a> work well
for consensus decisions on the scale of a scrum, but don’t scale. Scrum of
Scrums doesn’t represent a whole interdependent team so SoS retros
experience political anti-patterns including polarization, compromise and
power games.</p>
  </li>
  <li>
    <p>Similarly to Spotify, Iroquois society was structured as a matrix of
councils, not a hierarchy of accountables. Tribes grouped into longhouses,
similar to Spotify’s squads, with ancestral and generational associations
connecting people in layers across the hierarchy. These cross-cutting clan
relationships work similarly to the Spotify chapters and guilds.</p>
  </li>
  <li>
    <p>The Iroquois “great peace” lasted at least since 1400 and represented such a
sustainable and idyllic model that Europeans in North America including the
American founding fathers <a href="http://www.ratical.org/many_worlds/6Nations/EoL/chp8.html">regarded it as an
ideal</a>. The great
peace was maintained entirely by the method of unanimous consent to
reciprocal treaties.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Use a game of unanimous consent to reciprocal treaties to enable teams within
enterprises and communities to make decisions together.</p>

<ol>
  <li>As in an Open Space, individuals propose item for discussion in turn. Voting
  dots are used to amalgamate and prioritize items, and the law of 2 feet
  enables everyone to contribute to all sessions.</li>
</ol>

<ul>
  <li>
    <p>Unlike an open space, individuals identify themselves as representatives of
teams attempting to arrive at decisions to deal with their common concerns.</p>
  </li>
  <li>
    <p>Each council session is split into 3 rounds. In each round:</p>

    <ol>
      <li>Instead of just a conference backlog, employ a 6 column kanban to forge
treaties. As with any kanban, limit the amount of Work In Progress in
order to maximize total throughput. The columns of this kanban are:
        <ul>
          <li><strong>Team learnings</strong> that could be leveraged by the broader community
(Smiley face)</li>
          <li><strong>Challenges</strong> a team can’t solve for itself (Red Flag)</li>
          <li><strong>Ideas</strong> for the improvement of more teams than just one (Question
mark)</li>
          <li><strong>Treaty</strong> proposals that have gained unanimous consent of a session
and are ready for council review (Exclamation mark)</li>
          <li><strong>Proposals that have passed review</strong> and are ready for respective
team ratification at retrospectives (Circle) – initially empty.</li>
          <li><strong>Proposals that have been unanimously ratified</strong> since previous
council sessions by all represented teams (Trefoil Knot).</li>
        </ul>
      </li>
    </ol>

    <ul>
      <li>Each session attempts to either create or refine a specific output - a
  treaty proposal:
        <ul>
          <li><strong>Smiley face</strong> sessions try to come up with a treaty about how the
  community can capitalize on a specific team learning.</li>
          <li><strong>Red flag</strong> sessions try to come up with a treaty about how the
  community can organize to solve a specific team’s problem.</li>
          <li><strong>Question mark</strong> sessions review a specific treaty proposal to try
  to find a way to refactor it and the passed treaties into a consistent
  whole.</li>
        </ul>
      </li>
      <li>
        <p>Unanimity in each session is required before a treaty proposal is
  defined as “ready for review” - moved into the Exclamation mark column.</p>
      </li>
      <li>
        <p>It’s perfectly okay for session participants to horsetrade on conditions
  and trade-offs that must be satisfied before a treaty can be passed. It’s
  also okay for a treaty proposal to suggest modification or cancellation of
  some previously enacted treaty.</p>
      </li>
      <li>
        <p>At the end of each round there’s a discussion-free review. All that
  round’s “ready for review” treaty proposals are read out and moved to the
  Exclamation Mark column.</p>
      </li>
      <li>
        <p>Now any participant can move an Exclamation mark proposal back into the
  Question mark column, but by doing so that participant undertakes to run a
  new session in the next round to try to sort out whatever is worrying them
  about it.</p>
      </li>
      <li>Proposals that are not moved back into the Question mark column by any
  participant are regarded as passed and moved into the Circle column.</li>
    </ul>
  </li>
  <li>
    <p>At the end of the council session, the circled treaties affect no one. A
circled treaty must be unanimously ratified by every team – it’s presented
at each respective team retro to be considered for testing and ratification
over the period between council sessions.</p>
  </li>
  <li>
    <p>Only treaties that are unanimously ratified by all members of all teams at
their retros are enacted by the council in its next session. These are
moved to the Trefoil Knot column at the start of the session.</p>
  </li>
  <li>
    <p>There is nothing to prevent a smaller subset of teams meeting separately to
ratify on a treaty that only affects themselves.  Likewise teams that don’t
represent themselves at a council aren’t bound by treaties agreed there.
They may join a treaty in a subsequent council or they may agree to work
together by other means.</p>
  </li>
  <li>
    <p>Teams that decide to block a passed treaty - to prevent it going Unanimous
do so by turning up at the next council sessoin and moving it back to the
Question column. The council reviews the blocked treaty in due course as
it would any treaty proposal.</p>
  </li>
</ul>

<h2 id="unanimity-or-bust">Unanimity or Bust</h2>

<p>Many modern processes have tried to use unanimity and have wound up
running headlong into the <a href="https://www.sciencemag.org/content/162/3859/1243.full">tragedy of the
commons</a>. For
example the UN climate committees are hopelessly <a href="http://theconversation.com/votes-not-vetoes-a-new-way-to-cut-a-united-nations-climate-deal-24288?utm_medium=email&amp;utm_campaign=Latest+from+The+Conversation+for+9+April+2014&amp;utm_content=Latest+from+The+Conversation+for+9+April+2014+CID_4bbd0a6f6eeb3c8a3d8719978ad1547f&amp;utm_source=campaign_monitor&amp;utm_term=Votes%20not%20vetoes%20a%20new%20way%20to%20cut%20a%20United%20Nations%20climate%20deal">blocked and
compromised</a>. How did the Iroquois deal with something like that?</p>

<p>Looking through their “Great Law of Peace” they used a system of checks and
balances based on the desire people may have to keep power. It worked as
follows.</p>

<p>Each tribe represented itself via a sachem. The sachems were males chosen by
the agreement of the females of the tribe, with offices that could be revoked
if their females saw them as unfit or disrespectful of protocol. </p>

<p>There was also a special tribe of fire keepers (Onondaga) whose responsibility
ordinarily was simply to make certain protocol was followed properly. You may
think of them in a Spotify context as equivalent to the coaching guild, or
otherwise as an executive round table.</p>

<p>For any question raised to the great council - say an upstream tribe fouling
the waters of the downstream tribes - the sachems had power to decide the 
matter so long as they agreed unanimously. </p>

<p>If they didn’t, then and only then the decision fell to the fire keepers.  If
the sachems wanted to be in charge, they were motivated to find their way to
unanimous agreement. If they couldn’t, their opinion no longer mattered and
the matter fell to the fire keepers.</p>

<p>Then the fire keepers had to agree unanimously among themselves before
their decisions could be regarded as binding. If they couldn’t agree, no
decision was made. They were motivated to find unanimity because otherwise
the sachems could begin squabbling again. And that sort of thing could
disrupt the Great Peace.</p>

<p>You might think that a particularly feisty Sachem might bribe a particularly
corrupt pack of fire keepers and thereby seize absolute power. If one tried,
however, he risked expulsion along with his tribe for treason and thereby
the cessation of mutual trade and support. This doesn’t seem to have ever
happened in the history of the six nations.</p>

<p>Clever fellow that Decanawidah. Shame the UN doesn’t work it this way.</p>

<p><strong>Therefore,</strong></p>

<p>[Assume a Spotify model of tribes and guilds]</p>

<p>Teams use councils to create mutually beneficial treaties. If these teams
cannot come to agreement on a treaty, any team may call for a decision from a
council of a whole Tribe or a whole Guild.</p>

<p>If that higher council cannot reach unanimity, then the matter is forwarded to
a great council of the whole enterprise. If and only if that council cannot
reach unanimity, the amtter is decided by the the company’s chief executives.</p>

<h2 id="agile-treaties">Agile Treaties</h2>

<p>As to the form of a treaty, there’s a wonderful collection of real historical
Iroquois treaties collected by Benjamin Franklin
<a href="https://archive.org/details/indiantreatiespr00vand">here</a> derived from the
Iroquois <a href="http://www.manataka.org/page135.html">“Great Law of Peace”</a>.</p>

<p>Despite idealization by the likes of Rousseau and Franklin, Iroquois laws had
glaring inconsistencies from the standpoint of a Rawlsian <a href="http://c2.com/cgi/wiki?TheoryOfJustice">Theory Of
Justice</a>. Privileging the five
Iroquois nations over other tribes caused inequities that eventually ended the
rule of the confederacy. There were also rules of “Peace” that don’t conform
with modern notions, such as, </p>

<blockquote>
  <p><em>If refusal steadfastly follows, the War Chief shall let the bunch of white
lake shells drop from his outstretched hand to the ground, and shall bound
quickly forward and club the offending chief to death”.</em></p>
</blockquote>

<p>Nevertheless, Iroquois treaties seem to fit into <a href="">story normal form</a> adorned
with <a href="">Behavior Driven Development</a> scenarios. To bring them in line with
Rawls we’d add these constraints:</p>

<ul>
  <li>
    <p>To observe the <a href="http://c2.com/cgi/wiki?VeilOfIgnorance">VeilOfIgnorance</a>, no
treaty is permitted to refer to a specific individual or group of people by
name. Instead the treaty must refer to people and groups in terms of their
roles in relationships.</p>
  </li>
  <li>
    <p>In order to preserve reciprocity, a treaty may not obligate individuals or
groups that have not unanimously agreed to take part in it. This is the
essence of the most famous of the Iroquois treaties, the <a href="http://www.wampumchronicles.com/tworowwampumbelt.html">2 row
wampum</a> that was the
basis of Gene Roddenberry’s famous fictional concept of non-interference.</p>
  </li>
  <li>
    <p>A treaty among a group of peers may not prevent the formation of a treaty
among some subset of them. Or if the peers are groups, some subset of their
members. This is what the Iroquois “Great Law” means when it says that each
of the members must still tend their own fire - that they keep their
respective autonomy. The only autonomy they ever surrender is by unanimous 
consent to a treaty.</p>
  </li>
</ul>

<h2 id="brightening-the-chain">“Brightening The Chain”</h2>

<p>The Iroquois used 3 metrics to describe the health of their tribes and
nations, which they called <strong>the Fire, the Path and the Chain</strong>. These devices
were encoded into the wampum belts that signified treaty proposals, council
occasions and agreements. The three metrics seem to apply equally well to
the state of health of Agile teams in a modern enterprises so we’ll dig in
here in some depth.</p>

<p><img src="/images/iroquois.png"></p>

<p><strong>The Fire</strong> indicates the quality of internal self-organisation of a tribe or
guild.  Iroquois chiefs were charged with keeping the fire lit and the
fireplace clean in much the same way as Scrum Masters are charged with
keeping team meetings prompt and Lean black belts value the cleanliness and
order of a manufacturing workplace. When a tribe suffered attrition due to
warfare, marriage or aging, its fire was said to burn low, and this was a
matter for resolution at a “Condolence Council”, which was basically an
agreement among longhouses or tribes to re-balance their membership, territory
and/or resource profile.</p>

<p><strong>The Path</strong> indicated the channels whereby the tribal unit interacted with
its peers. Forest diplomacy entailed a regular cycle of meetings involving
treaties, condolence, trading, inter-marriage and reciprocal gift-giving known
as “potlatch”.  This last being very similar to modern conferences, lean
coffees, open spaces and meetups. A commonplace subject of treaties occurred
when a tribe’s <em>path</em> was obstructed by physical or political barriers,
including but not limited to the movement of tribal borders through warfare.</p>

<p><strong>The Chain</strong> indicated the external integrity of relations between a tribal
unit and its peers. Unlike modern legal systems, Iroquois treaties were held
to naturally decay over time, requiring continuous re-appraisal, refactoring
and re-affirmation to maintain their effect. Treaty relations that had decayed
were said to have rusted, where those still in force were iron, and those
recently re-affirmed were silver. Under conditions of disruptive market
change, technological innovation and internal refactoring, it is a given that
enterprises should revisit their internal assumptions and agreements in a
similar way, and this is the intent of the Iroquois Council pattern. </p>

<p>The chain began with a single family. Faced with an unforgiving environment,
Iroquois families could not be maintained in the isolated, nuclear form with
which we’re most familiar in the West. Instead they took the form of line
marriages where a series of exogamous marriages among adults drawn from
different lineages occupied a single dwelling called a longhouse, an
arrangement Robert Heinlein explores in his “The Moon is a Harsh Mistress”.</p>

<p>While the Spotify model draws on this tradition, the Iroquois were more formal
about chain structuring than Spotify, with each tribe forming a link with two
peers modeled after the row of families in the Longhouse.</p>

<p>Brightening the Chain therefore began at the level of a single tribal unit,
then a council involving two further tribal units. Thus chains brightened
by councils occurring at all levels, with each level maintaining pure autonomy
from the one above it, as limited only by treaties.</p>

<h2 id="the-councils-of-github">The Councils of Github?</h2>

<p>An obvious question is how this kind of system can be enacted in a modern
online social network, specifically github. It is fair to think of a github
pull-request as a treaty proposal, but there is no equivalent of a
council system on github today. Instead collaborators either work
together in a single repository, effectively functioning as a single tribe, or
assemble a feudal hierarchy of forks, sometimes hubbing on one base, or in
larger projects constituting an informal management hierarchy. </p>

<p>Work is going on within the Agile:TNG group to create a protocol, eventually
to be automated, whereby a system of branches can represent the different
states in the council kanban, with a central repository pulling from
forks as governed by the council protocol described above. </p>

<p>A key challenge to be surmounted in effecting this is the protocol to
apply to the distinction between a fork and a collaborator where the latter
signifies a trusted and invited party but the former may represent an
untrusted, uninvited or even inimical one. </p>

<p>In general github, as a do-ocracy, provides straightforward social methods for
participants to cross from the status of fork to collaborator, but it remains
to arrange a council protocol that uses this as a channel.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Goose In The Bottle]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/27/the-goose-in-the-bottle/"/>
    <updated>2014-03-27T11:31:11+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/27/the-goose-in-the-bottle</id>
    <content type="html"><![CDATA[<p>Take a newly hatched baby goose. Poke it down the neck of an empty saki bottle
and feed it till it’s grown. Without killing the goose or breaking the bottle,
how do you get the goose out of the bottle?</p>

<p><img src="/images/gib.png"></p>

<!-- more -->

<p>Let’s start with the problem and the solution in context and leave the riddle
till after.</p>

<h2 id="pattern-in-portland-form">Pattern in Portland Form</h2>

<ul>
  <li>
    <p>A team can only change as quickly as its most conservative member. A program
of component teams or an organization of silos can only change as rapidly as
its most conservative part.</p>
  </li>
  <li>
    <p>Every team has its progressives. If they’re empowered, they foster
change. If they’re disempowered, they’re still eager to take part in change.</p>
  </li>
  <li>
    <p>Middle managers account for costs and apologise for slippage. They’re used
to that. Telling them to account for ROI and taking away their apologetic
method causes the infamous <a href="">Frozen Middle</a> anti-pattern.</p>
  </li>
  <li>
    <p>Taking a team, program or organization part-way Agile offers questionable
benefit and creates risks of failure and reversion to tradition. Taking part
of it part-way reduces the benefit and amplifies the risks.</p>
  </li>
</ul>

<h2 class="no_toc" id="therefore">Therefore,</h2>

<ul id="markdown-toc">
  <li><a href="#pattern-in-portland-form">Pattern in Portland Form</a></li>
  <li><a href="#zen-riddles">Zen Riddles</a></li>
  <li><a href="#the-coach-in-the-bottle">The Coach in the Bottle</a></li>
  <li><a href="#grow-a-better-gosling">Grow a Better Gosling</a></li>
  <li><a href="#the-ugly-duckling">The Ugly Duckling</a></li>
  <li><a href="#will-it-zen">Will it Zen?</a></li>
  <li><a href="#but-">But …</a></li>
</ul>

<p>Don’t attempt to make an enterprise become Agile. Nor a program, nor a
project, nor a team. </p>

<p>Instead, create a new cross-functional end-to-end feature based Agile
capability uncompromised by existing ways of working.</p>

<p>Staff it with progressives And grow it with the support of a coordination
scrum of lead doers from the old organisation with the blessing of senior
management.</p>

<p>Let it leverage the quickest dirtiest deployment pathway but make it
accountable for its own quality.</p>

<p>Add product owners focused on maximising ROI per release rather than
minimising variance to baseline.</p>

<p>Put in place bottom-line metrics to demonstrate that the throughput, quality
and ROI of the new capability exceeds the performance of the old.</p>

<p>Never ask anyone to join the new capability, but let the best people do so,
backfilling the old organisation if necessary, letting it diminish otherwise.</p>

<h2 id="zen-riddles">Zen Riddles</h2>

<p>The Goose in the Bottle is what the Japanese Zen tradition calls a <em>koan</em>, a
kind of riddle for personal transformation. It’s not supposed to have a
rational answer. </p>

<p>Solving it is supposed to take sweat. You may have to travel. Consult wise
people. Spend days in silent meditation. Raise children and learn from them.
Grok out.</p>

<p>You’re a busy person, however, and this is about Agile, not Zen, so I’ll just
give you the answer so we can move on.</p>

<h2 id="the-coach-in-the-bottle">The Coach in the Bottle</h2>

<p>I first read the goose koan as a young man. I puzzled over it for weeks but
then set it aside.  Who has time for a riddle with no answer? I thought it
could have no practical importance and I had no shortage of more interesting
questions to worry about.</p>

<p>Until, as a coach, I became a goose. </p>

<p>I accepted a role transforming a business unit of the largest Australian
insurer. A year earlier I had successfully transformed an insurance BI group
of about seventy. Now I had three hundred staff stuck in silos and component
layers, with myself the sole coach charged with getting them out. </p>

<p>This insurer had attempted ad-hoc Agile twice. Its first project went cowboy,
shipping 5 months late with 1200 defects and zero documentation. The second
project used Agile to fail fast, demonstrating its business case didn’t stand
up. For which learning it was blamed and shamed, and its excellent
Scrum-master got handed her hat.</p>

<p>I naturally expect to walk into this kind of thing. A coach is only engaged
when management strikes a problem it can’t solve without a coach. You expect to
walk into trouble, or else you won’t be there in the first place. </p>

<p>Per the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">seven samurai</a> I
set about assessing and aligning senior business and delivery management and
also technical leads per silo.  That’s when I hit the wall. People were happy
to engage with me, but I was getting the same conversation over and over. Six
times in a week according to my diary.  </p>

<p>“I completely agree with you,” they said. “Agile is great. If we could do
it properly, life would be much better. But you’ll never get <em>them</em> to do it.”</p>

<p>They’d point out another team. I would talk to that team and <em>they</em> would say
the same about further teams, who would point back at teams I’d already spoken
to. </p>

<p>It wasn’t blamestorming - it was respect for their conservative co-workers.
Each team has conservatives and progressives, and no team can change faster
than its most conservative member. The progressives had learned that through
bitter experience.</p>

<p>That was the bottle, and I was the goose. </p>

<h2 id="grow-a-better-gosling">Grow a Better Gosling</h2>

<p>Some mornings I woke in a cold sweat. I realised we were all geese in some
way. The managers who hired me, the progressives who wanted change, but
the conservatives too. They all made up each others’ bottle.</p>

<p>In my previous role, on a smaller scale and with sufficient executive support,
I had been able to break a bottle. But this one was too strong. I wasn’t going
to kill the goose by quitting either. So now I really needed an answer … how
did those old Zen guys get their damned goose out of their damned bottle?</p>

<p>There’s a lovely and controversial Zen book called <a href="http://www.amazon.com/The-Sound-One-Hand-Answers/dp/0465080782">The Sound of the One
Hand</a>, which
poses answers to 281 Zen Koans. It offers the following for this one:</p>

<p><strong>“It’s out!”</strong></p>

<p>I found that answer a little unhelpful. In fact I have yet to derive any
assistance from that book in regard to any koan. Which is to say it’s a
really great zen book and I highly recommend it.</p>

<p>In a flash, enlightenment occurred, that experience Zen students spend
their time desperately attempting to attain. Or if it wasn’t enlightenment, it
would do until enlightenment came along.</p>

<p><em>Take a baby goose, a newly hatched gosling. Feed it outside the bottle until
it’s full grown. Feel your heart swell as you watch it flying away.</em></p>

<p>This is to say, don’t attempt to make an enterprise become Agile. Nor a
program, nor a project, nor a team. Instead, create a new cross-functional
end-to-end feature based Agile capability for the enterprise uncompromised by
any existing ways of working. And then grow it.</p>

<p>Feed it a budget, requirements, and team members drawn from the progressive
people you’ve assessed in interviews. Form a coordination scrum of stream
leaders from the old organisation, empowered by senior management not to
change how the old organisation works, but just to support the new capability.</p>

<p>Let the new capability leverage the quickest dirtiest deployment pathway that
exists for hotfixing. Make them accountable for their own quality and go whole
hog on virtual environments and test-first automation. Use a DVCS to manage
integration between old and new rationally. Add  product owners focused on
maximising ROI in the backlog rather than minimising variance to baseline.</p>

<p>Coach this tiny new capability to produce just the minimum amount of
documentation necessary to satisfy their own operational members. Don’t call
it a goose, but something completely innocuous, “the small changes team” or
similar.</p>

<p>Put in place bottom-line metrics to demonstrate that the throughput, quality
and ROI of the new team far exceeds the performance of teams in the jugged
goose.  Promote and leverage their wins to gain them more requirements from
the business.</p>

<p>Never ask anyone to join the new capability, but let the best people do so,
backfilling the old organisation if necessary, letting it diminish otherwise.</p>

<p>That’s how I coached. Over the course of a year that first gosling grew
organically, splitting and splitting again. Business people saw concrete
benefit and flocked together. The coordination forum used this as a model to
create similar goslings. They grew fat and laid golden eggs …</p>

<h2 id="the-ugly-duckling">The Ugly Duckling</h2>

<p>Two years later the insurer’s senior management turned up at Australia’s
largest Agile conference to trumpet their wins. Still I wondered - is this a
reproducible pattern? I soon had a chance to find out. </p>

<p>There’s a very large bank, the twentieth largest corporation in the world.
Long before that insurance gig I’d been engaged as a coach to take a couple of
its projects Agile. I didn’t use the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">seven
samurai</a> then, just got
stuck in and went for it.</p>

<p>While we made progress we were stopped by unaligned senior management when
they found out what we were up to.  My coaching sponsors were none too pleased
that I hadn’t addressed alignment before moving onto adoption. The
experience turned ugly and I never expected to be invited back. </p>

<p>Well, never say never. Six years later I was re-engaged by the same senior
manager who’d handed me my hat. We had both learned some important things in
the interim, and he had an ad-hoc Agile project in the online division that
was struggling. </p>

<p>This project was for a ground-breaking product, but it was perceived to have
under-delivered its first release with severe quality problems. I found all
manner of waste, stress, compromise and misalignment. But there was one great
advantage. This product was regarded as special. That little team was already
out of the bottle.</p>

<p>Over the next 18 months I aligned the rest of the business unit to support the
new capability and mentored the team directly to consistently exceed their
metrics release on release. The product won a dozen external awards and the
team received the Group CIO award for best project in the bank. </p>

<p>It wasn’t all me of course - the team members were all-stars. And it was never
a perfect project. There were hard yards to make. Nevertheless, realignment of
delivery pipeline, team structure and environment management that resulted
became a model to be leveraged. First within the online program, then within
its business unit, and then throughout the bank.</p>

<p>Sorry, but I can’t resist talking about the waterfowl method here …
comparing Agile in the bank with Aesop’s <a href="http://hca.gilead.org.il/ugly_duc.html">ugly
duckling</a> who grew up …  and then
everyone saw it as a beautiful swan …</p>

<h2 id="will-it-zen">Will it Zen?</h2>

<p>In a <a href="http://alistair.cockburn.us/The+Goose+in+the+Bottle">conversation with Alistair
Cockburn</a> I explained my
experience with this Goose In the Bottle pattern. He worried that I had “[broken]
the question’s presupposition by cheating and getting a new goose, hence not answering
the question, but still ending up a free goose.”</p>

<p>I wanted to point Alistair at the <a href="http://www.markability.net">laws of form</a>
but I didn’t get time. Of course it requires only a moment’s thought to
realize there can never be a real goose in a real bottle. If you did it
to a real gosling, it would perish long before it grew old enough to poke
its head out. Our goose was always a metaphor. </p>

<p>On the zen of it, the moment you hear this koan some part of you becomes the
goose, and the koan your bottle. Like all koans, to get out you have to change
who you are. </p>

<p>The bottle doesn’t break - the old organisation never changes. The goose doesn’t have
to be killed - neither in the bottle nor out of it. But as you feed the goose outside
more requirements and more budget and more people, soon there is no goose left in the
bottle. Nor a bottle for it to be in. In other words, <strong>it’s out!</strong></p>

<h2 id="but-">But …</h2>

<p>What if your organisation can’t create a truly cross-functional, end-to-end team? What
if you can’t get executive support to resolve  dependencies on other non-agile areas
of the business? Or what if resolving those dependencies takes longer than your
stakeholders can wait for you to demonstrate a win?</p>

<p>As an example, in many financial organisations, everything may depend on legacy
systems which never ran in an agile or CD way. These may be controlled by stakeholders
who won’t consider allowing anything agile near them.  To duplicate those would mean
building an entire new bank.</p>

<p>In these cases, other adoption patterns may need to be needed instead of or as well as
the Goose in a bottle. These include:</p>

<ul>
  <li><a href="">Inversion of Ownership</a></li>
  <li><a href="">Lean before Agile</a></li>
  <li>… more to come?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Seven Samurai]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/21/the-seven-samurai/"/>
    <updated>2014-03-21T21:53:27+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/21/the-seven-samurai</id>
    <content type="html"><![CDATA[<p>Enterprise Agile is a phrase that’s bandied about a lot.  What is it, why would you
want it, and how do you get it? The Seven Samurai answers those questions.</p>

<p><img src="/images/Agreement.jpg"></p>

<!-- more -->

<p>In the ever-accelerating marketplace it’s common sense that businesses must
continously adapt to avoid being outcompeted by others. On a small scale the process
of adaptation can be dealt with by regular Scrum retrospectives and the Demming cycle.
A significant program or business unit, however, cannot adapt piece-meal or it risks
the Lean sins of stress, irregularity and waste.</p>

<ul id="markdown-toc">
  <li><a href="#the-patterns">The Patterns</a>    <ul>
      <li><a href="#continuous-assessment">Continuous Assessment</a></li>
      <li><a href="#continuous-alignment">Continuous Alignment</a></li>
      <li><a href="#continuous-analysis">Continuous Analysis</a></li>
      <li><a href="#continuous-awareness">Continuous Awareness</a></li>
      <li><a href="#continuous-architecture">Continuous Architecture</a></li>
      <li><a href="#continuous-adoption">Continuous Adoption</a></li>
      <li><a href="#continuous-acceleration">Continuous Acceleration</a></li>
      <li><a href="#continuous-autonomy">Continuous Autonomy</a></li>
    </ul>
  </li>
</ul>

<p>Let’s define enterprise agility in terms of continuous adaptation. Adaptation of
internal structure and process as delivery capabilities evolve.  Adaptation of
external value streams to customer experiences, market forces and technological
innovations.  Adaptation of these two to each other to maximise product-market fit and
ROI. </p>

<p>Adaptation obviously applies during process transformation, but for enterprise agility
continous adaptation must continue even after new process elements are bedded down.
The Seven Samurai pattern language provides a framework for doing that.</p>

<h2 class="no_toc" id="spoilers">Spoilers</h2>

<p>You don’t need to see the Kurosawa film to understand the pattern language, but its
patterns necessarily involve spoilers so you may want to see the film first.  The
<a href="https://www.youtube.com/watch?v=zNqQXC8Tv8U">restored version</a> is available through
the usual streaming sites so we’ll leave the question of spoilage to you, gentle
reader. </p>

<h2 class="no_toc" id="the-film">The Film</h2>

<p>The Seven Samurai concerns a defenceless village that hires a group of down-at-heel
samurai as protection against a horde of ruthless bandits. The samurai efficiently
transform the village into a self-organising force to destroy the bandits and take
ownership of its own destiny. </p>

<p>Our Western image of samurai as armored warriors is very different to their depiction
here. Kurosawa’s samurai are really seven coaches, each embodying a distinct strategic
pattern, each reinforcing the others so that the whole becomes greater than the sum of
its parts.</p>

<p>Why eight patterns when there are only seven samurai? The last pattern represents the
end of the film where the village takes ownership of its own transformation and
external coaching becomes irrelevant. Per the final line of the film, it’s the village
that wins, not the samurai.</p>

<hr />

<h2 id="the-patterns">The Patterns</h2>

<h3 id="continuous-assessment">Continuous Assessment</h3>

<p>Motivate Agile in terms of continuous evaluation of bottom line metrics.</p>

<p><img src="/images/Assessment.png" width="400"></p>

<ul>
  <li>
    <p>Many organisations embark on Agile ad-hoc, at grass roots level, without clearly
understanding real drivers, benefits and challenges.</p>
  </li>
  <li>
    <p>Enterprise architecture and business constraints can prevent Agile transformation
from succeeding. Many enterprises are not ready to commit to addressing these
constraints.</p>
  </li>
  <li>
    <p>Teams, programs and business units may begin a transformation without realising
their organisation isn’t ready, and this in itself may lead them to fail.</p>
  </li>
  <li>
    <p>Prominent failures may forestall further transformation, creating the perception
that Agile “might work elsewhere but can’t work here”.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Interview stakeholders to construct preliminary value stream maps of delivery and
business activities. Validate these by attending the represented activities and
instrument cumulative flow metrics for them.</p>

<p>Represent these metrics as diagrams to motivate urgent concern about waste, stress,
irregularity and misalignment. Determine critical numbers that would represent
achievable Agile improvements to throughput, quality and ROI.</p>

<p>Construct a preliminary plan detailing targets for these critical numbers with a draft
timeframe and budget necessary to generate the Minimum Viable Agile Capability
(“MVAC”) that would meet those targets on a small scale.  Assess maturity of existing
mission-critical teams using the <a href="http://comparativeagility.com">Cohn’s Comparative Agility
metrics</a>, and compare with the MVAC.</p>

<hr />

<h3 id="continuous-alignment">Continuous Alignment</h3>

<p>Enrol decision makers as Product Owners in an iterative “Strategic Scrum” that meets
at least weekly.</p>

<p><img src="/images/Alignment.png" width="400"></p>

<ul>
  <li>
    <p>Component silos, matrix management, waterfall baselines and phase gates, project
based cost accounting and middle management hierarchies can make it difficult for an
organisation to host and maintain Agile feature teams. </p>
  </li>
  <li>
    <p>There are further alignment issues inherent in a transformation program.
Progressive/conservative antagonism, disagreements over change scope and ownership,
confusion over metrics and trade-offs, as well as the simple
<a href="http://www.cavcomp.demon.co.uk/halloween/fuddef.html">FUD</a> of a reaction to change
… </p>
  </li>
  <li>
    <p>Enterprise misalignments are commonly associated with the anti-patterns we call
<a href="">enterprise smells</a>.</p>
  </li>
  <li>
    <p>Ad hoc Agile teams can’t address such alignment issues because they don’t have
adequate executive support to change the process of other teams or the way they
interoperate.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Induce progressive senior executives to meet regularly in a collaborative “Strategic
Scrum” whose mission is product ownership for the transformation.  </p>

<p>Ideally, execs are motivated to participate by pre-existing C-level support.  Such
support is seldom reliable at the start of a transformation, however, and it may be an
urgent priority of the Strategic Scrum to leverage the output of the Assessment
pattern to demonstrate sufficient drivers to establish funding and ownership of a
transformation initiative.</p>

<p>The Strategic Scrum provides a way for the executives to immediately experience agile
for themselves and <a href="http://www.c2.com/cgi/wiki?EatYourOwnDogfood">“eat their own
dogfood”</a>. Over the course of the
transformation it will provide a one stop shop into which coaches and organisational
change agents report progress, and change its membership and form as required to fit
the evolving agile enterprise.</p>

<p>An important first step for the Strategic Scrum is selecting one or more 
alignment patterns to form the initial stage of the transformation:</p>

<ul>
  <li><a href="http://agiletng.org/2014/03/27/the-goose-in-the-bottle/">Goose in the
Bottle</a></li>
  <li><a href="">Inversion of Ownership</a></li>
  <li><a href="http://www.slideshare.net/vmysla/scrum-at-spotify">Tribes and Guilds</a></li>
  <li><a href="http://scaledagileframework.com/investment-themes/">Stream Funding</a></li>
  <li><a href="">Lean before Agile</a></li>
  <li>… </li>
</ul>

<p>See also <a href="http://agiletng.org/2014/04/21/xscale/#feature-points">Behavioural Product
Planning</a>, <a href="">Feature Based
Teams</a> <a href="http://www.kotterinternational.com/our-principles/changesteps/step-2">Guiding
Coalition</a>,
<a href="">Influence the Influencers</a></p>

<hr />

<h3 id="continuous-analysis">Continuous Analysis</h3>

<p>Form a Coordination Scrum from coaches and delivery and operational stream
leads that meets at least weekly.</p>

<p><img src="/images/Analysis.png" width="400"></p>

<ul>
  <li>
    <p>Once an enterprise has assessed its as-is state and aligned executives
to support its transformation, there is an immediate desire for a detailed
“to-be” vision and a plan to get there. This is often called an OCM
(“Organisation Change Management”) plan. </p>
  </li>
  <li>
    <p>Under time pressure, the people accountable for OCM may feel safest picking a
one-size-fits-all framework and idealistic “to-be state” vision. This is
a waterfall approach to transformation - what XP used to call “Big Design 
Up Front” or “BDUF”. We call it “Big Change Up Front” or BCUF.</p>
  </li>
  <li>
    <p>Sounds nasty but why is it actually bad? BCUF focus on vision and
framework maximises WIP and results in dysfunctional transition states where
delivery and business metrics consistently worsen. This obviously raises
risks and can cause executive support for transformation to tail off.</p>
  </li>
  <li>
    <p>OCM plans may also be applied in a non-collaborative “they change, we
don’t” mindset. If change agents are not also change recipients they are
insensitive to the wisdom of the doers causing widespread <a href="">FUD</a> and politics.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>To make an enterprise Agile, we emphasise that change planning must be Agile.  What’s
needed isn’t a precise vision but an iterative collaboration cycle for a “Coordination
Scrum” that begins with just the  existing stream leads. That’s to say lead doers, not
middle-management deciders, along with experienced coaches to provide insight on
tactical concerns over the course of the transformation.</p>

<p>The primary accountability of the Coordination Scrum is enabling the new agile
delivery stream to efficiently integrate with existing component streams. This work is
represented on an <a href="">Agile Transformation Roadmap</a> from which coaches derive a
<a href="">Coaching Kanban</a> to prioritise and track their coaching activities per team.
Cumulative flow of this kanban is iteratively reviewed by the transformation product
owners of the Strategic Scrum.</p>

<hr />

<h3 id="continuous-awareness">Continuous Awareness</h3>

<p>Organise change recipients into a system of <a href="http://www.slideshare.net/vmysla/scrum-at-spotify">Guilds and
Tribes</a>. Represent each tribe at
the weekly Coordination Scrum.</p>

<p><img src="/images/Awareness.png" width="400"></p>

<ul>
  <li>
    <p>Change plans usually begin with training for the doers on new ways of
working.  This includes role-specific skills and education on the tools
necessary to new roles.</p>
  </li>
  <li>
    <p>Awareness as a process isn’t merely a matter of training, but ongoing
agreement about ways of working, For the transformation to become
sustainable, doers must own and direct the change stories themselves.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Organise people of common capabilities into “Guilds” and people collaborating on
common business and delivery streams into “Tribes” or “Streams”. Let coaches work with
these teams to plan and effect change using a weekly cycle of Scrum
<a href="http://fabiopereira.me/blog/2008/11/23/goal-driven-retrospective/">retrospectives</a>
and, at scale, <a href="http://agiletng.org/2014/04/02/iroquois-council/">stream councils</a>. </p>

<p>These consensus protocols spread awareness of drivers and methods for new ways of
working, and feed decisions, agreements and concerns back into the Coordination Scrum. </p>

<p>Coaches use role-playing games to raise Guild and Tribe awareness of Agile methods and
their respective parts in the transformation.  The Coordination Scrum also works with
the Strategic Scrum to obtain support to empower tribes and guilds to make their own
decisions to enable rapid change.</p>

<p>Once they’re up to speed, add Guild and Tribe representatives to the Coordination
Scrum. At scale, the Coordination Scrum may evolve into an <a href="http://agiletng.org/2014/04/21/xscale/#continuous-adaptation">Enterprise
Council</a></p>

<hr />

<h3 id="continuous-architecture">Continuous Architecture</h3>

<p>Guilds meet weekly to institute technical enablers for feature based delivery.</p>

<p><img src="/images/Architecture.png" width="400"></p>

<ul>
  <li>
    <p>Technical enablers and structural transformations must be adopted by 
change recipients to enable new ways of working. </p>
  </li>
  <li>
    <p>Change patterns promoted by the Coordination Scrum have to be grounded and
tailored into stories that fit the immediate necessities of the as-is
enterprise. </p>
  </li>
  <li>
    <p>Change stories that requires anyone to put down their tools and stand idle
will be immediately opposed by the guild system and business stakeholders. </p>
  </li>
  <li>
    <p>Collaborative coaching is necessary to assure change recipients are ready
and motivated to work in the new way</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Prioritize technical enablers in the Coaching Kanban including but not limited
to:</p>

<ul>
  <li>work-management and knowledge-management tools </li>
  <li>test data fixtures and service mock objects</li>
  <li>BDD tooling and integration of same into dev workflow</li>
  <li>virtual environments sufficient for Continuous Delivery</li>
  <li>version control systems suitable for distributed integration.</li>
</ul>

<p>At an enterprise level, Guilds stage the structural alignment patterns
determined by the Strategic Scrum, assure existing component teams are primed
to support if not adopt the new ways of working, and that scarce technical
resources or SMEs are adequately available for new delivery capabilities to
come on line.</p>

<p>At first guilds adopt, specialise, adjust and refactor architectural patterns
iteratively as they gain experience with the benefits and challenges.  As the Agile
capability grows, however, guilds naturally split into chapters per tribe, each of
which is empowered to make these autonomous decisions for its tribe. As this occurs
each chapter will be represented at its own stream council, and Guild meetings
may become less frequent.</p>

<hr />

<h3 id="continuous-adoption">Continuous Adoption</h3>

<p>Coaches track transformation stories in a coaching kanban and report weekly to
coordination and strategic scrums.</p>

<p><img src="/images/Adoption.png" width="400"></p>

<ul>
  <li>
    <p>Coaching shepherds product planning and delivery teams through the same
Samurai patterns as it does for the enterprise, just on a smaller scale.</p>
  </li>
  <li>
    <p>A well formed transformation plan involves a backlog of <a href="">Transformation
Stories</a> motivated by drivers identified by <a href="">Operational Product Owners</a>
from the Strategic Scrum.  These stories should have the <a href="">INVEST</a>
properties and be expected to demonstrate value by improving
<a href="#Assessment">Assessment</a> metrics. </p>
  </li>
  <li>
    <p>ROI for Agile transformation is maximized when transformation stories are
detailed and delivered iteratively, minimizing <a href="">Work In Progress</a>.</p>
  </li>
  <li>
    <p>Value delivery begins as the <a href="">Product Planning Scrum</a> builds a
breadth-first product roadmap and an initial product backlog along with a
<a href="">Steel Thread</a> sufficient to commence <a href="">Continuous Delivery</a> of stories.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Adoption provides coaching essential to getting functional scrums up to speed.
The goal of coaches is always to demonstrate and de-hub, transfrerring
accountability to the actual doers as soon as they’re comfortable.</p>

<p>Coaches co-chair meetings, clarify role-specifics, identify misunderstandings
and impediments, configure workflows and knowledge structures, and assure the
team’s technical toolset is ready for continuous delivery. They also marshall
metrics and team-member testaments into case studies to support Acceleration.</p>

<hr />

<h3 id="continuous-acceleration">Continuous Acceleration</h3>

<p>Use consensus protocols to iteratively re-energise the tranformation.</p>

<p><img src="/images/Acceleration.png" width="400"></p>

<ul>
  <li>
    <p>As agile metrics make productivity and quality gains and challenges
transparent, management focus shifts from “how to account for slippage” to
“how to improve ROI”. </p>
  </li>
  <li>
    <p>Broken collaboration cycles, structural problems, and <a href="">muda-mura-muri</a>
often occur without the enterprise properly understanding or addressing them. </p>
  </li>
  <li>
    <p>Decision makers may say that the transformation has “hit a
plateau” or experiences pitfalls. They may feel <a href="">FUD</a> about the way ahead.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Re-energize the transformation by promoting consensus mechanisms to capitalize
on wins, address root causes of problems, and refocus on improving the
critical numbers.</p>

<p>Coaches inspect and assure collaboration fundamentals, work with the
Coordination Scrum to address structural issues, and facilitate <a href="">open
spaces</a>, <a href="">Iroquois Councils</a>, <a href="">lean coffees</a> and <a href="">scrum retros</a> within
guilds and tribes.</p>

<hr />

<h3 id="continuous-autonomy">Continuous Autonomy</h3>

<p>Refactor the Transformation Roadmap to leverage new capabilities.</p>

<p><img src="/images/Adaptation.png" width="400"></p>

<ul>
  <li>
    <p>Agility doesn’t merely improve productivity and quality metrics. </p>
  </li>
  <li>
    <p>New delivery capabilities and new methods of reflection and collaboration
enable qualitative improvements in the way an enterprise organises, grows,
positions, sells and delivers into its marketplace. </p>
  </li>
  <li>
    <p>Such new capabilities require new program support that is not borrowed piece-meal
from other value streams.</p>
  </li>
</ul>

<p><strong>Therefore,</strong></p>

<p>Capitalise on these improvements by focusing the Strategic Scrum on
differences between the original <a href="">Agile Transformation Roadmap</a> and the
emergent reality. </p>

<p>Gauge these differences with Continuous Assessment metrics and refactor the
transformation roadmap accordingly. Consider new ways to integrate internal services,
leverage new technologies, form new product lines and access new market segments. Each
of these needs to be supported either by creating a new autonomous tribe, or by
assigning the accountability to an existing autonomous tribe.</p>

<p>Use <a href="">Release Refactoring</a> to determine which of these initiatives offer the maximum
benefit to existing value streams, and over what timeframes. Treating the existing
value streams as customers for new capability, let representatives of each determine
the proportion of their revenues they’re willing to pay for the newly available service
including any new tribes or squads that may be required to field the new capabilities.</p>

<p>The more often the strategic scrum can review these things, the faster its enterprise
can adapt.</p>

]]></content>
  </entry>
  
</feed>
