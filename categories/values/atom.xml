<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Values | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/values/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-30T21:58:35+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Problem With Projects]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/13/product-funding/"/>
    <updated>2014-04-13T20:15:15+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/13/product-funding</id>
    <content type="html"><![CDATA[<p><img src="/images/nails.png" width="400"></p>

<p>When all you have is a hammer, every problem looks like a nail.  When all you
have is a project management methodology, everything looks like a project. </p>

<!-- more -->

<p>Most organisations have become very project focussed. Everything is a project.
New release of software – project. Some process change – project. That’s
great. Projects are good. They are certainly better than the ad-hoc approach
we had before projects. But projects do have some drawbacks.</p>

<p>To work out what the drawbacks are, we need to look at what a project is. A
project is defined (by the PMI who should know) as something that has a
defined scope, a defined start and a defined end date.  So projects are finite
in length. Anything without an end date isn’t a project, it’s business as
usual.</p>

<p>This defined end date is where the problem with projects lies. In reality,
most of the things we treat as projects aren’t really projects. They have no
real end date. Let’s take software delivery as an example. A company develops
a product, let’s call it “Wonder Widget”. They want to release a new version
(WW 2.0) so they start a WW2.0 project with an end date that matches the
desired release date. When the release date is reached, the project team is
disbanded. Then when they want to release WW2.1, they start up the WW2.1
project and so on. Sound familiar? The industry does this all the time. So
what’s the problem?</p>

<p>The problem is that these aren’t really separate pieces of work. Development
of Wonder Widget doesn’t stop when 2.0 is released; it continues. But in a
project-focussed world, the team that developed 2.0 is not necessarily the
same as the team that develops 2.1. Project teams have a finite life. Some of
the key members may be the same but many will be off on other projects (Super
Service 3.5) so the new team has to learn about Wonder Widget from scratch.</p>

<p>Even worse, the Wonder Widget 2.0 team may have left things in a bad state. We
all know how this happens - schedule pressure near the end of a project. The
team feels stressed. There are still new features to deliver. Other things
start to slip. Like testing and documentation and code quality. All the things
that will make life really hard for the 2.1 team.  The 2.0 team won’t be
judged on how clean they leave things for 2.1, or on how much technical debt
they accrue. They will be judged on how successful 2.0 is – how many features
it has, how well it sells. Everyone knows that 2.1 will have a hard time but
hey, that’s their problem. 2.0 will be a great success.</p>

<p>Sound familiar? </p>

<p>The problem with projects like this is that they aren’t really projects.</p>

<h2 id="therefore">Therefore</h2>

<p>Treat Product development as a continuous activity. </p>

<p><img src="/images/zipper.png"></p>

<p>One release of a product shouldn’t mess up the organisation’s ability to
deliver the next release. What we need is a Product focus rather than a
Project focus. The team shouldn’t be the 2.0 team, they should be the Wonder
Widget team. They should be responsible for all the releases of the product.
They should flow from one release to the next as a stable team.</p>

<p>Quite obviously this removes the learning stage from the beginning of each
release but more importantly “that’s their problem” suddenly becomes “that’s
our problem”. The team now has an incentive to keep quality high. This flows
on to other organisational benefits like more predictable releases (as teams
are’t blindsided by technical debt left behind by other teams rushing to
finish).</p>

<p>Similarly for change management projects. Running change management as a
project is a great way to ensure that the change fades away as soon as the
project is finished. Change management is ongoing, with no real end date.</p>

<p>Projects are fine for things that are actually projects. But let’s stop
treating everything like one.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A:TNG Values]]></title>
    <link href="http://Agile-TNG.github.io/2014/03/10/4-new-values/"/>
    <updated>2014-03-10T09:43:28+11:00</updated>
    <id>http://Agile-TNG.github.io/2014/03/10/4-new-values</id>
    <content type="html"><![CDATA[<p>By working Agile and helping others do so we have come to value:</p>

<ul>
  <li><strong>Consensus games over accountable hierarchies</strong>  </li>
  <li><strong>Extreme teams over corporate committees</strong>  </li>
  <li><strong>Stream funding over project budgets</strong></li>
  <li><strong>Adaptation patterns over prescriptive frameworks</strong>  </li>
</ul>

<p>That is, while there is value in the items on the right, we value the items on
the left more. And while we honor the original Manifesto values, we honor these
TNG values equally.
<!-- more --></p>

<h2 id="what-do-those-items-on-the-left-mean">What do those items on the left mean?</h2>

<p>The items on the right are familiar to us all. The items on the left have
a pleasant ring, but let’s make some concrete examples to make them clear.</p>

<ul>
  <li>
    <p><strong>Consensus games</strong> include <a href="">lean coffees</a>, <a href="">open spaces</a>,
<a href="">retrospectives</a>, <a href="http://agiletng.org/2014/04/02/iroquois-council/">agile
parliament</a> and other ways
for people to align understandings and make decisions together. Lean coffees
and open spaces do the former; retros and parliaments do the latter. </p>
  </li>
  <li>
    <p><strong>Extreme teams</strong> are autonomous cross-component cross-functional end-to-end
feature-based teams that self-organize via the <a href="http://c2.com/cgi/wiki?ExtremeProgrammingCorePractices">XP
rules</a> to optimize
quality, throughput, ROI and alignment of their value stream to its market.
They’re extreme in that they consciously “turn all the dials to ten” to
capitalize on learnings and innovations.</p>
  </li>
  <li>
    <p><strong>Stream funding</strong> means funding to continuously deliver the maximum ROI
features to improve a value stream, rather than chunking objectives,
timeframes and budgets arbitrarily into projects. It includes patterns 
from <a href="">Beyond Budeting</a>, <a href="">Beta Codex</a>, and <a href="">Open Book Management</a>.</p>
  </li>
  <li>
    <p><strong>Adaptation patterns</strong> describe proven solutions to commonplace problems in
a collaborative context. Similar to design patterns for software, they were
pioneered in the initial description of XP and revived by Jim Coplien and
Ken Schwaber in their <a href="">ScrumPLOP</a> conference.</p>
  </li>
</ul>

<h2 id="where-do-these-values-come-from">Where do these values come from?</h2>

<p>Agile started with XP on the <a href="http://www.c2.com/cgi/wiki/ExtremeProgrammingRoadmap">C2
Wiki</a>, a high powered
but open community of professionals sharing patterns and innovations for the
common good. The Agile Alliance distilled this work into a Manifesto and added
a signup page, but C2’s open community is the real reason for the global
supremacy of Agile today.</p>

<p>Nevertheless that all happened last century and the Manifesto is showing
its age.  It’s still right on when it comes to teams, but lacks values and
principles for large scale Agile adoption. This gap has led to
<a href="http://agile.dzone.com/articles/method-wars-scrum-vs-safe">contention</a> as
consultancies and certificate-mills compete to pry open corporate checkbooks
for their respective brands. </p>

<p>Which is crazy. There’s value in both Scrum and SAFe, and no reason to think
you can’t combine elements of both along with other frameworks. The value of
frameworks isn’t in their brands and certificates, nor in adopting them as
prescriptions, but in adapting the practice patterns they contain. </p>

<p>Schwaber is correct in worrying about the danger of making “half a cow and
half a fish” when what we really want is dolphins. The question is, on what
basis do you go about the process of adaptation? How do you do it organically,
iteratively, and without tripping up at scale? To do that you need a clear set
of values and principles. And that’s where A:TNG comes in.</p>

<p>A:TNG is based on the idea that SAFe, Less, DAD, APF, ETF, OBM, Beyond
Budgeting, Lean and on and on all provide useful adaptation patterns.  And
that there’s a lot more to enterprise agility than all of them put together.
We’ve augmented the Manifesto values not as a way to make yet another brand,
but as a basis for the work of pulling these pattern languages out of all the
brands and into the open where we can really sort out what works with what.</p>
]]></content>
  </entry>
  
</feed>
