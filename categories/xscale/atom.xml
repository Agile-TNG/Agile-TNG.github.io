<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xscale | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/xscale/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-07-17T20:50:40+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[Peter Merel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Behavioral Product Planning]]></title>
    <link href="http://Agile-TNG.github.io/2014/05/14/behavioral-product-planning/"/>
    <updated>2014-05-14T19:08:25+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/05/14/behavioral-product-planning</id>
    <content type="html"><![CDATA[<p><img src="/images/koch-curve.gif"></p>

<p>BPP is a pattern language based on BDD that enables a <a href="http://luxr.co/10_principles_of_lean_user_experience#who_is_involved">product
team</a> to
efficiently define, budget and prioritise a roadmap or backlog. It’s also a way to
answer some questions Agile has traditionally avoided: </p>

<ul>
  <li>How much will a set of features cost?</li>
  <li>How do we trade off different feature sets?</li>
  <li>How do we know a feature is ready to ship?</li>
</ul>

<!-- more -->

<p>Agile works as a hill-climbing algorithm. It continously integrates little stories
into a release, and it’s perfectly happy to climb a molehill of value when there’s an
Everest right next door. </p>

<ul id="markdown-toc">
  <li><a href="#the-patterns">The Patterns</a>    <ul>
      <li><a href="#feature-points">Feature Points</a></li>
      <li><a href="#breadth-first-roadmap">Breadth-First Roadmap</a></li>
      <li><a href="#backlog-bingo">Backlog Bingo</a></li>
      <li><a href="#royal-cod-prioritization">Royal Cod Prioritization</a></li>
      <li><a href="#royal-cod-vs-wsjf">Royal Cod vs WSJF</a></li>
      <li><a href="#bingo-uncertainty">Bingo Uncertainty</a></li>
      <li><a href="#release-refactoring">Release Refactoring</a></li>
    </ul>
  </li>
</ul>

<p>Small projects look to a good product owner to find their Everest, but at scale, with
portfolios of programs of projects, misalignment is easy and ROI is combinatorially
hard.  </p>

<p>In the above animation of a “Koch Curve”, a line segment is mapped to 4 smaller line
segments to look like a tent. Then each of those segments is transformed the same way,
breadth-first, and so on until it looks like broccoli. If a hill-climbing algorithm is
used on this Koch curve, it will always get stuck in a local maximum.  Mapping the
curve breadth-first, however, always gets to the global maximum.</p>

<p>Likewise BPP makes breadth-first distinctions about business alternatives, sorts these
into easily optimized piles, and iterates to locate the parts with maximum ROI. This
assures consistent decisions about business alternatives at all scales, and the
analysis completes quickly and efficiently, ruling out large swathes of lower ROI
“business space” without wasting analysis time on their in-depth exploration.</p>

<h2 id="the-patterns">The Patterns</h2>

<ul>
  <li><a href="#feature-points">Feature Points</a> are a way to reconcile budgets with story points</li>
  <li><a href="#breadth-first-roadmap">Breadth First Roadmap</a> is a way to map featuresets to
acceptance criteria</li>
  <li><a href="#backlog-bingo">Backlog Bingo</a> determines the dollar investment and relative return
for a set of products and services. </li>
  <li><a href="#royal-cod-prioritization">Royal Cod</a> applies Backlog Bingo to prioritize a
Breadth-First Roadmap</li>
  <li><a href="#release-refactoring">Release Refactoring</a> enables product owners to make
rational trade-offs between feature-sets. </li>
</ul>

<h3 id="feature-points">Feature Points</h3>

<p>In BPP we change the unit of estimation from story points to feature points.  Where
story points represent only the relative effort required to deliver a story, feature
points estimate increments of funding necesssary to deploy a feature. </p>

<p><img src="/images/flow.png" width="400"></p>

<p>Because the number of story points that will fit into a funding increment depends on
team velocity, there’s no linear mapping between feature points and story points.
That’s all right because there’s no need to attempt to normalize story points across
teams. Instead, BPP’s Backlog Bingo pattern gives feature points their empirical basis.</p>

<p>BPP uses feature points both in establishing a reasonable level of funding per
business objective, and as a direct input to its “Royal Cod” prioritization method.
If you need to represent both feature points and story points on the same diagram, we
“monetize” story points using the formula:</p>

<p>Monetized Story Points = Team Story Points / Feature Velocity</p>

<p>Here the “Feature Velocity” is simply the team’s throughput in feature points per
week.  If, for example, squad A delivers on average 10 feature points per week, its 25
story points = 2.5 FP. If squad B delivers 12 feature points per week, its 48 story
points = 4 FP. This makes it easy to graph cumulative flow diagrams per team, and to
assure that the budget for a stream is sufficient to deliver a set number of features
in a set period of time.</p>

<h3 id="breadth-first-roadmap">Breadth-First Roadmap</h3>

<p><img src="/images/bfr.png" width="400"></p>

<p>Breadth-First Roadmap (BFR) is a generalization of the Lean Startup <a href="http://www.youtube.com/watch?v=QoAOzMTLP5s">Business Model
Canvas</a>. It’s derived from of simple,
proven Agile practices - story normal form, INVEST properties and categories of BDD
acceptance criteria. But it functions to concrete agreement about a group’s delivery
targets and courses of action, and to assure complete analysis of same - to a limited
depth.</p>

<p>Every BFR can be regarded as an expansion of a single, large story that delimits its
scope. We call that the BFR’s <strong>“scoping story”</strong>. It’s important to begin by
describing this story in <a href="http://www.mountaingoatsoftware.com/blog/advantages-of-the-as-a-user-i-want-user-story-template">story-normal
form</a>
to assure roadmapping conversations converge on an intent shared by the whole team.</p>

<p><img src="/images/roadmap0.png" width="400"></p>

<p>For example, consider the following humorous scoping story from <a href="https://www.youtube.com/watch?v=sUkZFetWYY0">Despicable
Me</a>:</p>

<blockquote>
  <p>As a super-villain<br />
I want a hand-held super-weapon<br />
So that I can overpower people</p>
</blockquote>

<p>Let’s imagine three features on the resulting roadmap: a <a href="https://www.youtube.com/watch?v=bYfG2FwkVkM">Freeze
Ray</a>, a <a href="https://www.youtube.com/watch?v=X1gCJrOISYo">Squid
Launcher</a>, and <a href="https://www.youtube.com/watch?v=K0__FYRdiSY">Purple
Minions</a>.</p>

<ul>
  <li>At every level, BFR takes the form of a matrix of features and themes.  A <em>theme</em>
defines some category of acceptance criteria for a cross-cutting technical, business
or user experience concern. And the features are thought to combine to satisfy the
BFR’s scoping story across these themes.
    <ul>
      <li>Each feature is in turn expanded in <a href="http://www.mountaingoatsoftware.com/blog/advantages-of-the-as-a-user-i-want-user-story-template">story-normal
form</a>.
and checked to assure <a href="http://en.wikipedia.org/wiki/INVEST_(mnemonic)">INVEST</a>
compliance. Here the N in INVEST is modified to mean “we have the right people in
the room to Negotiate these stories” and the S is generalized to mean “scale
similar” rather than just “small”.</li>
    </ul>
  </li>
  <li>The intersection of a feature and a theme is a checkbox; each checkbox can only
contain a blank or a checkmark. A checkmark means there are acceptance criteria for
this feature in this theme and a blank means there aren’t.</li>
</ul>

<p><img src="/images/roadmap1.png" width="400"></p>

<ul>
  <li>Each feature is evaluated against all themes. </li>
  <li>As each feature is evaluated, also consider whether there are acceptance criteria in
a theme that isn’t yet part of the roadmap. If so, add a column for that theme and
re-evaluate all the features to determine whether they also have some acceptance
criteria in it.</li>
  <li>It’s fine to modify or refactor features as you go so long as all the roadmap’s
checkboxes are consistently updated.</li>
</ul>

<p>Above we realize that purple minions aren’t actually a hand-held weapon, but <a href="https://www.youtube.com/watch?v=r5VQ6MowYm0&amp;t=20m45s">the gun
that converts yellow minions to purple minions
is</a>, so we modify the roadmap
accordingly. We also note there are acceptance criteria here to do with the purple
minion gunscaling to large populations and also changing their allegiances, so we add
theme columns for those.</p>

<p><img src="/images/roadmap2.png" width="400"></p>

<ul>
  <li>Evaluate each theme to determine whether it is sufficiently covered by features to
deliver the scoping story.</li>
  <li>If not, the roadmap is extended with extra features to assure every theme is
sufficiently covered, with each new features subsequently evaluated in all themes.</li>
  <li>If it appears that all features have the same pattern of checkboxes for two themes,
we consider whether those two themes may be refactored into one.</li>
</ul>

<p>Continuing our despicable example, we see that none of the three weapons so far is
both accurate and scalable. Our product owner says that’s important for super-villain
weaponry, so there’s a missing feature. This is how we come up with the <a href="https://www.youtube.com/watch?v=AnxRf4JnXPU">Shrink
Ray</a>.</p>

<p><img src="/images/roadmap3.png" width="400"></p>

<ul>
  <li>If a theme has checkboxes for all or almost all features, break out further features
to encapsulate shared technical infrastructure to economically support their
commonalities. We call these <strong>technical features</strong>.</li>
  <li>If a theme has no checkboxes ticked, it may simply be deleted. If it has only a very
small number ticked, it may be better to refactor those checkboxes into a standalone
feature.</li>
  <li>In general this  process continues until the team agrees that the roadmap is
complete or that there is no more time available.</li>
</ul>

<p>Completing the despicable roadmap above we note that it will save feature points if
all these portable weapons share a common chassis - a standardized handle, trigger and
aiming device. So we factor out a technical feature for a gun chasis. Then, since none
of these weapons have acceptance criteria involving a Food Supply any more, we can
simply delete that column.</p>

<p>To use BFR properly it’s important to keep “breadth-first” in mind. The roadmapping
process may become long and onerous if features and themes are too numerous or
detailed for the scale of the roadmap. Each feature may be expanded into a further
roadmap at the next level down until they’re small enough to constitute estimable
delivery stories. So it’s counterproductive to over-specify them.</p>

<h3 id="backlog-bingo">Backlog Bingo</h3>

<p>The original XP Planning Game, now known as “Planning Poker”, is a proven way for
delivery teams to collaborate on estimating the relative effort required to deliver a
set of stories. BPP generalizes Planning Poker to Feature Points to make a method
of determining the dollar investment and the relative return in delivering a set of
products and services. </p>

<p><img src="/images/bbingo.png"></p>

<p>Backlog Bingo is easy and fun to play:</p>

<ul>
  <li>
    <p>Write <a href="http://www.youtube.com/watch?v=SjSHVDfXHQ4">Fibonacci numbers</a> from 1 to 89
on cards and lay them out in a row across a large table. There’s nothing magical
about Fibonacci numbers - we use them because they consistently lead people to think
in terms of trade-offs - is feature A really as big as feature B + feature C, and so
on.</p>
  </li>
  <li>
    <p>Select three previously delivered and deployed features with well documented
costs, one small, one medium and one large. Call these <strong>probes</strong>. Describe
each probe in story-normal form commensurable with the roadmap features you
want to estimate.</p>
  </li>
  <li>
    <p>Figure out a funding increment that constitutes the greatest common divisor
of the probes’ respective costs and call this a feature point. Place the
three probes under the Fibonacci numbers that match their respective
magnitudes in feature points. </p>
  </li>
  <li>
    <p>Pick a feature from your roadmap. Compare it with the probes, starting with
the middle one, to evaluate its relative size in Fibonacci multiples of
feature points.</p>
  </li>
  <li>
    <p>As you add features, sort them into the appropriate Fibonacci column.
Continue to compare features this way until there are none left to compare.
If the estimators cannot agree on the Fibonacci number for a feature,
split it into pieces they can estimate separately.</p>
  </li>
</ul>

<p>To estimate relative business value, you simply pick a different set of 3 probes - one
for an existing deployed feature that the PO says has low business value, and then one
that’s crticially important to business function, and then one roughly in between.
Place them at 3, 13 and 55, respectively, and the rest of the Bingo game runs as
above. Obviously there’s no dollar quantification of the return, but we’ve found
business stakeholders quickly converge on which features are worth more than which.
And the conversations they have in getting to agreement are extremely illuminating -
the technical team members need to listen carefully and ask questions to make certain
they share the businss context.</p>

<h3 id="royal-cod-prioritization">Royal Cod Prioritization</h3>

<p>ROI + COD (which we affectionately call “Royal Cod”) is a simple consensus game to
prioritise the BFR. It is both easier and more accurate than the SAFe “Weighted
Shortest Job First” (WSJF) equivalent for reasons described below.</p>

<p><img src="/images/bpp.png" width="400"></p>

<p>Royal Cod uses two Bingo sessions to assign values to the BFR features in terms of:</p>

<ul>
  <li>effort in feature points</li>
  <li>relative business value</li>
</ul>

<p>Technical team members - developers, architects, designers and testers - play the
first bingo game while the Product Owner and stakeholders answer questions and in turn
question any relative estimate they feel is too large or too small. </p>

<p>The second bingo game reverses these roles. Now it’s business stakeholders, SMEs and
the PO who work together to estimate business value while technical team members
answer questions. </p>

<p>Only technical team members are qualified to make effort estimates, and only business
team members to make business value estimates. The rest simply ask questions. Once
each feature obtains both estimates, Royal Cod prioritisation involves three steps:</p>

<ul>
  <li>Divide the business value number, which represents expected return, by effort, which
represents the required investment to obtain the return.  This yields relative
return on investment - ROI.</li>
  <li>List features vertically in order of decreasing ROI. Let the Product Owner increase
the priority of any business feature if they feel has a Cost of Delay (COD) that
warrants this.</li>
  <li>Once the PO is content with the prioritisation of business features, let technical
team members increase the priority of any <em>technical feature</em> they feel has a COD
that warrants this. </li>
</ul>

<p>In order to minimize overall cost of maintenance, a technical feature should have a
priority as close as possible to the highest prioity feature that depends upon it.</p>

<p>Once the COD adjustments have been made, record the relative priorities of the
features to prepare for Release Refactoring, which determines how to best fit
these to funding constraints and MVP per business objective. </p>

<h3 id="royal-cod-vs-wsjf">Royal Cod vs WSJF</h3>

<p>In WSJF, COD is the whole game. It includes ROI - it’s not distinct from it. What’s
the advantage of doing it this way? Why not the SAFe way?</p>

<p><img src="/images/cod.png" width="400"></p>

<p>WSJF is defined in SAFe by the formula (Business-or-User Value
+ Time Criticality + Risk-Reduction-or-Opportunity-Enablement) / Duration. Since
there’s no clear distinction between business value, risk reduction and opportunity
enablement, WSJF simplifies to (Business Value / Duration) + (Criticality /
Duration).</p>

<p>There are several problems that:</p>

<ol>
  <li>It doesn’t makes sense to divide criticality by duration. Work doesn’t become less
critical just because it takes longer. There is a trade-off but it must be made
intelligently, not numerically.
    <ul>
      <li>Without clear distinctions for each term, which aren’t provided by SAFe, there’s no
way to assure those WSJF variables are independent. The overlap distorts relative
Business Value in an unpredictable way.</li>
      <li>By factoring COD variables out and giving them equal weighting, WSJF actively
prevents intelligent trade-off conversations that would reconcile differing
assumptions about their importance per feature.</li>
      <li>WSJF provides no opportunity to account for how combinations of features render the
individual feature more or less valuable. Again this is a moving target that also
calls for intelligent conversation, not blind statistics.</li>
      <li>WSJF doesn’t account for technical CoD.  Some features may have high CoD because of
architectural concerns or ambiguities. WSJF leaves that out.</li>
    </ul>
  </li>
</ol>

<p>All of these problems are simply eliminated in Royal Cod. Once you’ve factored out
ROI, it becomes easy for team members to agree on the remaining COD.  And rather than
adding in COD as if it were linear, which it’s not, it’s easy for team members to
adjust an ROI prioritization by discrete COD per feature - including technical COD of
technical features. The game is quick, simple and unambiguous.</p>

<h3 id="bingo-uncertainty">Bingo Uncertainty</h3>

<p>Uncertainty can lead technical team members to refuse to estimate a feature in Backlog
Bingo. That’s healthy - you don’t want a meaningless estimate.  But then technical
team members must clearly describe the ambiguities or inconsistencies they need
resolved by the Product Owner and technical SME before they can produce an estimate. </p>

<p>If a part of a feature is estimable but another part is not:</p>

<ul>
  <li>the feature is split into two, </li>
  <li>the estimable part is estimated</li>
  <li>a new technical feature is created to represent the work of resolving the
uncertainty via <a href="http://www.c2.com/cgi/wiki?SpikeDescribed">spikes</a> or a <a href="http://xp123.com/articles/set-based-concurrent-engineering/">set-based
design</a> process.</li>
  <li>estimating the inestimable feature is deferred until the spike/SBD story it
depends upon is completed.</li>
</ul>

<p>If a large number of features are inestimable it’s usually best to defer your bingo
session until the team has had time to work with architects and designers to nail
dependencies down better, or the product owner has sufficient time to resolve business
questions.</p>

<h3 id="release-refactoring">Release Refactoring</h3>

<p><img src="/images/roadmapr.png" width="400"></p>

<p>Release Refactoring (RR) is a consensus game to enable product owners to make rational
trade-offs between different feature-sets. It can be used to quickly assemble a
release plan to hit a particular date, if need be, or to determine an ordering of
feaure sets to maximize product-market fit within the funding profile of a continuous
delivery stream.</p>

<p>Like the other BPP patterns, RR is a quick consensus game with quite straightforward
rules:</p>

<ol>
  <li>Using the BPP prioritization, lay out all available features in columns
grouped by business objective.</li>
  <li>Pick the first column. Pick the feature at the top of the column. Let the
PO as advised by their product team determine whether the objective can be
met without including that feature. </li>
  <li>Continue feature by feature until the PO sees one that, while still
valuable, could be left out without preventing satisfaction of the column
objective.</li>
  <li>All of the features above that one constitute the minimum viable
featureset for that objective. Call them “bronze”. </li>
  <li>Continue to pick features in that column now asking the PO whether the
feature has a concrete quantified business value, or just seems “nice to
have”. Call the former “silver” and the latter “gold”.</li>
  <li>Total how many feature points are in each of the bronze, silver and gold
levels for that column.</li>
  <li>Do this for all columns.</li>
  <li>If fitting to a continuous delivery funding model, POs simply prioritize
the bronze, silver and gold tranches of features across all columns.  Pick
the most important one, then the next most important one, and so on.  Use
the feature points to project release dates for marketing and other
business development purposes.</li>
  <li>If you’re only playing to create a release plan for a particular
date/budget, determine how many feature points correspond to that release.
Now let the PO determine which combination of bronze/silver/gold levels
will maximize deployed value for that release.</li>
  <li>Record all of these decisions as an easy  starting point for the next RR
session.</li>
</ol>

<p>Release Refactoring is played whenever new features are added to the stream
backlog or whenever the PO calls for it. Because it’s such a quick game it’s
also possible to play in a “what-if” mode to evaluate alternative product
plans to evaluate possible responses to changes in market conditions.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSCALE: an Agile Enterprise Ecosystem]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>XSCALE is a continuously delivering, continuously self-organizing, continuously
adaptive Agile enterprise ecosystem that turns all the knobs to ten.</p>

<!-- more -->

<h2 class="no-toc" id="why-xscale">Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale Agile. The
most popular are SAFe, LeSS, Agile Path and the Spotify Tribal model.  Each has its
<a href="#related-frameworks">strengths and weaknesses</a>.</p>

<ul id="markdown-toc">
  <li><a href="#why-xscale">Why XSCALE?</a></li>
  <li><a href="#xscale-principles">XSCALE Principles</a>    <ul>
      <li><a href="#excellence">eXcellence</a></li>
      <li><a href="#scale-symmetry">Scale-symmetry</a></li>
      <li><a href="#continuous">Continuous</a></li>
      <li><a href="#autonomous">Autonomous</a></li>
      <li><a href="#lean">Lean</a></li>
      <li><a href="#ecosystem">Ecosystem</a></li>
    </ul>
  </li>
  <li><a href="#xscale-patterns">XSCALE Patterns</a></li>
  <li><a href="#enterprise-practices">Enterprise Practices</a>    <ul>
      <li><a href="#bpp">BPP</a></li>
      <li><a href="#continuous-adaptation">Continuous Adaptation</a></li>
      <li><a href="#chapters-and-councils">Chapters and Councils</a></li>
      <li><a href="#meeting-schedules">Meeting Schedules</a></li>
    </ul>
  </li>
  <li><a href="#stream-practices">Stream Practices</a>    <ul>
      <li><a href="#stream-funding">Stream Funding</a></li>
      <li><a href="#stream-structure">Stream Structure</a></li>
      <li><a href="#stream-flow-diagram">Stream Flow Diagram</a></li>
    </ul>
  </li>
  <li><a href="#team-practices">Team Practices</a>    <ul>
      <li><a href="#devops--cd--gitflow">DevOps + CD + GitFlow</a></li>
      <li><a href="#lean-ux--bdd--xp">Lean UX + BDD + XP</a></li>
    </ul>
  </li>
  <li><a href="#related-frameworks">Related frameworks</a></li>
</ul>

<p>XSCALE leverages the strengths:</p>

<ul>
  <li>Standardizing team practices using Scrum-XP like SAFe</li>
  <li>Transforming the enterprise iteratively like Agile Path</li>
  <li>Refactoring component silos into feature teams like LeSS</li>
  <li>Integrating tribal structures, CD and DevOps like Spotify</li>
</ul>

<p>XSCALE introduces some new patterns to bind these practices together,:</p>

<ul>
  <li>Continuous adaptation using the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">Seven
Samurai</a> pattern language.</li>
  <li>Continuous product planning using a method based on Lean Startup, Lean UX and
<a href="http://agiletng.org/2014/05/14/behavioral-product-planning/">BPP</a></li>
  <li>Continuous self-organization using <a href="http://agiletng.org/2014/04/02/iroquois-council/">Iroquois
councils</a>, a combination of Open
Space, BDD and Kanban.</li>
</ul>

<p>Like any framework, XSCALE is a collection of pattern languages that have been shown
to reinforce each others’ strengths. It aims to afford enterprises on all scales an
iterative path to state-of-the-art Agile capabilities while minimizing risk of
disruption to existing value streams. </p>

<h2 id="xscale-principles">XSCALE Principles</h2>

<p>XSCALE conforms with the <a href="http://agiletng.org/2014/03/10/4-new-values/">A:TNG values</a>,
which are themselves a strict superset of those in the Agile Manifesto.  XSCALE also
offers six principles that form a superset of the ones in the Manifesto.</p>

<dl>
  <dt>eXcellence</dt>
  <dd>Linking the manifesto to <em>Beck’s Maxim</em>: Turn all the knobs to ten.</dd>
  <dt>Scale-symmetry</dt>
  <dd>Map distinctions breadth-first to control combinations.</dd>
  <dt>Continuous</dt>
  <dd>Minimum practical cycle time and batch size.</dd>
  <dt>Autonomous</dt>
  <dd>Enable consensus to make decisions and to delimit accountabilities.</dd>
  <dt>Lean</dt>
  <dd>Maximize net ROI.</dd>
  <dt>Ecosystem</dt>
  <dd>Continuous adaptation of the whole to its parts.</dd>
</dl>

<p>Descriptions of the principles follow, then a selection of practice patterns that
embody them.</p>

<h3 id="excellence">eXcellence</h3>

<p>The term “extreme” in the original XP unfortunately evoked the idea of recklessness,
which caused considerable confusion in the fledgling days of Agile.  The manifesto
authors recognize XP’s intent with their 9th principle, “Continuous attention to
technical excellence and good design enhances agility”.  XSCALE calls this continuous
attention “eXcellence”, and takes Beck’s definition:</p>

<blockquote>
  <ul>
    <li>If code reviews are good, we’ll review code all the time [Pair Working].</li>
    <li>If testing is good, everyone will test all the time, even the customers
[BDD]</li>
    <li>If simplicity is good, we’ll always leave the system with the simplest design that
supports its current functionality [The DRY principle - Don’t Repeat Yourself]</li>
    <li>If integration testing is important, we’ll integrate and test several times a day
[Continuous Integration]</li>
    <li>If short iterations are good, we’ll make the iterations really short [INVEST Stories]</li>
  </ul>
</blockquote>

<p>And so on - it wobbled a bit from edition to edition but Beck summed up the intent
with the maxim,</p>

<p><strong>Turn all the knobs to ten.</strong></p>

<p><img src="/images/knobs.jpg"></p>

<p>XSCALE regards these XP engineering practices, CD and Feature Teams as the
fundamentals of technical excellence. These patterns interlock to assure technical
debt is paid before it earns interest that impacts ROI, and thereby keeps the delivery
process stable, predictable and flexible. </p>

<h3 id="scale-symmetry">Scale-symmetry</h3>

<p>Scale is about combinations of requirements, of dependencies, of defects, and of
conversations. The number of combinations of a set grows much more rapidly than the
number of its members; a set of just 10 things has over 3.6 million distinct
combinations. </p>

<p>So how do golfers do it? Golfers are untroubled by combinations of billions of grass
blades.  They make simple distinctions about the grass: “the green”, “the rough”, and
so on. Once the ball is placed they make more distinctions about distances, slopes and
clubs - a map in their heads that says where the ball lies relative to the hole.  They
never think about the combinations of individual grass blades.</p>

<p>Agile actively minimizes combinations of concerns when it 
* (<a href="">DRY</a>)s code into distinct modules to group common behaviours
* automates testing to keep ambient defect count low, thereby minimizing the
  multiplication of time required to sort out combinations of defects
* combines people into small teams with distinct backlogs to limit the need for
  cross-team coordination
* The Spotify patterns which factor cross-cutting concerns to distinct chapters and
  guilds to minimize paticipants in the conversations required to resolve them. </p>

<p>In general the principle is:</p>

<p><strong>Map distinctions breadth-first to control combinations</strong></p>

<p><img src="/images/koch-curve.gif"></p>

<p>In the above animation of a “Koch Curve”, a line segment is mapped to 4 smaller line
segments to look like a tent. Then each of those segments is transformed the same way,
breadth-first, and so on until it looks like broccoli. If a hill-climbing algorithm is
used on this Koch curve, it will always get stuck in a local maximum.  Analysing the
curve breadth-first, however, always finds the global maximum.</p>

<p>XSCALE applies this to the challenge of determining which combinations of business
alternatives have most value.  Agile works like climbing a hill, continously
integrating little stories into the evolving whole. So it can climb a molehill of
value when there’s an Everest right next door.  Small projects look to a good product
owner to find their Everest, but when you’ve got portfolios of programs of projects,
misalignment is easy and maximizing value is combinatorially hard.  </p>

<p>XSCALE uses <a href="http://agiletng.org/2014/05/14/behavioral-product-planning/">Behavioral Product
Planning</a> patterns to
control this combinatorial space. BPP systematically defines breadth-first maps of
system behaviours, then sorts these into easily optimized piles. It iterates to
determine the features of maximum ROI and assure consistent decisions about business
alternatives at all scales. This way analysis can be conducted iteratively, quickly
and efficiently, quickly ruling out large swathes of low ROI “business space” without
wasting analysis time on their in-depth exploration.</p>

<h3 id="continuous">Continuous</h3>

<p>SAFe promotes Punctuated Cadence over Continuous Delivery, employing a quarterly
<a href="">release train</a> integration pattern. This is a great starting point for conservative
organizations and enables them to keep their component silos, but at a price:</p>

<ul>
  <li>Increased cost of quality due to deferring regression and acceptance
testing to “hardening sprints”.</li>
  <li>Wasted time in meetings to figure out how to satisfy combinatoric
inter-team dependency cycles.</li>
  <li>Lost ROI from keeping finished features on ice for a quarter</li>
</ul>

<p>By employing continuous rather than big-bang transformation, XSCALE augments SAFe with
the abilty to iteratively break component silos into feature teams. The benefit is to
avoid the above penalties and enable feature teams to use the GitFlow pattern language
for continuous delivery. In general the principle is simply:</p>

<p><strong>Minimum practical cycle time and batch size</strong></p>

<p><img src="/images/sushi-train.png"></p>

<p>XSCALE applies the same principle in its product planning, stream coordination, and
transformation patterns. Use the smallest practical. </p>

<p>What’s “practical”? Every process has a minimum responsible cadence. The best way to
discover it is to start small and experiment. Try variations. Make your sprints a week
long for a few weeks and see what breaks. If a week works well, try running two day
sprints and see what happens. Or dispense with sprints and run review, retro and
planning every time a feature is ready for release per
<a href="http://www.deloittedigital.com/us/blog/scrumban-a-different-way-to-be-agile">Scrumban</a>.
The key is to work actively to experiment, learn and optimize.</p>

<h3 id="autonomous">Autonomous</h3>

<p>Many of the benefits of Agile derive from peer collaboration and team
consensus games like planning poker and retrospectives, and it wouldn’t be
reasonable to call a process Agile at any scale if it doesn’t empower
consensus through games. So the XSCALE principle is:</p>

<p><strong>Enable consensus to make decisions and to delimit accountabilities.</strong></p>

<p><img src="/images/council.png"></p>

<p>In theory, individual accountability should be applied when the business cost of
delaying a decision is greater than the social cost of failing to maintain consensus.
In practice it’s hard to figure these costs out.  Historically the happiest medium
seems to have been the Iroquois Confederacy, which used consensus at
<a href="http://en.wikipedia.org/wiki/Dunbar%27s_number">sub-Dunbar</a> scales to control a
hierarchy of peer councils. </p>

<p>Where consensus protocols were violated or timing called for a rapid decision, “war
chiefs” were accountable. The combination of councils and limited-accountability
chiefs proved stable at a multi-national scale over a period of centuries.  XSCALE
combines this approach with the Spotify tribal model to coordinate autonomous teams
and streams.</p>

<h3 id="lean">Lean</h3>

<p>Lean is often defined as “Minimizing Waste”. Unfortunately that definition
only refers to one of the three Lean pathologies, muda. Lean also works to
minimize overburden (muri) and irregularity (mura). </p>

<p><img src="/images/mmm.jpg"></p>

<p>The waste maxim also admits an ambiguity. <a href="http://theleanstartup.com/principles">Lean
Startup</a>, <a href="http://www.smashingmagazine.com/2011/03/07/lean-ux-getting-out-of-the-deliverables-business/">Lean
UX</a>
and <a href="http://www.poppendieck.com">LSD</a> use Lean in its general meaning of process
efficiency, but Lean Six Sigma and Lean Accounting interpret it to mean cost
minimization, right first time, and hierarchical standardization. These forms of Lean
philosophically oppose Agile’s focus on maximizing ROI, fail fast, and adaptive
collaboration. To prevent confusion XSCALE defines the Lean principle simply as:</p>

<p><strong>Maximize net ROI</strong></p>

<p>We say net ROI to account for Cost of Delay (COD). The Lean principle is embodied in
several specific practice patterns:</p>

<ul>
  <li>As a special case of Breadth-first Roadmapping, Lean Startup’s <a href="">business model
canvas</a> to pivot and refactor the enterprise’s value streams as a whole.</li>
  <li>Per stream <a href="">Value Stream Maps</a> specializing cumulative flow diagrams to represent
the relationship between stream funding, stream return, and roadmap delivery.</li>
  <li><a href="">Product Teams</a> working cross-functionally per Lean UX to coordinate
<a href="">set-based-design</a> with lo-fi prototyping, BDD and Feature roadmaps</li>
  <li><a href="">Lean Transformation Canvas</a> as a roadmap for the <a href="http://agiletng.org/2014/03/21/the-seven-samurai/">Seven
Samurai</a>.</li>
</ul>

<p>These Lean practices interlock to render a simple stream funding cycle without
artificial project budgets and baselines. </p>

<h3 id="ecosystem">Ecosystem</h3>

<p>A biological ecosystem differs from a zoo in that it continuously adapts to changes in
the populations and behaviours of its constituent organisms. The same might be said of
an individual organism and its constituent cells.</p>

<p>The biological principles are generation and death. Generation continuously produces
experimental variations in behaviour, and death removes variations that don’t
efficiently adapt to the whole.  Similarly we think of Lean pivoting and <a href="http://doerry.org/norbert/papers/sbdfinal.pdf">set-based
design</a> serving the function of
generation, and Agile refactoring serving that of death, the principle for both is:</p>

<p><strong>Continuous adaptation of the whole to its parts</strong></p>

<p><img src="/images/eco.png"></p>

<p>XP embodies this principle in its practice of <a href="http://www.c2.com/cgi/wiki?RefactorMercilessly">Merciless
Refactoring</a> and Lean Startup in its
<a href="http://blog.leanstartupcircle.com/get-paid-or-get-pivoting/">Get Paid or Get
Pivoting</a>.  XSCALE
extends it to the rollout of structure and practices to squads in streams, and to
streams in the enterprise. The ecosystem principle turns the Taylorist axiom of
all-wise managers and serf-like workers on its head, leveraging the Agile function of
management as
<a href="http://www.butler.edu/volunteer/resources/principles-of-servant-leadership/">servant-leaders</a>
to autonomous teams of peer workers.</p>

<p>In order to pivot and refactor the enterprise as a whole, XSCALE relies on a
hierarchy of councils: </p>

<ul>
  <li>chapters as groupings of people with common capabilities across squads </li>
  <li>stream councils steered by chapter representatives</li>
  <li>an enterprise council steered by stream council representatives. </li>
</ul>

<p>At each level there are also some individual accountabilities defined by
these teams.  Each squad in a stream has distinct roles for agile coach and
product owner.  Each stream has a product manager and a stream manager. And
the enterprise has its executive officers. </p>

<p>The accountabilities of the individual roles are defined by treaties
with their respective councils. Likewise the accountabilities of the
enterprise as a whole, and each of its streams, and each of their chapters,
are respectively defined by treaties in story-normal form. Councils each
use this statement of their accountability to scope their planning using the
<strong>Breadth-First Roadmap</strong> method described below.</p>

<h2 id="xscale-patterns">XSCALE Patterns</h2>

<p>XSCALE is “opinionated” in the same sense as <a href="https://gettingreal.37signals.com/ch04_Make_Opinionated_Software.php">Ruby on
Rails</a>, offering
a set of concrete practices as a state-of-the-art starting point for your journey.  As
your streams and teams gain experience with these practices, your chapters and
councils will naturally vary and augment them.  Starting by building an uncompromised
agile capability, you can grow and adapt it continuously without ever compromising it.</p>

<h2 id="enterprise-practices">Enterprise Practices</h2>

<p>XSCALE adopts the <a href="">Beyond Budgeting</a> premise that each value stream must either earn
its keep or convince other, self-funded streams that it is affords thems sufficient
value for them to invest in it to their mutual benefit. </p>

<p>Making such trade-offs has traditionally been the responsibility of senior executives.
We expect execs will still guide and inform the choices made by the Enterprise
Council, but the intent in spreading responsibility for making appropriation decisions
to the stream leads is to assure that the enterprise pivots collaboratively to
maximize net ROI for the whole.</p>

<p><img src="/images/enterprise.png"></p>

<h3 id="bpp">BPP</h3>

<p>While we describe the patterns in this section as “Enterprise Practices”, this doesn’t
mean they’re only performed in the stratosphere.  Following the principle of
Scale-Symmetry these same patterns are used by streams and squads to optimize their
respective ROI and reconcile same with available funding.  As a pattern language based
on and generating BDD we refer to these practices collectively as Behavioral Product
Planning, and describe them in their own post
<a href="http://agiletng.org/2014/05/14/behavioral-product-planning/">here</a>.</p>

<h3 id="continuous-adaptation">Continuous Adaptation</h3>

<p>As per the <a href="">Seven Samurai</a> pattern language, XSCALE starts by constructing
a “Minimum Viable Agile Capability” - a “spike” squad within a single stream
that forms a model for all those to come.  The spike squad prototypes and
proves that its tools, relationships and processes integrate as an
efficient end to end SDLC by delivering a stream of small concrete features
with real business value.</p>

<p>In other words this is the familiar Agile <a href="">steel thread</a> pattern applied
to organizing an Agile capability. It is fundamentally important to avoid
pain at scale that the spike squad delivers whole end to end features, not
merely components, so that all the technical and organizational fundamentals
are reliably integrated.</p>

<p>To continuously integrate the spike squad with the pre-existing
organization, <a href="">Seven Samurai</a> assembles the first Stream Council from the
lead doers - not deciders - from each of the organization’s pre-existing
component silos.  As delivery squads multiply, these leads naturally
function as chapter representatives on the Stream Council.</p>

<p>Meanwhile progressive senior managers are enroled into the initial
Enterprise Council to provide a one-stop reporting and support shop for
coaches.  As XSCALE is adopted by more streams, their managers will take
part in their respective councils and thereby may become stream reps on the
Enterprise Council. As described below this leverages the Scale-Symmetric
principle to assure consistent, iterative rollout of XSCALE across the
enterprise.</p>

<h3 id="chapters-and-councils">Chapters and Councils</h3>

<p>As explained in the Ecosystem section above, Streams and Squads have their
specific purposes distinguished by treaties framed in story-normal form.
Councils and Chapters adapt and expand these respective treaties by means of
Breadth-First Roadmaps that detail how their Streams and Squads  will
organize to satisfy the terms of the treaties that define them. </p>

<p><img src="/images/CA.png"></p>

<p>We refer to this process as Continous Adaptation because it’s not a simple
matter of executing a pre-defined plan.  The BPP patterns are applied to
estimate and prioritize the respective  roadmap using themes drawn from the
Seven Samurai patterns to reflect respective accountabilities and
responsibilities at each level:</p>

<ul>
  <li>Chapters are accountable for the Adoption and Acceleration of practice
patterns by their squads, and responsible for providing Awareness and
Architecture sufficient to support them.</li>
  <li>Stream Councils are accountable for overall Awareness and Architecture,
and responsible for Stream Flow Assessment of their current state and BPP
Analysis of their BFR.</li>
  <li>The Enterprise Council is accountable for Assessment and Analysis across
all streams, and responsible for cross-stream Alignment and, in
conjunction with the CFO’s office, Appropriation of funding per stream.</li>
</ul>

<p>Each council keeps an Adaptation Kanban to track the progress of features
drawn from a backlog it generates by using BPP on its BFR, and cumulative
flow diagrams - not to be confused with the Stream Flow diagrams - represent
progress as the whole adapts over time.</p>

<h3 id="meeting-schedules">Meeting Schedules</h3>

<p>As XSCALE rolls out it becomes advantageous to synchronize the various council
meetings so that they don’t cause calendar-stress. XSCALE leverages the squads’weekly
cycle to achieve this:</p>

<ul>
  <li>
    <p>All of a stream’s chapters meet simultaneously every Friday lunch so that
squad activities aren’t interrupted. Chapters may also meet at other
times coordinating via their Stream Council.</p>
  </li>
  <li>
    <p>At the Friday lunch meeting a Chapter selects its representatives for the
Stream Council, which is conducted immediately afterward while squads are
conducting their weekly reviews. To avoid waste, time and location for
reviews, retros and council meetings should be pre-determined and
synchronized.</p>
  </li>
  <li>
    <p>Squad retrospectives are held immediately following the Stream Council
meeting so that any treaties proposed by Council might be immediately and
unanimously ratified. </p>
  </li>
  <li>
    <p>Guild meetings are held asynchronously as convenient to the Guild members.</p>
  </li>
  <li>
    <p>Once a month each Stream holds a half-day full Council meeting for all its
members in accordance with the Iroquois pattern. If ratification of a
treaty was not achieved unanimously in squad retrospectives, the treaty is
shelved until concerns can be ironed out at this monthly meeting. The
Stream Manager may still require squads to temporarily adopt a treaty
until the monthly Council can sort it out.</p>
  </li>
  <li>
    <p>The Enterprise Council, consisting of Stream and Product Managers from all
Streams, along with all relevant senior executives, also meets once a
month to review Stream Flow diagrams and update the enterprise’s business
canvas and related financial plans. The Enterprise Council may also meet
asynchronously whenever one of its members calls for this.</p>
  </li>
</ul>

<h2 id="stream-practices">Stream Practices</h2>

<h3 id="stream-funding">Stream Funding</h3>

<p><img src="/images/streams.png"></p>

<p>[more to come …]</p>

<h3 id="stream-structure">Stream Structure</h3>

<p>By a Stream we mean a Spotifystructured tribe that self-organizes using a
BFR and Feature backlog, a Stream Flow diagram, an Adaptation Kanban and a
Council made up of Chapter representatives. We call this a stream rather
than a tribe to emphasize its focus on optimizing a Lean value stream.</p>

<p><img src="/images/spotify.png" width="400"></p>

<p>Because the <a href="http://blog.kevingoldsmith.com/2014/03/14/thoughts-on-emulating-spotifys-matrix-organization-in-other-companies/">Spotify
model</a>
supports a
<a href="http://www.bp.ntu.edu.tw/wp-content/uploads/2011/12/06-Alexander-A-city-is-not-a-tree.pdf">semi-lattice</a>
rather than hierarchic enterprise structure, it is more open, more
flexible and more responsive to change than traditional corporate structures.
As Chris Alexander says, “As the relationships between functions change, so
the systems which need to overlap in order to receive these relationships
must also change”. </p>

<p>This is clearly reflected in the Spotify experience where
“We can spin up a new squad to take advantage of an opportunity or handle an
issue without worry about changing reporting structures. If a squad completes
its goals and has no reason to exist anymore, we can dissolve it without
punishing a manager”.</p>

<p>XSCALE augments the Spotify Model with a consensus decision-making pattern
derived from the historical Iroquois Confederacy. This pattern coordinates
decision-making across squads, streams and the enterprise as as whole is
described in the <strong>Continuous Adaptation</strong> section below.</p>

<h3 id="stream-flow-diagram">Stream Flow Diagram</h3>

<p><img src="/images/flow.png" width="400"></p>

<p>Every Stream is intended to generate a return. If the Stream serves a purely
internal function then its return may simply be defined as equal to its
funding.  XSCALE represents the return and the funding for a Stream in terms
of Feature Points on a Stream Flow diagram, a special kind of cumulative
flow diagram.</p>

<p>Note that where we refer to story points here we mean Monetized Story Points
derived by the formula given in the Feature Points section above. The layers
of the Stream Flow diagram represent, from bottom to top:</p>

<ul>
  <li>deployed features</li>
  <li>integrated but undeployed stories </li>
  <li>implemented but unintegrated stories</li>
  <li>estimated but unimplemented stories</li>
  <li>features with stories covered by BDD scenarios</li>
  <li>BPP best fit of features to funding </li>
  <li>squad/stream funding limit over time</li>
  <li>stream revenue over time</li>
</ul>

<p>Stream Flow represents all of these on one consistent diagram per squad.
Because of normalization to feature points these diagrams are trivially
rolled up per stream, and then to the enterprise as a whole. This diagam is
extremely enlightening because it is directly amenable to traditional Lean
analysis of cycle time, latency, WIP, etc. This provides visual and
actionable identification of wastes, bottlenecks, irregularities and
opportunities, as well as their relative magnitudes. </p>

<h2 id="team-practices">Team Practices</h2>

<p><img src="/images/teams.png"></p>

<h3 id="devops--cd--gitflow">DevOps + CD + GitFlow</h3>

<p><img src="/images/cd.png" width="400"></p>

<p>Teams are the most concrete embodiment of XSCALE principles:</p>

<ul>
  <li>Per the eXcellence principle, BDD per feature and per story is fully
implemented and all CI and SIT tests pass before any feature is deployed.</li>
  <li>Per the Scale-Symmetry principle, features (defined at this level as
groups of stories that when deployed together will deliver some concrete
business value) are each assigned to a distinct squad. </li>
  <li>Per the Continous principle, sprints are 1 week long. This means all the
sprint rituals have minimum practical batch size and cycle time.</li>
  <li>Per the Autonomous principle, squads use the GitFlow pattern so they don’t
need to wait for another squad in order to integrate, test and deploy.</li>
  <li>Per the Lean principle a feature is deployed by its squad immediately as
soon as it passes CI and SIT.</li>
  <li>Per the Ecosystem principle, Ops forms a chapter that provides consistent
virtualized test environments and production-like System Integration
Testing (SIT) environments, and assures the behaviour of these CI and SIT
environments are equivalent under test. This assures squads collectively
own their code base andconsistently adapt to one another as it evolves.</li>
</ul>

<h3 id="lean-ux--bdd--xp">Lean UX + BDD + XP</h3>

<p><img src="/images/xp.png" width="400"></p>

<ul>
  <li>
    <p>Streams use the Lean UX <a href="">Product Team</a> pattern where product owners from
multiple squads along with, designers, analysts, SMEs and architects work
together to break features down into groups of stories to supply the
delivery squads. To comform with the Spotify structure this Product Team
takes the form of a Chapter.  Whenever the Product Chapter is not meeting,
its members spend time collaborating with delivery squads.</p>
  </li>
  <li>
    <p>Stories are produced in <a href="">Gherkin</a> format factored to maintain <a href="">INVEST</a>
properties. Squads get together with members of the Product Team every
Wednesday afternoon to estimate its latest batches of stories.</p>
  </li>
  <li>
    <p>A story with INVEST defects is returned without an estiamte to the Product
Team for clarification. Otherwise the throughput of the Product Team is
graphed on the <a href="">Stream Flow diagram</a> according to the number of
estimated feature points per week.</p>
  </li>
  <li>
    <p>Squads hold reviews and retrospectives every Friday and task breakout
sessions every Monday, and every day starts with a standup meeting.</p>
  </li>
</ul>

<h2 id="related-frameworks">Related frameworks</h2>

<ul>
  <li>
    <p><a href="http://scaledagileframework.com">SAFe</a> targets existing enterprises with a
high-discipline, top-down, big-change-up-front, punctuated cadence Agile model that
combines Kanban, quarterly <a href="http://scaledagileframework.com/rte/">release trains</a>,
XP and Scrum. SAFe is a good starting point for conservative organizations as it’s
designed to enable agility while keeping component silos intact.  But that means it
<a href="http://xprogramming.com/articles/safe-good-but-not-good-enough/">shys away from feature teams, continuous delivery and
scale-symmetry</a>.</p>
  </li>
  <li>
    <p><a href="http://www.crosstalkonline.org/storage/issue-archives/2013/201305/201305-larman.pdf">LeSS</a>
and <a href="http://www.ebmgt.org/agility-guide">Agile Path</a> are scale-symmetric
alternatives based on traditional Scrum. They offer low-discipline
high-collaboration, continuous cadence models that employ <a href="http://www.scrumalliance.org/community/articles/2007/may/advice-on-conducting-the-scrum-of-scrums-meeting">Scrum of
Scrums</a>
to deal with integration and cross-cutting concerns. XP practices are optional but
feature teams are mandatory. Like SAFe, LeSS uses big-change-up-front but Agile Path
introduces a method of continuous transformation.  Specific practices for product
planning, test automation and so on are left for teams to determine ad hoc. </p>
  </li>
  <li>
    <p><a href="http://www.slideshare.net/vmysla/scrum-at-spotify">The Spotify model</a> dispenses
with Scrum of Scrums in favour of a pattern of <a href="">Tribes and Guilds</a>, strongly
emphasizing bottom-up autonomy.  It gives little prescription on team practices,
calling its smallest teams squads to avoid dictating even the Scrum rules. It
rightly expects a structure of top-flight autonomous teams will be able to decide
for itself how to evolve Agile practices. But it still commits to Continuous
Delivery and DevOps.</p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
