<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scalable | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/scalable/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-24T13:28:00+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a pattern language for a
continuously delivering, continuously self-organizing, continuously adaptive
Agile enterprise that turns all the knobs to ten.</p>

<!-- more -->


<h2>Why XSCALE?</h2>

<p>There have been several attempts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
<li><p>SAFe targets conservative businesses with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban, the
<a href="">release train</a> integration pattern, and Scrum. SAFe lets an organization
keep its component silos intact and includes some XP practices but ignores
anything to do with continuous delivery, collective ownership, merciless
refactoring or refactoring to feature teams. It doesn&rsquo;t say you can&rsquo;t do
those things &hellip;</p></li>
<li><p>LeSS is more progressive, offering a low-discipline, high-collaboration,
big-change-up-front, continuous cadence model that relies on <a href="">Scrum of
Scrums</a> to deal with integration and cross-cutting concerns and requires
an organization to refactor its component silos into feature teams before
commencing sprints, This places a limit on its domain of application, which
seems to be why SAFe is winning over its mindshare. It also leaves the
specifics of product planning, automation and so on for its teams to solve
for themselves.</p></li>
<li><p>The Spotify model dispenses with Scrum in favour of a pattern of <a href="">Tribes and
Guilds</a>, strongly emphasizing bottom-up collaboration and team autonomy.
It gives no further guidance on methodology as it expects its structure of
autonomous teams is capable of deciding for itself how to choose and
coordinate further Agile practices.</p></li>
</ul>


<p>XSCALE is distinct from SAFe in that it is continuous and collaborative in its
methods of planning, delivery and transformation. It&rsquo;s distinct from LeSS
because it leverages the Spotify model of organization. And it&rsquo;s distinct from
Spotify in that it offers a method for existing programs and enterprises to
use to achieve an iterative transformation from their existing state.</p>

<p>It is also different to LeSS and Spotify by refactoring and standardizing the
best proven practice patterns from XP, Lean Startup, BDD, Lean UX, Spotify,
Kanban, DevOps, CD and TNG, combining them into a simple, consistent ecosystem
that represents the absolute Agile state of the art &ndash; easy to do but with all
the knobs turned to ten.</p>

<h2>XP-based</h2>

<p>We left out an important word in that laundry list. Scrum.  Well, Scrum is
really just a watered-down version of XP. If you do XP you already do all the
Scrum practices. Full XP, however, enormously simplifies the job of making
combinations of teams scale.</p>

<p>Why? Because without XP&rsquo;s pair working, test automation, collective code
ownership, continuous integration and merciless refactoring &ndash; the &ldquo;hard bits&rdquo;
of Agile that Scrum leaves out, technical debt inevitably increases over time.
That means rework and surprises, and those things cascade at scale.</p>

<h2>Scalable</h2>

<p>Scale is about combinations. Of requirements, of dependencies, of defects, and
of people. The number of combinations of a set grows very rapidly. The number
of cominations of just 10 things, for example, is over 3.6 million.</p>

<p>Waterfall fails largely because it doesn&rsquo;t control those combinations.  Big
teams, big meetings, big batch sizes, big chunks of work, big changes. Agile
keeps these things small to stay away from the nasty end of the combinatorial
curve.</p>

<p>But Agile works as a hill-climbing algorithm; it&rsquo;s happy to climb a molehill
of value, while there&rsquo;s Everest right next door. To deal with this XSCALE
incorporates Lean Startup, Behavioural Product Planning and Roadmap
Refactoring to make certain all the little batches of little stories produced
by all the little teams still add up to whole (and maximum ROI) features.</p>

<h2>Continuous</h2>

<p>One of the chief complaints about SAFe is its punctuated delivery. SAFe relies
heavily on a quarterly <a href="">release train</a> integration pattern. This is good for
conservative organizations because it</p>

<p>But there&rsquo;s a heavy price to pay terms of losing ROI by keeping finisshed
features on ice, and integration overhead due to the large batch sizes and
exponentially increased cost of quality.</p>

<p>XSCALE avoids this penalty by dispensing with release trains in favour of
Feature teams, the GitFlow DVCS pattern, virtual environments, CD and BDD.</p>

<h2>Autonomous</h2>

<h2>Lean</h2>

<h2>Ecosystem</h2>

<h3>Lean Business Modelling</h3>

<h3>Business Bingo</h3>

<h3>Behavioural Product Planning</h3>

<h3>Roadmap Refactoring</h3>

<h3>Spotify Model + Iroquois Councils</h3>

<h3>Value Stream Kanban</h3>

<h3>Lean UX + BDD + XP</h3>

<h3>DevOps + CD + GitFlow</h3>

<h3>Chapters</h3>

<h3>Stream Council</h3>

<h3>Enterprise Council</h3>

<h3>Continuous Adaptation</h3>

<h2>The Red Pill</h2>
]]></content>
  </entry>
  
</feed>
