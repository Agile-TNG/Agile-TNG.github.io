<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: eXcellent | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/excellent/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-05-02T12:12:01+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a continuously delivering,
continuously self-organizing, continuously adaptive Agile enterprise ecosystem
that turns all the knobs to ten.</p>

<!-- more -->

<p><strong>[This post is currently in first draft - don’t take it seriously yet. I
hope to finish it today but welcome feedback both from my TNG compadres and
anyone else who happens by ….]</strong></p>

<h2 id="why-xscale">Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale
Agile. The best known are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
  <li>
    <p><a href="">SAFe</a> targets existing enterprises with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban,
quarterly <a href="">release trains</a>, and Scrum. SAFe is designed to enable an
organization to keep its component silos intact. It includes XP practices
but shys away from feature teams and continuous delivery.</p>
  </li>
  <li>
    <p><a href="">LeSS</a> is less comprehensive and more closely based on traditional Scrum.
It offers a high-collaboration, continuous cadence model that relies on
<a href="">Scrum of Scrums</a> to deal with integration and cross-cutting concerns. It
leaves out XP practices but includes feature teams. It’s also
big-change-up-front, requiring component silos to wholely refactor into
feature teams before commencing sprints. It is also less prescriptive,
leaving specifics of product planning, test automation and so on for teams
to determine ad hoc. </p>
  </li>
  <li>
    <p><a href="">The Spotify model</a> dispenses with Scrum in favour of a pattern of <a href="">Tribes
and Guilds</a>, strongly emphasizing bottom-up collaboration and team
autonomy.  It gives no prescription at all on team practices as it expects a
structure of top-flight autonomous teams is capable of deciding for
themselves how to choose, tailor and coordinate the rollout of Agile
practices. </p>
  </li>
</ul>

<p>XSCALE is an Agile enterprise framework based on the following premises:
* The Spotify model provides the best proven, scalable structural basis for an
  real Agile enterprise.
* XP practices, CD and Feature Teams are all essential to maximize Agile
  benefits at scale. They work together to assure technical debts are paid
  before they earn interest. 
* Big-change-up-front transformations of portfolios, programs and component
  teams hurt ROI and raise risks. It’s much better and easier to start with a
  small uncompromised Agile capability and grow it iteratively using something
  like the <a href="">Seven Samurai</a> pattern language. </p>

<p>XSCALE combines fully continuous and collaborative methods of planning,
delivery and transformation with consensus decision-making via Spotify and
<a href="">Iroquois Councils</a>.  It embeds XP engineering practices in an ecosystem of
Agile practice patterns from Lean Startup, BDD, Lean UX, Kanban, DevOps, CD
and OAPL to transform value streams to the Agile state of the art. </p>

<p>Nevertheless XSCALE does so in an iterative, stress-free way. Iterative
transformation to uncompromised Agile obtains the greatest benefit with the
lowest risk. No teams, programs or portfolios are ever expected to change but
the enterprise still transforms at its own pace, and the result is continuous
progress into a complete and uncompromised Agile enterprise.</p>

<h2 id="xscale-principles">XSCALE Principles</h2>

<p>XSCALE conforms with the <a href="">A:TNG values</a>, which form a strict superset of
those in the Agile Manifesto. As a practice pattern language XSCALE assumes
six principles that are also a superset of those in the Manifesto.</p>

<dl>
  <dt>eXcellent</dt>
  <dd>Pay technical debt before it incurs interest.</dd>
  <dt>Scale-symmetric</dt>
  <dd>Iterate distinctions to control combinations.</dd>
  <dt>Continuous</dt>
  <dd>Use the smallest practical cycle time and batch size.</dd>
  <dt>Autonomous</dt>
  <dd>Use consensus to make decisions and to delimit accountabilities.</dd>
  <dt>Lean</dt>
  <dd>Maximize net ROI.</dd>
  <dt>Ecosystem</dt>
  <dd>Continuous adaptation of the whole to its parts.</dd>
</dl>

<p>Detailed reasoning for each of these follows, and then the XSCALE practice
patterns that embody them.</p>

<h3 id="excellent">eXcellent</h3>

<p>The word “extreme” in the original XP caused a bad reaction that prompted the
effort to define the word “Agile” in a Manifesto. Even now, however, most
Agile software development teams use at least some XP practices. The best ones
use them all. So there’s proven value in XP. Ignoring the scary word, what is
that value?</p>

<p>XP mostly differs from the more accessible Scrum method in its engineering
practices - pair working, test-first automated testing, collective ownership,
continuous integration and merciless refactoring - which interlock to
continuously pay off technical debt. At scale such debts compound
exponentially, a ticking time-bomb that eventually sabotages throughput,
transparency and sustainability. So we define the “eXtreme principle” as:</p>

<p><strong>Pay technical debt before it incurs interest.</strong></p>

<p>XSCALE takes this principle and the XP engineering practices as a foundation
because that enormously reduces the risks of making combinations of Agile
teams work together. The Scrum practices of sprint reviews and retrospectives
are similarly eXtreme in that they define and action early pay-back of
analysis and process debt.</p>

<p>But let’s not call this principle “eXtreme” again. the Manifesto authors gave
us a principle that reads, “Continuous attention to technical excellence and
good design enhances agility”. XSCALE takes technical debt pay-back as the
meaning of “eXcellence”. So our X stands for that.</p>

<h3 id="scale-symmetric">Scale-symmetric</h3>

<p>Scale is about combinations of requirements, of dependencies, of defects, and
of people. The number of combinations of a set grows very rapidly; a set of
just 10 things has over 3.6 million distinct combinations.  So the principle
of scalability is to:</p>

<p><strong>Make distinctions to control combinations</strong></p>

<p>Agile already does this. It maps requirements to distinct features and
stories, mercilessly refactors design artefacts into distinct (<a href="">DRY</a>)
modules, automates testing and integration to iteratively distinguish good
system behaviours from bad, and refactors people into distinct feature teams
to minimize inter-team dependencies. </p>

<p>A potential violation of combinatorial scalability is found in the all-hands
release planning meetings and “town halls” in SAFe and LeSS. These fail to
distinguish small combinations of people and concerns, which means there’s a
risk of them failing to land properly. The Spotify / Iroquois team patterns
actively channel and reduce the scope of team conversations to limit the
combinatorial space.</p>

<p>Another scaling challenge comes from the problem of determining which
combinations of business alternatives have the most value. Because Agile works
as a hill-climbing algorithm, continously integrating little bits of
functionality into an existing whole, it’s actually happy to climb a molehill
of value when there’s an Everest of it right next door. </p>

<p>Breadth-First Product Roadmap, Behavioural Product Planning and Roadmap
Refactoring are patterns XSCALE uses to collect and distinguish alternatives
through sorting by relative value. This also serves to combine the work of
multiple teams into a single piece flow of whole features to maximize ROI
while respecting stream funding limits and MVP and CoD constraints. </p>

<h3 id="continuous">Continuous</h3>

<p>This principle is a key difference between XSCALE and SAFe. SAFe promotes
Punctuated Cadence over Continuous Delivery, employing a quarterly <a href="">release
train</a> integration pattern. This may appeal to conservative organizations
that don’t want to refactor their component silos, but several penalties come
with it:</p>

<ul>
  <li>Increased cost of quality due to deferring regression and acceptance testing
to “hardening sprints”.</li>
  <li>Wasted time in meetings to figure out how to satisfy combinatoric inter-team
dependency cycles.</li>
  <li>Lost ROI from keeping finished features on ice for a quarter rather than
releasing them as quickly as possible.</li>
  <li>Surprises and integration overhead due to the large batch sizes involved in
quarterly releasing.</li>
</ul>

<p>Because it employs continuous rather than big-bang transformation, XSCALE is
able to avoid these penalties by enabling uncompromised feature teams to use
the GitFlow pattern and environment mapping for continuous delivery via
continous refactoring and continuous integration. This benefits ROI,
adaptability, transparency and risk reduction. The principal is simply:</p>

<p><strong>Use the smallest practical cycle time and batch size</strong></p>

<p>XSCALE applies the same principle to continuous product planning using lean
canvases and breadth-first roadmaps, continuous stream coordination using
chapters and councils, and continuous coordination across streams using guilds
and treaties, </p>

<h3 id="autonomous">Autonomous</h3>

<p>People have long dreamt of an anarchic utopia where the only law is the
<a href="">Golden Rule</a>. As the scale of a group increases past the <a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar
Number</a>, however, the <a href="">Tragedy
of the Commons</a> inevitably leads to conflicts of interest that must be
controlled through more restrictive forms of society. </p>

<p>Many of the benefits of Agile derive from peer collaboration and team
consensus games like planning poker and retrospectives. It doesn’t seem
reasonable to call a process Agile at any scale if it doesn’t empower
consensus. So the XSCALE principle is:</p>

<p><strong>Use consensus to reach decisions and to delimit accountabilities.</strong></p>

<p>Rationally, individual accountability should be applied when the business cost
of delaying a decision is greater than the social cost of failing to maintain
consensus. The historical Iroquois Confederacy used unanimous consent at a
sub-Dunbar scale to govern a hierarchy of treaty-making councils. </p>

<p>Where consensus protocol was violated or timing called for an immediate
decision, per-tribe “war chiefs” were made accountable. This proved stable at
a multi-national scale over a period of centuries. XSCALE combines it with the
Spotify tribal model to scale consensus decisions while clearly maintaining
team and stream autonomy.</p>

<h3 id="lean">Lean</h3>

<p>Lean is often defined as “Minimizing Waste”. Unfortunately that definition
admits an ambiguity. <a href="">Lean Startup</a>, <a href="">Lean UX</a> and <a href="">LSD</a> use Lean almost
as synonymous with Agile, but command and control frameworks like Lean Six
Sigma and Lean Accounting interpret Lean to mean cost reduction over ROI and
hierarchical standardization over adaptive collaboration. </p>

<p>This makes the latter unsuited to our purpose in XSCALE.  To prevent confusion
XSCALE eliminates the ambiguity to define the principle simply as:</p>

<p><strong>Maximize net ROI</strong></p>

<p>We say net ROI in order to account for Cost of Delay and other factors in
projecting ROI over time. With this in mind XSCALE adapts several specific
Lean practice patterns:</p>

<ul>
  <li>As a special case of Breadth-first Roadmapping, Lean Startup’s <a href="">business
model canvas</a> to pivot and refactor the enterprise’s value streams</li>
  <li>Per stream <a href="">Value Stream Maps</a> converted to a <a href="">Lean Kanban</a> and
<a href="">cumulative flow diagrams</a> to represent the relationship between stream
funding, stream return, and the stream roadmap</li>
  <li><a href="">Product Teams</a> working cross-functionally per Lean UX to coordinate
<a href="">set-based-design</a> with lo-fi prototyping, BDD and Feature roadmaps</li>
  <li><a href="">Lean Transformation Canvas</a> as a roadmap for the <a href="">Seven Samurai</a>.</li>
</ul>

<p>These Lean practices all work to maximise net ROI. XSCALE interlocks them
using scale-symmetric roadmapping to render a stream funding cycle without
resorting to project budgets and baselines yet remaining continuously
responsive to metrics and learnings for the teams in the stream and for the
market for the stream’s output.</p>

<h3 id="ecosystem">Ecosystem</h3>

<p>We have become used to combining the noun ecosystem with the adjective
fragile. This is probably an artefact of the <a href="">anthropocene era</a> where most
living ecosystems are undergoing catastrophic change. The prime characteristic
of an ecosystem, however, is not fragility, but agility - that it embraces
cycles of change to maintain stable behaviours over time. </p>

<p>A living ecosystem differs from a jumble of creatures in a zoo in that it has
evolved to continuously adapt to cycles of change in the behaviour of its
constituent organisms.  Its principles are sex and death. Sex continously
generating experimental variations on behaviour, and death removing variations
that don’t efficiently adapt to the whole. </p>

<p>As humans our advantage over other creatures is our ability to anticipate
cycles of change so that we can adapt more rapidly than we evolve. In XSCALE
we can think of Lean pivoting and set-based design serving the function of
sex, and Agile refactoring serving that of death, but the principle of an
ecosystem remains the same:</p>

<p><strong>Continuous adaptation of the whole to its parts</strong></p>

<p>This isn’t just about products and their features, but the structure and
practices of teams in streams and streams in the enterprise. Naturally the
ecosystem principle turns the Taylorist conceit of all-wise managers and
serf-like workers on its head, leveraging the Agile function of management as
<a href="">servant-leaders</a> to autonomous teams of peer workers.</p>

<p>In order to pivot and refactor the enterprise as a whole, XSCALE relies on a
hierarchy of Iroquois councils: </p>

<ul>
  <li>chapters as groupings of people with common capabilities across squads </li>
  <li>stream councils composed of chapter representatives</li>
  <li>an enterrpise council composed of stream council representatives. </li>
</ul>

<p>At each level there are specific accountabilities defined by the teams.  Each
squad in a stream has distinct roles for agile coach and product owner.  Each
stream has a lead product owner and a lead coach. And the enterprise has its
executive officers. In XSCALE the accountabilities of these roles are defined
in Gherkin format by their respective councils.</p>

<h2 id="xscale-practice-patterns">XSCALE Practice Patterns</h2>

<p>XSCALE is “opinionated” in the same sense as <a href="">Ruby on Rails</a>.  This means
you’ll want to follow its practices very closely to begin with - because this
is how it “turns all the knobs to ten”.  </p>

<p>Because XSCALE isn’t a big-change-up-front framework, as it grows and you gain
experience the various councils will collaboratively vary its practices to
adapt them to the whole. Nevertheless, the following provides a well proven
starting point.</p>

<h3 id="enterprise-practices">Enterprise Practices</h3>

<p>The Taylorist view of an enterprise holds that it is a function of wise,
senior management to determine appropriate funding and resourcing for workers
in the enterprise’s value streams, with the workers accountable for following
management directions.</p>

<p>XSCALE adopts the <a href="">Beyond Budgeting</a> premise that each value stream must
either earn its keep or convince other, self-funded streams that it is worth
their investing some part of their revenue in it to fund it. This is not to
disempower any wise, senior managers you may happen to have, but to assure
that the entire enterprise pivots collaboratively to improve its ROI.</p>

<p>Therefore, while we describe the following patterns as “Enterprise Practices”,
this doesn’t mean they’re only performed in the stratosphere. These same
patterns are employed by squads, streams, and the enterprise council to
distinguish their available courses of action breadth-first, prioritise these
in terms of net ROI, and reconcile them with their avaialble funding levels. </p>

<h4 id="breadth-first-roadmapping">Breadth-first Roadmapping</h4>

<p><img src="/images/lean-startup.png"></p>

<p>Breadth-First Roadmapping (BFR) is a generalization of the Lean Startup
<a href="">Business Model Canvas</a> composed of simple, commonplace Agile practices -
story normal form, INVEST properties and categories of Gherkin acceptance
criteria. Its function is to assure complete consideration and common
understanding of a group’s delivery targets or courses of action, to a limited
depth.</p>

<p>XSCALE applies BFR at an enterprise level to determine what value streams are
required to realize a business model. At a stream level we use it to determine
the features of products and services required to achieve the stream’s
business objectives. And delivery squads can also use BFR to determine the
stories required to deliver a feature.</p>

<p>Therefore every BFR can be regarded as an expansion of a single, larger
scoping story.  It’s important to begin by describing this story in
<a href="">story-normal form</a> in order to scope roadmapping conversations to a single
shared intent.</p>

<p><img src="/images/roadmap0.png"></p>

<ul>
  <li>At every level, BFR takes the form of a roadmap of objectives and themes
where themes define categories of acceptance criteria. In other words each
theme represents a cross-cutting technical, business or user experience
concern.</li>
  <li>Each objective is expanded to a set of sub-features in story-normal form.
These features are checked to assure their INVEST compliance. The S in
INVEST is generalized to mean “scale similar” rather than just “small”.</li>
  <li>The intersection of a feature and a theme is simply a checkbox; each a box
can only contain a blank or a checkmark. A checkmark means there are
acceptance criteria for this feature in this theme. A blank means there
aren’t.</li>
</ul>

<p><img src="/images/roadmap1.png"></p>

<ul>
  <li>Each feature is evaluated against all themes. </li>
  <li>As each feature is evaluated, also consider whether there are acceptance
criteria in a category that isn’t yet part of the roadmap. If so, add a
column for that theme and re-evaluate all features to determine whether they
also have some acceptance criteria in it.</li>
  <li>It’s fine to modify or refactor features as you go so long as all the
roadmap’s boxes are updated consistently.</li>
</ul>

<p><img src="/images/roadmap2.png"></p>

<ul>
  <li>Evaluate each theme to determine whether it is sufficiently covered by
features to achieve the original scoping story.</li>
  <li>If not, the roadmap will be extended with extra features to assure the theme
is sufficiently covered, with these features subsequently evaluated in all
themes.</li>
  <li>If it appears that all features have the same pattern of checkboxes for two
themes, consider whether the two may be refactored into one.</li>
</ul>

<p><img src="/images/roadmap3.png"></p>

<ul>
  <li>If a theme has checkboxes for all or almost all features, break out further
features to encapsulate shared technical infrastructure to economically
support the commonalities.</li>
  <li>If a theme has no checkboxes ticked, it may simply be deleted. If it has
only a very small number ticked, it may be better to convert the sparse
theme into a feature.</li>
  <li>In general this  process continues until the team agrees that the roadmap is
complete or there is no more time available.</li>
</ul>

<p>To make this work it’s important to keep “breadth-first” in mind. The
roadmapping process may become long and onerous if features or themes are too
detailed for the scale of the roadmap. As each of its features will be
expanded into a roadmap at the next level down, until features are small
enough to constitute delivery stories, it’s counterproductive to over-specify.</p>

<h4 id="backlog-bingo">Backlog Bingo</h4>

<p>The original XP Planning Game, now popularly known as “Planning Poker”, is a
proven way for delivery teams to collaborate on estimating the relative effort
required to collaboratively deliver a set of stories. XSCALE generalizes
Planning Poker to make a method of determining the funding required to deliver
a set of products and services. </p>

<p>It does this by changing the unit of estimation from story points to feature
points. Where story points represent only the relative effort required to
deliver a story, feature points estimate increments of funding necesssary to
deploy a whole feature. Because the number of story points that will fit into
a funding increment depends on team velocity at the time of delivery, there’s
generally no linear mapping between feature points and story points.</p>

<p>Nevertheless, as Backlog Bingo gives feature points an empirical basis in
previously delivered features, feature points have proved very effective in
establishing a reasonable level of funding per feature. The game is played
like this:</p>

<ul>
  <li>
    <p>Write <a href="">Fibonacci numbers</a> from 1 to 89 on cards and lay them out in a row
across a large table. There’s nothing magical about Fibonacci numbers - we
use them because they consistently lead people to think in terms of
trade-offs - is feature A really as big as feature B + feature C, and so on.</p>
  </li>
  <li>
    <p>Select three previously delivered and deployed features with well documented
costs, one small, one medium and one large. Call these probes. Describe each
probe in story-normal form commensurable with the roadmap features you want
to estimate.</p>
  </li>
  <li>
    <p>Figure out a funding increment that constitutes the greatest common divisor
of the probes’ respective costs and call this a feature point. Place the
three probes under the Fibonacci numbers that match their respective
magnitudes in feature points. At 3, 13 and 55, for example.</p>
  </li>
  <li>
    <p>Pick a feature from your roadmap. Compare it with the probes starting with
the middle one to evaluate its relative size in Fibonacci multiples of
feature points.</p>
  </li>
  <li>
    <p>Continue to add features this way until there are none left to estimate. If
the estimators cannot agree on the estimate for a feature, encourage them
to split it into pieces that they can estimate separately.</p>
  </li>
</ul>

<p>Backlog Bingo can also be used withot the dollar basis to estimate relative
business value or uncertainty.  You simply pick 3 different probes that
provide a reasonable basis for whatever it is. And this is a good thing
because that’s exactly what we do in BPP.</p>

<h4 id="behavioural-product-planning">Behavioural Product Planning</h4>

<p>Behavioural Product Planning (BPP) is a simple consensus game to prioritise a
set of features in terms of ROI + COD. This is both easier and leaner
than the SAFe “Weighted Shortest Job First” (WSJF) equivalent. The game
builds on Backlog Bingo to assign values to:</p>

<ul>
  <li>effort in feature points</li>
  <li>business value / penalty</li>
</ul>

<p>Technical team members - developers, architects, designers and testers - play
he first bingo game. Product owners and stakeholders should be present and
should question any estimate they feel is too large or too small. They may
also clarify any feature they feel is not adequately defined.  Nevertheless
only technical team members can actually make effort estimates, and they must
make them unanimously, clarifying differences by conversation as they would in
planning poker.</p>

<p>Uncertainty can lead the technical team members to refuse to estimate a
feature. In this case they must clearly describe the ambiguities or
inconsistencies they need resolved by product owners in order to produce an
estimate. If part of the feature is not estimable but another part is, </p>

<ul>
  <li>the feature is split into two, </li>
  <li>the estimable feature is estimated</li>
  <li>the unestimable feature is deferred and a spike or set-based design feature
is created to represent the work of resolving the uncertinty.</li>
</ul>

<p>Divide the business value number, which represents expected return, by effort,
which represents the required investment. That yields relative return on
investment, which we call ROI.</p>

<p>Why? WSJF is defined by the formula (Business Value + Criticality + Risk-
Reduction-or-Opportunity-Enablement) / Duration. The trouble with this 
is</p>

<p>Worse, WSJF ignores MVP.</p>

<h4 id="roadmap-refactoring">Roadmap Refactoring</h4>

<h4 id="enterprise-council">Enterprise Council</h4>

<h3 id="stream-practices">Stream Practices</h3>

<p>By a Stream we mean a Spotify-structured tribe that self-organizes around
standardized Delivery and Adaptation Kanbans and an <a href="">Iroquois Council</a> made
up of rotating Chapter representatives, </p>

<h4 id="stream-kanban">Stream Kanban</h4>

<p><img src="images/stream-cf.png"></p>

<p>Every Stream is intended to generate a return. If the Stream is purely
internal then its return is regarded as equal to its funding. An external
facing Stream, however, may begin with an investment of funds by the
enterprise intended to kickstart sufficient external revenue that it becomes
self-funding and returns more than the funding it requires.</p>

<p>The return and the funding for a Stream can be represented on the same
cumulative flow diagram as its features because the features are sized, by
means of Business Bingo, in Feature Points that are each a multiple of a
certain amount of cash.</p>

<h4 id="adaptation-kanban">Adaptation Kanban</h4>

<p><img src="images/stream-kanban.png"></p>

<h4 id="stream-council">Stream Council</h4>

<h4 id="stream-funding-cycle">Stream Funding cycle</h4>

<h3 id="team-practices">Team Practices</h3>

<h4 id="devops--cd--gitflow">DevOps + CD + GitFlow</h4>

<ul>
  <li>
    <p>Iterations are 1 week long. Features (defined as groups of stories that when
deployed together will delivery some concrete business value) are assigned
one per delivery squad. Delivery is automated and features are delivered
asynchronously by squads as they’re completed.</p>
  </li>
  <li>
    <p>Per the Spotify model, each squad has all the skills and capabilities it
needs to delivery a feature. Per DevOps, Ops forms a chapter that does not
gate deployment, but provides delivery squads with automated deployment
tools and channels that enable them to test and integrate stories and deploy
features independently.</p>
  </li>
  <li>
    <p>Ops maintains virtualization via Mock Objects, Data Fixtures, BDD step
implementations and <a href="">Service Virtualization Tools</a> to assure that tests
cannot interfere with one another and that the behaviour of virtual and
production-like SIT environments is equivalent under test.</p>
  </li>
</ul>

<h4 id="lean-ux--bdd--xp">Lean UX + BDD + XP</h4>

<ul>
  <li>
    <p>Streams use the Lean UX <a href="">Product Team</a> pattern where designers, analysts,
SMEs, architects and product owners work together to break features down
into stories to supply a set of delivery squads. To comform with the Spotify
structure the Product Team takes the form of a chapter. Whenever the Product
chapter is not meeting its members spend time collaborating with the
delivery squads.</p>
  </li>
  <li>
    <p>Stories are produced in <a href="">Gherkin</a> format factored to maintain <a href="">INVEST</a>
properties. Squads get together with the Product Team every Wednesday
afternoon to estimate its latest batch of stories.</p>
  </li>
  <li>
    <p>A story with INVEST defects is returned without an estiamte to the Product
Team for clarification. Otherwise the throughput of the Product Team is
graphed on the <a href="">Stream CF diagram</a> in terms of new estimated story points
per week.</p>
  </li>
  <li>
    <p>Squads hold reviews and retrospectives every Friday and task breakout
sessions every Monday. Their CF diagrams roll up together to inform the
Stream CF diagram’s metrics for implemented stories, integrated stories,
and deployed features.</p>
  </li>
</ul>

<h4 id="chapter-and-squad-meetings">Chapter and Squad meetings</h4>

<ul>
  <li>
    <p>All of a stream’s chapters meet simultaneously every Friday lunch so that
squad activites are minimally interrupted. Chapters may also meet at other
times with the permission of their Stream Council.</p>
  </li>
  <li>
    <p>At the Friday lunch meeting a Chapter selects its representative for the
Stream Council, which is conducted immediately afterward while squads are
conducting their weekly reviews.</p>
  </li>
  <li>
    <p>Squad retrospectives are held immediately following the Stream Council
meeting so that any treaties proposed by Council can be immediately and
unanimously ratified. If ratification of a treaty is not achieved, a further
Conuncil meeting may be held immediately after the squad retros to sort the
matter out. If polarization occurs here then the Stream lead may force
temporary (1 week) adoption of a treaty to enable discussions to continue.
See more details on this below.</p>
  </li>
  <li>
    <p>Chapters track treaties in an Adaptation Kanban with work states of
Awareness, Architecture, Adoption, Acceleration and Acceptance. This kanban
rolls up to inform the Stream Council’s Adaptation Kanban. </p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
