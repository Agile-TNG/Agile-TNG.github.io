<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lean | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/lean/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-04-24T10:11:54+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE:<br>XP-based <br> Scalable <br> Continuous <br> Autonomous <br> Lean Ecosystem]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>XSCALE is a pattern language for a continously delivering, continously
self-organizing, continuously adaptive Agile enterprise that turns all the
knobs to ten.</p>

<!-- more -->


<h2>Why XSCALE?</h2>

<p>Agile has become a tangle of competing processes. If it were a software
project we&rsquo;d call it a <a href="">big ball of mud</a>, overdue for refactoring. Each of
the trademark processes has distinctive value to offer, but we need a way to
integrate them, refactor them, and get them ready to embrace the next Agile
innovation.</p>

<p>XSCALE does this. It&rsquo;s a combination of the best of the current state of the
Agile art &ndash; proven practice patterns from XP, Lean Startup, BDD, Lean UX,
Spotify, Lean Kanban, DevOps, CD and TNG refactored to work together at scale.</p>

<h2>XP-based</h2>

<p>We left out an important word in that laundry list. Scrum.  Well, Scrum is
really just a watered-down version of XP. If you do XP you already do all the
Scrum practices. Full XP, however, enormously simplifies the job of making
combinations of teams scale.</p>

<p>Why? Because without XP&rsquo;s pair working, test automation, collective code
ownership, continuous integration and merciless refactoring &ndash; the &ldquo;hard bits&rdquo;
of Agile that Scrum leaves out, technical debt inevitably increases over time.
That means rework and surprises, and those things cascade at scale.</p>

<h2>Scalable</h2>

<p>Scalability has to do with combinations. Combinations of requirements, of
dependencies, of defects, and of people. The number of combinations of a set
of N things is N factorial (meaning N times N-1 times N-2 and so on). This
function grows extremely fast. The number of cominations of just 10 things,
for example, is over 3.6 million. Combinations are killers!</p>

<p>This is why Waterfall fails so spectacularly.</p>

<h2>Continuous</h2>

<h2>Autonomous</h2>

<h2>Lean</h2>

<h2>Ecosystem</h2>

<h3>Lean Business Modelling</h3>

<h3>Business Bingo</h3>

<h3>Behavioural Product Planning</h3>

<h3>Roadmap Refactoring</h3>

<h3>Spotify Model + Iroquois Councils</h3>

<h3>Value Stream Kanban</h3>

<h3>Lean UX + BDD + XP</h3>

<h3>DevOps + CD + GitFlow</h3>

<h3>Chapters</h3>

<h3>Stream Council</h3>

<h3>Enterprise Council</h3>

<h3>Continuous Adaptation</h3>

<h2>The Red Pill</h2>
]]></content>
  </entry>
  
</feed>
