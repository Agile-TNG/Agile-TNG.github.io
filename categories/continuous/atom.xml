<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous | Agile: The Next Generation]]></title>
  <link href="http://Agile-TNG.github.io/categories/continuous/atom.xml" rel="self"/>
  <link href="http://Agile-TNG.github.io/"/>
  <updated>2014-05-04T10:32:45+10:00</updated>
  <id>http://Agile-TNG.github.io/</id>
  <author>
    <name><![CDATA[A:TNG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSCALE: Beyond SAFe and LeSS]]></title>
    <link href="http://Agile-TNG.github.io/2014/04/21/xscale/"/>
    <updated>2014-04-21T20:46:55+10:00</updated>
    <id>http://Agile-TNG.github.io/2014/04/21/xscale</id>
    <content type="html"><![CDATA[<p><img src="/images/xscale.png"></p>

<p>Reflecting our work over recent years, XSCALE is a continuously delivering,
continuously self-organizing, continuously adaptive Agile enterprise
ecosystem that turns all the knobs to ten.</p>

<!-- more -->

<p><strong>[This post is currently in first draft - don’t take it seriously yet. I
hope to finish it today but welcome feedback both from my TNG compadres and
anyone else who happens by ….]</strong></p>

<h2 id="why-xscale">Why XSCALE?</h2>

<p>There have been several efforts to provide enterprises with a way to scale
Agile. The most popular are SAFe, LeSS, and the Spotify Tribal model. Each
has its strengths and weaknesses.</p>

<ul>
  <li>
    <p><a href="">SAFe</a> targets existing enterprises with a low-discipline, top-down,
big-change-up-front, punctuated cadence model that combines Kanban,
quarterly <a href="">release trains</a>, XP and Scrum. SAFe is a good starting point
for more conservative organizations because it’s designed to enable
agility while keeping component silos intact. Nevertheless it shys away
from feature teams and continuous delivery, and while it targets scale it
ignores the key enabler of scale-symmetry.</p>
  </li>
  <li>
    <p><a href="">LeSS</a>/Agile Path/Enterprise Scrum, etc., are alternatives more closely
based on traditional Scrum. They offer high-collaboration, continuous
cadence models that rely on <a href="">Scrum of Scrums</a> to deal with integration
and cross-cutting concerns. XP practices are optional but feature teams
are mandatory. LeSS is big-change-up-front but Agile Path is an iterative
alternative. All leave specific practices for product planning, test
automation and so on for teams to determine ad hoc. </p>
  </li>
  <li>
    <p><a href="">The Spotify model</a> dispenses with Scrum in favour of a pattern of
<a href="">Tribes and Guilds</a>, strongly emphasizing bottom-up collaboration and
team autonomy.  It gives no prescription at all on team practices as it
expects a structure of top-flight autonomous teams is capable of deciding
for themselves how to choose, tailor and coordinate the rollout of Agile
practices. </p>
  </li>
</ul>

<p>XSCALE is the first enterprise agile framework based on full XP, CD and
feature teams. It can do this because instead of big-change-up-front, it
starts with a small but uncompromised Agile capability and then grows it
iteratively using the <a href="">Seven Samurai</a> change patterns. </p>

<p>This iterative transformation to uncompromised Agile simply obtains the
greatest benefit with the lowest risk. No teams, programs or portfolios are
ever expected to change yet the enterprise transforms completely and at its
own pace. The result is a fully integrated and uncompromised Agile
capability at every step of the journey, and zero disruption to existing
value streams.</p>

<h2 id="xscale-principles">XSCALE Principles</h2>

<p>XSCALE conforms with the <a href="">A:TNG values</a>, which form a strict superset of
those in the Agile Manifesto. XSCALE further assumes six principles that
also form a superset of those in the Manifesto.</p>

<dl>
  <dt>eXcellent</dt>
  <dd>Turn all the knobs to ten.</dd>
  <dt>Scale-symmetric</dt>
  <dd>Iterate distinctions to control combinations.</dd>
  <dt>Continuous</dt>
  <dd>Use the smallest practical cycle time and batch size.</dd>
  <dt>Autonomous</dt>
  <dd>Use consensus to make decisions and to delimit accountabilities.</dd>
  <dt>Lean</dt>
  <dd>Maximize net ROI.</dd>
  <dt>Ecosystem</dt>
  <dd>Continuous adaptation of the whole to its parts.</dd>
</dl>

<p>Detailed reasoning for each of these follows, and then the XSCALE practice
patterns that embody them.</p>

<h3 id="excellent">eXcellent</h3>

<p>The word “extreme” in the original XP was controversial, and instrumental in
prompting the effort to focus the Manifesto on another word entirely.  The
Nevertheless the manifesto authors recognized its importance in a principle
that reads, “Continuous attention to technical excellence and good design
enhances agility”. XSCALE calls such continuous attention “eXcellent” and
sums it up using Kent Beck’s famous XP maxim:</p>

<p><strong>Turn all the knobs to ten</strong>.</p>

<p>XSCALE regards the XP engineering practices, BDD, CD and Feature Teams as
the fundamentals of technical excellence. These patterns interlock to assure
technical debts are paid before they earn interest, thereby keeping the
delivery process stable, predictable and flexible. </p>

<h3 id="scale-symmetric">Scale-symmetric</h3>

<p>Scale is about combinations of requirements, of dependencies, of defects,
and of people. The number of combinations of a set grows very rapidly; a set
of just 10 things has over 3.6 million distinct combinations. </p>

<p>Yet golfers are untroubled by vast fields of grass blades.  They use just a
few distinctions to control for the combined blade behaviours: “the green”,
“the fairway”, “the rough”, and so on Golfers never even think about
combinations of individual grass blades. </p>

<p>Agile already uses this when it 
* maps requirements to distinct features and stories
* refactors code into distinct (<a href="">DRY</a>) classes
* automates integration to distinguish good behaviours from bad
* combines people into distinct feature teams to limit interdependencies.  </p>

<p>The Spotify / Iroquois patterns also do it by limiting the scope of
conversations to small teams with specific concerns.  And XSCALE takes the
same approach. The principle is:</p>

<p><strong>Iterate distinctions to control combinations</strong></p>

<p>A commonplace scaling challenge is the problem of determining which
combinations of business alternatives have most value. All a small project
needs to do so is a good product owner. When you’ve got portfolios of
programs of projects, however, it gets hard.  Agile works as a hill-climbing
algorithm, continously integrating little stories into a whole, and it’s
actually quite happy to climb a molehill of value when there’s an Everest of
it right next door.  </p>

<p>To control this XSCALE uses the Behavioral Product Planning consensus game,
which sorts breadth-first distinctions about business alternatives into
easily optimized piles. The trick is simply to iterate the game to
make decisions about alternatives at finer and finer scales. </p>

<h3 id="continuous">Continuous</h3>

<p>SAFe promotes Punctuated Cadence over Continuous Delivery, employing a
quarterly <a href="">release train</a> integration pattern. This enables conservative
organizations to keep their component silos, but at no small price:</p>

<ul>
  <li>Increased cost of quality due to deferring regression and acceptance
testing to “hardening sprints”.</li>
  <li>Wasted time in meetings to figure out how to satisfy combinatoric
inter-team dependency cycles.</li>
  <li>Lost ROI from keeping finished features on ice for a quarter rather than
releasing them as soon as they pass all tests..</li>
  <li>Surprises and integration overhead due to the large batch sizes involved
in quarterly releasing.</li>
</ul>

<p>Because it employs continuous rather than big-bang transformation, XSCALE is
able to avoid these penalties by enabling feature teams to use the GitFlow
pattern language for continuous delivery. The principal is simply:</p>

<p><strong>Always use the smallest practical cycle time and batch size</strong></p>

<p>XSCALE further applies this in its continuous product planning, continuous
stream coordination, and continuous transformation patterns.</p>

<h3 id="autonomous">Autonomous</h3>

<p>Philosophers dream of an anarchic utopia where the only law is the <a href="">Golden
Rule</a>. As the scale of a group increases past the <a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar
Number</a>, however, social
obligations combinatorially degrade so the <a href="">Tragedy of the Commons</a> leads
to conflicts of interest that must be controlled through more restrictive
forms of society. </p>

<p>Many of the benefits of Agile derive from peer collaboration and team
consensus games like planning poker and retrospectives, and it wouldn’t be
reasonable to call a process Agile at any scale if it doesn’t empower
consensus through games. So the XSCALE principle is:</p>

<p><strong>Use consensus games to reach decisions and to delimit accountabilities.</strong></p>

<p>In theory, individual accountability should be applied when the business
cost of delaying a decision is greater than the social cost of failing to
maintain consensus. In practice it’s hard to figure these costs out.
Historically the happiest medium seems to have been the Iroquois
Confederacy, which used unanimous consent at sub-Dunbar scales to control a
hierarchy of peer councils. </p>

<p>Where consensus protocol was violated or timing called for a rapid decision,
per-tribe “war chiefs” were made accountable. This combination of councils
and accountables proved stable at a multi-national scale over a period of
centuries. XSCALE combines it with the Spotify tribal model to scale
consensus decisions while clearly maintaining team and stream autonomy.</p>

<h3 id="lean">Lean</h3>

<p>Lean is often defined as “Minimizing Waste”. Unfortunately that definition
admits an ambiguity. <a href="">Lean Startup</a>, <a href="">Lean UX</a> and <a href="">LSD</a> use Lean almost
as synonymous with Agile, but command and control frameworks like Lean Six
Sigma and Lean Accounting interpret Lean to mean cost reduction over ROI and
hierarchical standardization over adaptive collaboration. </p>

<p>This makes the latter unsuited to our purpose in XSCALE.  To prevent confusion
XSCALE eliminates the ambiguity to define the principle simply as:</p>

<p><strong>Maximize net ROI</strong></p>

<p>We say net ROI in order to account for Cost of Delay and other factors in
projecting ROI over time. With this in mind XSCALE adapts several specific
Lean practice patterns:</p>

<ul>
  <li>As a special case of Breadth-first Roadmapping, Lean Startup’s <a href="">business
model canvas</a> to pivot and refactor the enterprise’s value streams</li>
  <li>Per stream <a href="">Value Stream Maps</a> converted to a <a href="">Lean Kanban</a> and
<a href="">cumulative flow diagrams</a> to represent the relationship between stream
funding, stream return, and the stream roadmap</li>
  <li><a href="">Product Teams</a> working cross-functionally per Lean UX to coordinate
<a href="">set-based-design</a> with lo-fi prototyping, BDD and Feature roadmaps</li>
  <li><a href="">Lean Transformation Canvas</a> as a roadmap for the <a href="">Seven Samurai</a>.</li>
</ul>

<p>These Lean practices all work to maximise net ROI. XSCALE interlocks them
using scale-symmetric roadmapping to render a stream funding cycle without
resorting to project budgets and baselines yet remaining continuously
responsive to metrics and learnings for the teams in the stream and for the
market for the stream’s output.</p>

<h3 id="ecosystem">Ecosystem</h3>

<p>We have become used to combining the noun ecosystem with the adjective
fragile. This is probably an artefact of the <a href="">anthropocene era</a> where most
living ecosystems are undergoing catastrophic change. The prime characteristic
of an ecosystem, however, is not fragility, but agility - that it embraces
cycles of change to maintain stable behaviours over time. </p>

<p>A living ecosystem differs from a jumble of creatures in a zoo in that it has
evolved to continuously adapt to cycles of change in the behaviour of its
constituent organisms.  Its principles are sex and death. Sex continously
generating experimental variations on behaviour, and death removing variations
that don’t efficiently adapt to the whole. </p>

<p>As humans our advantage over other creatures is our ability to anticipate
cycles of change so that we can adapt more rapidly than we evolve. In XSCALE
we can think of Lean pivoting and set-based design serving the function of
sex, and Agile refactoring serving that of death, but the principle of an
ecosystem remains the same:</p>

<p><strong>Continuous adaptation of the whole to its parts</strong></p>

<p>This isn’t just about products and their features, but the structure and
practices of teams in streams and streams in the enterprise. Naturally the
ecosystem principle turns the Taylorist conceit of all-wise managers and
serf-like workers on its head, leveraging the Agile function of management as
<a href="">servant-leaders</a> to autonomous teams of peer workers.</p>

<p>In order to pivot and refactor the enterprise as a whole, XSCALE relies on a
hierarchy of Iroquois councils: </p>

<ul>
  <li>chapters as groupings of people with common capabilities across squads </li>
  <li>stream councils composed of chapter representatives</li>
  <li>an enterrpise council composed of stream council representatives. </li>
</ul>

<p>At each level there are specific accountabilities defined by the teams.  Each
squad in a stream has distinct roles for agile coach and product owner.  Each
stream has a lead product owner and a lead coach. And the enterprise has its
executive officers. In XSCALE the accountabilities of these roles are defined
in Gherkin format by their respective councils.</p>

<h2 id="xscale-practice-patterns">XSCALE Practice Patterns</h2>

<p>XSCALE is “opinionated” in the same sense as <a href="">Ruby on Rails</a>.  This means
you’ll want to follow its practices very closely to begin with - because this
is how it “turns all the knobs to ten”.  </p>

<p>Because XSCALE isn’t a big-change-up-front framework, as it grows and you gain
experience the various councils will collaboratively vary its practices to
adapt them to the whole. Nevertheless, the following provides a well proven
starting point.</p>

<h3 id="enterprise-practices">Enterprise Practices</h3>

<p>The Taylorist view of an enterprise holds that it is a function of wise,
senior management to determine appropriate funding and resourcing for workers
in the enterprise’s value streams, with the workers accountable for following
management directions.</p>

<p>XSCALE adopts the <a href="">Beyond Budgeting</a> premise that each value stream must
either earn its keep or convince other, self-funded streams that it is worth
their investing some part of their revenue in it to fund it. This is not to
disempower any wise, senior managers you may happen to have, but to assure
that the entire enterprise pivots collaboratively to improve its ROI.</p>

<p>Therefore, while we describe the following patterns as “Enterprise Practices”,
this doesn’t mean they’re only performed in the stratosphere. These same
patterns are employed by squads, streams, and the enterprise council to
distinguish their available courses of action breadth-first, prioritise these
in terms of net ROI, and reconcile them with their avaialble funding levels. </p>

<h4 id="breadth-first-roadmap">Breadth-First Roadmap</h4>

<p><img src="/images/lean-startup.png"></p>

<p>Breadth-First Roadmap (BFR) is a generalization of the Lean Startup <a href="">Business
Model Canvas</a> composed of simple, commonplace Agile practices - story normal
form, INVEST properties and categories of BDD acceptance criteria. Its
function is to concrete shared understanding of a group’s delivery targets or
courses of action, and assure complete analysis of same to a limited depth.</p>

<p>XSCALE applies BFR at an enterprise level to determine what value streams are
required to realize a business model. At a stream level we use it to determine
the features of products and services required to achieve the stream’s
business objectives. And delivery squads can also use BFR to determine the
stories required to deliver a feature.</p>

<p>Therefore every BFR can be regarded as an expansion of a single, larger
<strong>scoping story</strong>.  It’s important to begin by describing this story in
<a href="">story-normal form</a> in order to scope roadmapping conversations to a single
shared intent.</p>

<p><img src="/images/roadmap0.png"></p>

<ul>
  <li>At every level, BFR takes the form of a matrix of objectives and themes
where a theme defines a category of acceptance criteria for a cross-cutting
technical, business or user experience concern and the objectives combine to
satisfy the scoping story respecting these themes.</li>
  <li>Each objective expands to a set of sub-features in story-normal form.  These
features are checked to assure their INVEST compliance. Here the S in INVEST
is generalized to mean “scale similar” rather than just “small”.</li>
  <li>The intersection of a feature and a theme is simply a checkbox; each box can
only contain a blank or a checkmark. A checkmark means there are acceptance
criteria for this feature in this theme and a blank means there aren’t.</li>
</ul>

<p><img src="/images/roadmap1.png"></p>

<ul>
  <li>Each feature is evaluated against all themes. </li>
  <li>As each feature is evaluated, also consider whether there are acceptance
criteria in a theme that isn’t yet part of the roadmap. If so, add a column
for that theme and re-evaluate all the features to determine whether they
also have some acceptance criteria in it.</li>
  <li>It’s fine to modify or refactor features as you go so long as all the
roadmap’s boxes are consistently updated.</li>
</ul>

<p><img src="/images/roadmap2.png"></p>

<ul>
  <li>Evaluate each theme to determine whether it is sufficiently covered by
features to achieve the scoping story.</li>
  <li>If not, the roadmap should be extended with extra features to assure the
theme is sufficiently covered, with these features subsequently evaluated in
all themes.</li>
  <li>If it appears that all features have the same pattern of checkboxes for two
themes, consider whether those two may be refactored into one.</li>
</ul>

<p><img src="/images/roadmap3.png"></p>

<ul>
  <li>If a theme has checkboxes for all or almost all features, break out further
features to encapsulate shared technical infrastructure to economically
support the commonalities. We call these <strong>technical features</strong>.</li>
  <li>If a theme has no checkboxes ticked, it may simply be deleted. If it has
only a very small number ticked, it may be better to convert the sparse
theme into a feature.</li>
  <li>In general this  process continues until the team agrees that the roadmap is
complete or there is no more time available.</li>
</ul>

<p>To use BFR properly it’s important to keep “breadth-first” in mind. The
roadmapping process may become long and onerous if features and themes are too
numerous or detailed for the scale of the roadmap. Each feature will be
expanded into a further roadmap at the next level down until they’re small
enough to constitute delivery stories. So it’s counterproductive to
over-specify them.</p>

<h4 id="backlog-bingo">Backlog Bingo</h4>

<p>The original XP Planning Game, now known as “Planning Poker”, is a proven way
for delivery teams to collaborate on estimating the relative effort required
to collaboratively deliver a set of stories. XSCALE generalizes Planning Poker
to make a method of determining the funding required to deliver a set of
products and services. </p>

<p>It does this by changing the unit of estimation from story points to <strong>feature
points</strong>. Where story points represent only the relative effort required to
deliver a story, feature points estimate increments of funding necesssary to
deploy a whole feature. Because the number of story points that will fit into
a funding increment depends on team velocity at the time of delivery, there’s
no need to dream up a linear mapping between feature points and story points.</p>

<p>Nevertheless, as Backlog Bingo gives feature points an empirical basis in
previously delivered features, feature points are very effective in
establishing a reasonable level of funding per feature. </p>

<p>Backlog Bingo is very quick and easy to play:</p>

<ul>
  <li>
    <p>Write <a href="">Fibonacci numbers</a> from 1 to 89 on cards and lay them out in a row
across a large table. There’s nothing magical about Fibonacci numbers - we
use them because they consistently lead people to think in terms of
trade-offs - is feature A really as big as feature B + feature C, and so on.</p>
  </li>
  <li>
    <p>Select three previously delivered and deployed features with well documented
costs, one small, one medium and one large. Call these <strong>probes</strong>. Describe
each probe in story-normal form commensurable with the roadmap features you
want to estimate.</p>
  </li>
  <li>
    <p>Figure out a funding increment that constitutes the greatest common divisor
of the probes’ respective costs and call this a feature point. Place the
three probes under the Fibonacci numbers that match their respective
magnitudes in feature points. </p>
  </li>
  <li>
    <p>Pick a feature from your roadmap. Compare it with the probes, starting with
the middle one, to evaluate its relative size in Fibonacci multiples of
feature points.</p>
  </li>
  <li>
    <p>As you add features, sort them into the appropriate Fibonacci column.
Continue to compare features this way until there are none left to compare.
If the estimators cannot agree on the Fibonacci number for a feature,
split it into pieces they can estimate separately.</p>
  </li>
</ul>

<p>Backlog Bingo can also be used without a dollar basis to estimate relative
business value. You simply pick a different set of 3 probes - one for an
existing deployed feature that the PO says has low business value, and then
one that’s crticially important to business function, and then one roughly in
between. Place them at 3, 13 and 55, respectively, and the rest of the Bingo
game runs as above.</p>

<h4 id="behavioral-product-planning">Behavioral Product Planning</h4>

<p>Behavioral Product Planning (BPP) is a simple consensus game that uses Backlog
Bingo to prioritise the BFR in terms of ROI + COD. This is both easier and
leaner than the SAFe “Weighted Shortest Job First” (WSJF) equivalent. The game
uses Backlog Bingo to assign values to the BFR features in terms of:</p>

<ul>
  <li>effort in feature points</li>
  <li>relative business value</li>
</ul>

<p>Technical team members - developers, architects, designers and testers - play
the first bingo game. Product owners and stakeholders are present to answer
questions and also to question any estimate they feel is too large or too
small. Usually this is a sign of a missing conversation, in which case the
matter can be resolved immediately. Sometimes it’s an indicator of
uncertainty, about which see below.</p>

<p>The second bingo game reverses the rules. Now it’s business stakeholders,
business SMEs and ultimately the product owner who work together to estimate
business value while technical team members ask and answer questions. Note
that business value includes things that don’t provide revenue but simply
reduce risk.</p>

<p>In any case, only technical team members can make effort estimates, and only
business team members can make business value estimates. They each attempt to
make these unanimously by clarifying differences together as they would in
planning poker. </p>

<p>Once each feature has both numbers, prioritisation involves three steps:</p>

<ul>
  <li>Divide the business value number, which represents expected return, by
effort, which represents the required investment to obtain the return. This
yields relative return on investment, which we call ROI.</li>
  <li>List features vertically in order of decreasing ROI. Let the PO increase the
priority of any business feature they feel has a Cost of Delay that warrants
this.</li>
  <li>Once the PO is content with the prioritisation of business features, let
technical team members increase the priority of any technical feature they
feel has a CoD that warrants this. In order to minimize the overall cost of
maintenance, a technical feature should have a priority no more than one
position higher than the highest prioity feature that depends upon it.</li>
</ul>

<p>Once these adjustments have been made, record the relative priorities of the
features to prepare them for Roadmap Refactoring, which determines how to best
fit them given funding constraints and MVP per objective. See details below.</p>

<h4 id="uncertainty">Uncertainty</h4>

<p>Uncertainty can lead technical team members to refuse to estimate a feature.
In this case they must clearly describe the ambiguities or inconsistencies
they need resolved by the product owner in order to produce an estimate. If
the product owner can’t resolve the entire problem, and part of the feature is
estimable but another part is not:</p>

<ul>
  <li>the feature is split into two, </li>
  <li>the estimable part is estimated</li>
  <li>a new technical feature is created to represent the work of resolving the
uncertainty via <a href="">spikes</a> or a <a href="">set-based design</a> process.</li>
  <li>estimating the inestimable feature is deferred until the technical feature
it depends upon is completed.</li>
</ul>

<p>If a large number of features are inestimable it’s usually a good idea to
defer this backlog bingo session until the team has had time to work with
architects and designers to nail dependencies down a bit better, or analysts
have sufficient time to resolve unsolved business questions.</p>

<h4 id="bpp-vs-wsjf">BPP vs WSJF</h4>

<p>Why not WSJF? WSJF is defined in SAFe by the formula (Business/User Value +
Criticality + Risk-Reduction-or-Opportunity-Enablement) / Duration. Since
there’s no clear distinction between business value, risk reduction and
opportunity enablement, nor between criticality and Cost of Delay, this
simplifies to (Business Value / Dureation) + (Criticality / Duration).</p>

<p>There are several problems with WSJF:
0. It doesn’t makes sense to divide criticality by duration. 
-  Without clear relative distinctions, which aren’t provided by SAFe
   there’s no way to assure that these things are independent, thereby
   distorting relative Business Value in an unpredictable way.
-  By favoring these things out and giving them equal weighting you actively
   prevent conversations that would reveal the differing assumptions they’re
   based on.
-  WSJF provides no opportunity to account for how combinaitons of features
   may make render individual feature more or less valuable.
-  WSJF doesn’t account for technical CoD. It’s completely blind to the
   fact that some features may have high CoD because of architectural
   concerns or business uncertainty. It just leaves that out.</p>

<p>All of these problems are eliminated simply by BPP. Once you’ve factored out
ROI, it’s trivial for team members to determine the remaining CoD.  And
rather than adding in CoD as if it were linear, which it’s not, it’s trivial
for team members to adjust an ROI prioritization by discrete CoD, including
technical CoD. It’s quick, easy and completely unambiguous.</p>

<h4 id="roadmap-refactoring">Roadmap Refactoring</h4>

<p>Roadmap Refactoring is a consensus game that leverages BPP to enable product
owners to make rational trade-offs between different feature-sets. It can be
used to quickly assemble release plan to hit a particular date, if need be,
or to  ZZ</p>

<p>takes the prioritized feature
list, grouped by epic, costs </p>

<h4 id="enterprise-council">Enterprise Council</h4>

<h3 id="stream-practices">Stream Practices</h3>

<p>By a Stream we mean a Spotify-structured tribe that self-organizes around
standardized Delivery and Adaptation Kanbans and an <a href="">Iroquois Council</a> made
up of rotating Chapter representatives, </p>

<h4 id="stream-kanban">Stream Kanban</h4>

<p><img src="images/stream-cf.png"></p>

<p>Every Stream is intended to generate a return. If the Stream is purely
internal then its return is regarded as equal to its funding. An external
facing Stream, however, may begin with an investment of funds by the
enterprise intended to kickstart sufficient external revenue that it becomes
self-funding and returns more than the funding it requires.</p>

<p>The return and the funding for a Stream can be represented on the same
cumulative flow diagram as its features because the features are sized, by
means of Business Bingo, in Feature Points that are each a multiple of a
certain amount of cash.</p>

<h4 id="adaptation-kanban">Adaptation Kanban</h4>

<p><img src="images/stream-kanban.png"></p>

<h4 id="stream-council">Stream Council</h4>

<h4 id="stream-funding-cycle">Stream Funding cycle</h4>

<h3 id="team-practices">Team Practices</h3>

<h4 id="devops--cd--gitflow">DevOps + CD + GitFlow</h4>

<ul>
  <li>
    <p>Iterations are 1 week long. Features (defined as groups of stories that when
deployed together will delivery some concrete business value) are assigned
one per delivery squad. Delivery is automated and features are delivered
asynchronously by squads as they’re completed.</p>
  </li>
  <li>
    <p>Per the Spotify model, each squad has all the skills and capabilities it
needs to delivery a feature. Per DevOps, Ops forms a chapter that does not
gate deployment, but provides delivery squads with automated deployment
tools and channels that enable them to test and integrate stories and deploy
features independently.</p>
  </li>
  <li>
    <p>Ops maintains virtualization via Mock Objects, Data Fixtures, BDD step
implementations and <a href="">Service Virtualization Tools</a> to assure that tests
cannot interfere with one another and that the behaviour of virtual and
production-like SIT environments is equivalent under test.</p>
  </li>
</ul>

<h4 id="lean-ux--bdd--xp">Lean UX + BDD + XP</h4>

<ul>
  <li>
    <p>Streams use the Lean UX <a href="">Product Team</a> pattern where designers, analysts,
SMEs, architects and product owners work together to break features down
into stories to supply a set of delivery squads. To comform with the Spotify
structure the Product Team takes the form of a chapter. Whenever the Product
chapter is not meeting its members spend time collaborating with the
delivery squads.</p>
  </li>
  <li>
    <p>Stories are produced in <a href="">Gherkin</a> format factored to maintain <a href="">INVEST</a>
properties. Squads get together with the Product Team every Wednesday
afternoon to estimate its latest batch of stories.</p>
  </li>
  <li>
    <p>A story with INVEST defects is returned without an estiamte to the Product
Team for clarification. Otherwise the throughput of the Product Team is
graphed on the <a href="">Stream CF diagram</a> in terms of new estimated story points
per week.</p>
  </li>
  <li>
    <p>Squads hold reviews and retrospectives every Friday and task breakout
sessions every Monday. Their CF diagrams roll up together to inform the
Stream CF diagram’s metrics for implemented stories, integrated stories,
and deployed features.</p>
  </li>
</ul>

<h4 id="chapter-and-squad-meetings">Chapter and Squad meetings</h4>

<ul>
  <li>
    <p>All of a stream’s chapters meet simultaneously every Friday lunch so that
squad activites are minimally interrupted. Chapters may also meet at other
times with the permission of their Stream Council.</p>
  </li>
  <li>
    <p>At the Friday lunch meeting a Chapter selects its representative for the
Stream Council, which is conducted immediately afterward while squads are
conducting their weekly reviews.</p>
  </li>
  <li>
    <p>Squad retrospectives are held immediately following the Stream Council
meeting so that any treaties proposed by Council can be immediately and
unanimously ratified. If ratification of a treaty is not achieved, a further
Conuncil meeting may be held immediately after the squad retros to sort the
matter out. If polarization occurs here then the Stream lead may force
temporary (1 week) adoption of a treaty to enable discussions to continue.
See more details on this below.</p>
  </li>
  <li>
    <p>Chapters track treaties in an Adaptation Kanban with work states of
Awareness, Architecture, Adoption, Acceleration and Acceptance. This kanban
rolls up to inform the Stream Council’s Adaptation Kanban. </p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
