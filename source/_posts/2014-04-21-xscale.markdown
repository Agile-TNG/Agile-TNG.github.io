---
layout: post
title: "XSCALE: an Agile Enterprise Ecosystem"
date: 2014-04-21 20:46:55 +1000
author: Peter Merel
comments: true
categories: 
- XSCALE
- eXcellence
- Scale-Symmetry
- Continuous
- Autonomous
- Lean
- Ecosystem
- V0.7
---

{% img /images/xscale.png %}

Related to SAFe, Spotify and BDD, XSCALE is a continuously delivering, continuously
self-organizing, continuously adaptive Agile enterprise ecosystem that turns all the
knobs to ten.

<!-- more -->

## Why XSCALE?
{:.no-toc}

There have been several efforts to provide enterprises with a way to scale Agile. The
most popular are SAFe, LeSS, Agile Path and the Spotify Tribal model.  Each has its
[strengths and weaknesses](#related-frameworks).

* toc
{:toc}

XSCALE is a synthesis that:

* Standardizes team practices using Scrum-XP like SAFe
* Transforms the enterprise iteratively like Agile Path
* Refactors component silos into feature teams like LeSS
* Uses tribal structures, CD and DevOps like Spotify

But XSCALE does more than just cherry-pick, introducing:

* Continuous adaptation using the [Seven
  Samurai](http://agiletng.org/2014/03/21/the-seven-samurai/) pattern language.
* Continuous product planning using a method based on Lean Startup, Lean UX and
  [BPP](http://agiletng.org/2014/05/14/behavioral-product-planning/)
* Continuous self-organization using [Iroquois
  councils](http://agiletng.org/2014/04/02/iroquois-council/), a combination of Open
  Space, BDD and Kanban.

Like any framework, XSCALE is really just a collection of patterns that have been
proved to reinforce each others' strengths. Its intent is to afford enterprises on all
scales a way to iteratively create a state of the art Agile capability while
minimizing risk of disruption to existing value streams. 

## XSCALE Principles

XSCALE conforms with the [A:TNG values](http://agiletng.org/2014/03/10/4-new-values/),
which form a strict superset of those in the Agile Manifesto. Within these values
XSCALE offers six principles that also form a superset of the ones in the Manifesto.

eXcellence
: Turn all the knobs to ten.

Scale-symmetry
: Draw distinctions to control combinations.

Continuous
: Work on the smallest practical cycle time and batch size.

Autonomous
: Enable consensus to make decisions and delimit accountabilities.

Lean
: Maximize net ROI.

Ecosystem
: Continuous adaptation of the whole to its parts.

Explanation for each principle follows, then a discussion of practice patterns that
embody them.

### eXcellence

The term "extreme" in the original XP unfortunately evoked the idea of recklessness,
which caused some trepidation in the fledgling days of Agile.  Nevertheless the
manifesto authors recognized XP's true intent in their principle which reads,
"Continuous attention to technical excellence and good design enhances agility".
XSCALE calls this continuous attention "eXcellence", and takes Beck's definition:

> * If code reviews are good, we'll review code all the time \[Pair Working\].
> * If testing is good, everyone will test all the time \[TDD\], even the customers
> \[ATDD, now BDD\]
> * If simplicity is good, we'll always leave the system with the simplest design that
> supports its current functionality \[Refactoring\]
> * If integration testing is important, we'll integrate and test several times a day
> \[Continuous Integration\]
> * If short iterations are good, we'll make the iterations really short \[Stories\]

And so on - it wobbled around a bit from edition to edition but Beck summed it up with
the maxim,

**Turn all the knobs to ten.**

{% img /images/knobs.jpg %}

XSCALE regards the XP engineering practices, BDD, CD and Feature Teams as the
fundamentals of technical excellence. These patterns interlock to assure technical
debt is paid before it earns interest and impacts ROI, and thereby keeps the
delivery process stable, predictable and flexible. 

### Scale-symmetry

Scale is about combinations of requirements, of dependencies, of defects,
and of people. The number of combinations of a set grows very rapidly; a set
of just 10 things has over 3.6 million distinct combinations. 

Yet golfers are untroubled by combinations of billions of grass blades.  They
use simple distinctions to control the combined behaviours of grass: "the
green", "the rough", and so on. Once the ball is placed they make further
sub-distinctions to do with common slopes and blade-lengths.  They only make
distinctions about the commonalities, never about all the interactions between
individual grass blades. 

Agile uses this approach when it 
* refactors code into distinct ([DRY]()) classes by common behaviours
* automates testing to keep ambient defect count low, minimizing the time
  required to sort out combinations of defects
* combines people into small teams with distinct backlogs to limit the need
  for cross-team communications
* The Spotify patterns do this too by factoring cross-cutting concerns to
  distinct chapters and guilds. 

In general the principle is:

**Draw distinctions to control combinations**

{% img /images/koch-curve.gif %}

Fractal curves use the same idea. In this animation of a "Koch Curve" a line
segment is mapped to 4 smaller line segments to look like a tent. Then
each of those is transformed the same way, and so on, breadth-first, so that
a complicated curve forms. 

XSCALE applies this principle to the challenge of determining which
combinations of business alternatives have most value.  Agile works as a
hill-climbing method, continously integrating little stories into a whole,
it's quite happy to climb a molehill of value when there's an Everest right
next door. 

Small projects look to a good product owner to find their Everest, but when you've got
portfolios of programs of projects, misalignment is easy and consistent value is
combinatorially hard.  If a hill-climbing method is used on the Koch curve above, for
example, it is vanishingly unlikely to reach the highest point. Mapping the curve
breadth-first, however, will always find that point.

XSCALE uses the Behavioral Product Planning games to achieve control over this
combinatorial space. BPP makes breadth-first distinctions about business alternatives,
then sorts these into easily optimized piles. Then it iterates on the features of
maximum ROI. This assures consistent decisions about business alternatives at all
scales, and it the analysis completes quickly and efficiently, ruling out large
amounts of the "search space" without in depth exploration.

### Continuous

SAFe promotes Punctuated Cadence over Continuous Delivery, employing a
quarterly [release train]() integration pattern. This enables conservative
organizations to keep their component silos, but at no small price:

* Increased cost of quality due to deferring regression and acceptance
  testing to "hardening sprints".
* Wasted time in meetings to figure out how to satisfy combinatoric
  inter-team dependency cycles.
* Lost ROI from keeping finished features on ice for a quarter

By employing continuous rather than big-bang transformation, XSCALE improves
on SAFe to iteratively break component silos into feature teams. The benefit
is to avoid the above penalties as feature teams can use the GitFlow pattern
language for continuous delivery. In general the principle is simply:

**Work on the smallest practical cycle time and batch size**

{% img /images/sushi-train.png %}

XSCALE applies the same principle in its continuous product planning,
continuous stream coordination, and continuous transformation patterns.

### Autonomous

Philosophers dream of an anarchic utopia where the only law is the [Golden
Rule](). As the scale of a group increases past the [Dunbar
Number](http://en.wikipedia.org/wiki/Dunbar's_number), however, social
obligations combinatorially degrade so the [Tragedy of the Commons]() leads
to conflicts of interest that must be controlled through more restrictive
forms of society. 

Many of the benefits of Agile derive from peer collaboration and team
consensus games like planning poker and retrospectives, and it wouldn't be
reasonable to call a process Agile at any scale if it doesn't empower
consensus through games. So the XSCALE principle is:

**Enable consensus to make decisions and to delimit accountabilities.**

{% img /images/council.png %}

In theory, individual accountability should be applied when the business
cost of delaying a decision is greater than the social cost of failing to
maintain consensus. In practice it's hard to figure these costs out.
Historically the happiest medium seems to have been the Iroquois
Confederacy, which used unanimous consent at sub-Dunbar scales to control a
hierarchy of peer councils. 

Where consensus protocol was violated or timing called for a rapid decision,
per-tribe "war chiefs" were made accountable. This combination of councils
and accountables proved stable at a multi-national scale over a period of
centuries. XSCALE combines it with the Spotify tribal model to scale
consensus decisions while clearly maintaining team and stream autonomy.

### Lean

Lean is often defined as "Minimizing Waste". Unfortunately that definition
only refers to one of the three Lean pathologies, muda. Lean also works to
minimize overburden (muri) and irregularity (mura). 

{% img /images/mmm.jpg %}

The waste maxim also admits an ambiguity. [Lean Startup](), [Lean UX]() and
[LSD]() use Lean to mean process efficiency, but Lean Six Sigma and Lean
Accounting interpret it to mean cost minimization, right first time, and
hierarchical standardization. These latter forms of Lean can appear to
oppose Agile's focus on maximizing ROI, fail fast, and adaptive
collaboration.  To prevent confusion XSCALE eliminates the ambiguity by
defining the Lean principle simply as:

**Maximize net ROI**

We say net ROI to account for Cost of Delay (COD), and we represent this
explicitly when adapting the order and design of the work. With this in mind
XSCALE adapts several specific Lean practice patterns:

* As a special case of Breadth-first Roadmapping, Lean Startup's [business
  model canvas]() to pivot and refactor the enterprise's value streams
* Per stream [Value Stream Maps]() converted to a [Lean Kanban]() and
  [cumulative flow diagrams]() to represent the relationship between stream
  funding, stream return, and the stream roadmap
* [Product Teams]() working cross-functionally per Lean UX to coordinate
  [set-based-design]() with lo-fi prototyping, BDD and Feature roadmaps
* [Lean Transformation Canvas]() as a roadmap for the [Seven Samurai]().

These Lean practices all work to maximise net ROI. XSCALE interlocks them using
scale-symmetric roadmapping to render a simple stream funding cycle without resorting
to project budgets and baselines. This provides a way for teams in the stream and
streams in the enterprise to continuously respond to changes in internal and external
metrics, innovations and new learnings.

### Ecosystem

We have become used to combining the noun ecosystem with the adjective
fragile. This is an artefact of the [anthropocene era]() where biological
ecosystems are undergoing catastrophic change. 

The prime characteristic of an ecosystem, however, is not fragility, but
agility. An ecosystem embraces cycles of change to maintain its productivity
over time. So a biological ecosystem differs from a zoo in that it
continuously adapts to changes in the populations and behaviours of its
constituent organisms. In a scale-symmetric sense the same might be said of
an individual organism and its constituent cells.

The biological principles are generation and death. Generation continuously
produces experimental variations in behaviour, and death removes variations
that don't efficiently adapt to the whole. In XSCALE we think of Lean
pivoting and [set-based design]() serving the function of generation, and
Agile refactoring serving that of death, but the principle of the ecosystem
remains the same:

**Continuous adaptation of the whole to its parts**

{%img /images/eco.png %}

XP embodies this principle in its practice of [Merciless
Refactoring](http://www.c2.com/cgi/wiki?RefactorMercilessly) and Lean Startup in its
principal of [Get Paid or Get
Pivoting](http://blog.leanstartupcircle.com/get-paid-or-get-pivoting/).  XSCALE
extends it to the rollout of structure and practices to squads in streams and streams
in the enterprise. The ecosystem principle turns the Taylorist conceit of all-wise
managers and serf-like workers on its head, leveraging the Agile function of
management as [servant-leaders]() to autonomous teams of peer workers.

In order to pivot and refactor the enterprise as a whole, XSCALE relies on a
hierarchy of councils: 

* chapters as groupings of people with common capabilities across squads 
* stream councils steered by chapter representatives
* an enterprise council steered by stream council representatives. 

At each level there are also some individual accountabilities defined by
these teams.  Each squad in a stream has distinct roles for agile coach and
product owner.  Each stream has a product manager and a stream manager. And
the enterprise has its executive officers. 

The accountabilities of these individual roles are defined by treaties
within their respective councils. Likewise the accountabilities of the
enterprise as a whole, and each of its streams, and each of their chapters,
are all respectively defined by treaties in story-normal form. Councils each
use this statement of their accountability to scope their planning using the
**Breadth-First Roadmap** method described below.

## XSCALE Patterns

XSCALE is "opinionated" in the same sense as [Ruby on Rails]().  This means
you'll want to follow its practices very closely to begin with - because this
is how it "turns all the knobs to ten".  

Because XSCALE isn't a big-change-up-front framework, as it grows and the
enterprise gains experience with its practices the various councils will
collaboratively vary and augment them. Nevertheless, the following provides
a state of the art starting point.

## Enterprise Practices

XSCALE adopts the [Beyond Budgeting]() premise that each value stream must
either earn its keep or convince other, self-funded streams that it is worth
their investing some part of their revenue to fund it. This is not to
disempower executives, but to assure that the enterprise pivots coherently
and collaboratively to improve its overall ROI.

### BPP

While we describe the patterns in this section as "Enterprise Practices", this doesn't
mean they're only performed in the stratosphere.  Following the principle of
Scale-Symmetry these same patterns are used by streams and squads to optimize their
respective ROI and reconcile same with available funding.  As a pattern language based
on and generating BDD we refer to these practices collectively as Behavioral Product
Planning, and describe them in their own post
[here](http://agiletng.org/2014/05/14/behavioral-product-planning/).

### Continuous Adaptation

As per the [Seven Samurai]() pattern language, XSCALE starts by constructing
a "Minimum Viable Agile Capability" - a "spike" squad within a single stream
that forms a model for all those to come.  The spike squad prototypes and
proves that its tools, relationships and processes integrate as an
efficient end to end SDLC by delivering a stream of small concrete features
with real business value.

In other words this is the familiar Agile [steel thread]() pattern applied
to organizing an Agile capability. It is fundamentally important to avoid
pain at scale that the spike squad delivers whole end to end features, not
merely components, so that all the technical and organizational fundamentals
are reliably integrated.

To continuously integrate the spike squad with the pre-existing
organization, [Seven Samurai]() assembles the first Stream Council from the
lead doers - not deciders - from each of the organization's pre-existing
component silos.  As delivery squads multiply, these leads naturally
function as chapter representatives on the Stream Council.

Meanwhile progressive senior managers are enroled into the initial
Enterprise Council to provide a one-stop reporting and support shop for
coaches.  As XSCALE is adopted by more streams, their managers will take
part in their respective councils and thereby may become stream reps on the
Enterprise Council. As described below this leverages the Scale-Symmetric
principle to assure consistent, iterative rollout of XSCALE across the
enterprise.

### Chapters and Councils

As explained in the Ecosystem section above, Streams and Squads have their
specific purposes distinguished by treaties framed in story-normal form.
Councils and Chapters adapt and expand these respective treaties by means of
Breadth-First Roadmaps that detail how their Streams and Squads  will
organize to satisfy the terms of the treaties that define them. 

We refer to this process as Continous Adaptation because it's not a simple
matter of executing a pre-defined plan.  The BPP patterns are applied to
estimate and prioritize the respective  roadmap using themes drawn from the
Seven Samurai patterns to reflect respective accountabilities and
responsibilities at each level:

* Chapters are accountable for the Adoption and Acceleration of practice
  patterns by their squads, and responsible for providing Awareness and
  Architecture sufficient to support them.
* Stream Councils are accountable for overall Awareness and Architecture,
  and responsible for Stream Flow Assessment of their current state and BPP
  Analysis of their BFR.
* The Enterprise Council is accountable for Assessment and Analysis across
  all streams, and responsible for cross-stream Alignment and, in
  conjunction with the CFO's office, Appropriation of funding per stream.

Each council keeps an Adaptation Kanban to track the progress of features
drawn from a backlog it generates by using BPP on its BFR, and cumulative
flow diagrams - not to be confused with the Stream Flow diagrams - represent
progress as the whole adapts over time.

### Meeting Schedules

{% img /images/chapters.png 400 %}

As XSCALE rolls out it becomes advantageous to synchronize the various council
meetings so that they don't cause calendar-stress. XSCALE leverages the squads'weekly
cycle to achieve this:

* All of a stream's chapters meet simultaneously every Friday lunch so that
  squad activities aren't interrupted. Chapters may also meet at other
  times coordinating via their Stream Council.

* At the Friday lunch meeting a Chapter selects its representatives for the
  Stream Council, which is conducted immediately afterward while squads are
  conducting their weekly reviews. To avoid waste, time and location for
  reviews, retros and council meetings should be pre-determined and
  synchronized.

* Squad retrospectives are held immediately following the Stream Council
  meeting so that any treaties proposed by Council might be immediately and
  unanimously ratified. 
  
* Guild meetings are held asynchronously as convenient to the Guild members.

* Once a month each Stream holds a half-day full Council meeting for all its
  members in accordance with the Iroquois pattern. If ratification of a
  treaty was not achieved unanimously in squad retrospectives, the treaty is
  shelved until concerns can be ironed out at this monthly meeting. The
  Stream Manager may still require squads to temporarily adopt a treaty
  until the monthly Council can sort it out.

* The Enterprise Council, consisting of Stream and Product Managers from all
  Streams, along with all relevant senior executives, also meets once a
  month to review Stream Flow diagrams and update the enterprise's business
  canvas and related financial plans. The Enterprise Council may also meet
  asynchronously whenever one of its members calls for this.

### Continuous Adaptation


### Funding Cycle

\[more to come\]
## Stream Practices

### Stream Structure

By a Stream we mean a Spotifystructured tribe that self-organizes using a
BFR and Feature backlog, a Stream Flow diagram, an Adaptation Kanban and a
Council made up of Chapter representatives. We call this a stream rather
than a tribe to emphasize its focus on optimizing a Lean value stream.

{% img /images/spotify.png 400 %}

Because the [Spotify
model](http://blog.kevingoldsmith.com/2014/03/14/thoughts-on-emulating-spotifys-matrix-organization-in-other-companies/)
supports a
[semi-lattice](http://www.bp.ntu.edu.tw/wp-content/uploads/2011/12/06-Alexander-A-city-is-not-a-tree.pdf)
rather than hierarchic enterprise structure, it is more open, more
flexible and more responsive to change than traditional corporate structures.
As Chris Alexander says, "As the relationships between functions change, so
the systems which need to overlap in order to receive these relationships
must also change". 

This is clearly reflected in the Spotify experience where
"We can spin up a new squad to take advantage of an opportunity or handle an
issue without worry about changing reporting structures. If a squad completes
its goals and has no reason to exist anymore, we can dissolve it without
punishing a manager".

XSCALE augments the Spotify Model with a consensus decision-making pattern
derived from the historical Iroquois Confederacy. This pattern coordinates
decision-making across squads, streams and the enterprise as as whole is
described in the **Continuous Adaptation** section below.

### Stream Flow Diagram

{% img /images/flow.png 400 %}

Every Stream is intended to generate a return. If the Stream serves a purely
internal function then its return may simply be defined as equal to its
funding.  XSCALE represents the return and the funding for a Stream in terms
of Feature Points on a Stream Flow diagram, a special kind of cumulative
flow diagram.

Note that where we refer to story points here we mean Monetized Story Points
derived by the formula given in the Feature Points section above. The layers
of the Stream Flow diagram represent, from bottom to top:

* deployed features
* integrated but undeployed stories 
* implemented but unintegrated stories
* estimated but unimplemented stories
* features with stories covered by BDD scenarios
* BPP best fit of features to funding 
* squad/stream funding limit over time
* stream revenue over time

Stream Flow represents all of these on one consistent diagram per squad.
Because of normalization to feature points these diagrams are trivially
rolled up per stream, and then to the enterprise as a whole. This diagam is
extremely enlightening because it is directly amenable to traditional Lean
analysis of cycle time, latency, WIP, etc. This provides visual and
actionable identification of wastes, bottlenecks, irregularities and
opportunities, as well as their relative magnitudes. 

## Squad Practices

### DevOps + CD + GitFlow

{% img /images/cd.png 400 %}

Squads are the most concrete embodiment of XSCALE principles:

* Per the eXcellence principle, BDD per feature and per story is fully
  implemented and all CI and SIT tests pass before any feature is deployed.
* Per the Scale-Symmetry principle, features (defined at this level as
  groups of stories that when deployed together will deliver some concrete
  business value) are each assigned to a distinct squad. 
* Per the Continous principle, sprints are 1 week long. This means all the
  sprint rituals have minimum practical batch size and cycle time.
* Per the Autonomous principle, squads use the GitFlow pattern so they don't
  need to wait for another squad in order to integrate, test and deploy.
* Per the Lean principle a feature is deployed by its squad immediately as
  soon as it passes CI and SIT.
* Per the Ecosystem principle, Ops forms a chapter that provides consistent
  virtualized test environments and production-like System Integration
  Testing (SIT) environments, and assures the behaviour of these CI and SIT
  environments are equivalent under test. This assures squads collectively
  own their code base andconsistently adapt to one another as it evolves.

### Lean UX + BDD + XP

{% img /images/xp.png 400 %}

* Streams use the Lean UX [Product Team]() pattern where product owners from
  multiple squads along with, designers, analysts, SMEs and architects work
  together to break features down into groups of stories to supply the
  delivery squads. To comform with the Spotify structure this Product Team
  takes the form of a Chapter.  Whenever the Product Chapter is not meeting,
  its members spend time collaborating with delivery squads.

* Stories are produced in [Gherkin]() format factored to maintain [INVEST]()
  properties. Squads get together with members of the Product Team every
  Wednesday afternoon to estimate its latest batches of stories.
  
* A story with INVEST defects is returned without an estiamte to the Product
  Team for clarification. Otherwise the throughput of the Product Team is
  graphed on the [Stream Flow diagram]() according to the number of
  estimated feature points per week.

* Squads hold reviews and retrospectives every Friday and task breakout
  sessions every Monday, and every day starts with a standup meeting.


## Related frameworks

* [SAFe](http://scaledagileframework.com) targets existing enterprises with a
  high-discipline, top-down, big-change-up-front, punctuated cadence Agile model that
  combines Kanban, quarterly [release trains](http://scaledagileframework.com/rte/),
  XP and Scrum. SAFe is a good starting point for conservative organizations as it's
  designed to enable agility while keeping component silos intact.  But that means it
  [shys away from feature teams, continuous delivery and
  scale-symmetry](http://xprogramming.com/articles/safe-good-but-not-good-enough/).

* [LeSS](http://www.crosstalkonline.org/storage/issue-archives/2013/201305/201305-larman.pdf)
  and [Agile Path](http://www.ebmgt.org/agility-guide) are scale-symmetric
  alternatives based on traditional Scrum. They offer low-discipline
  high-collaboration, continuous cadence models that employ [Scrum of
  Scrums](http://www.scrumalliance.org/community/articles/2007/may/advice-on-conducting-the-scrum-of-scrums-meeting)
  to deal with integration and cross-cutting concerns. XP practices are optional but
  feature teams are mandatory. Like SAFe, LeSS uses big-change-up-front but Agile Path
  introduces a method of continuous transformation.  Specific practices for product
  planning, test automation and so on are left for teams to determine ad hoc. 

* [The Spotify model](http://www.slideshare.net/vmysla/scrum-at-spotify) dispenses
  with Scrum of Scrums in favour of a pattern of [Tribes and Guilds](), strongly
  emphasizing bottom-up autonomy.  It gives little prescription on team practices,
  calling its smallest teams squads to avoid dictating even the Scrum rules. It
  rightly expects a structure of top-flight autonomous teams will be able to decide
  for itself how to evolve Agile practices. But it still commits to Continuous
  Delivery and DevOps.
  

